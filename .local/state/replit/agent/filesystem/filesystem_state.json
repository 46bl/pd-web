{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nPlayDirty is a full-stack e-commerce web application for gaming enhancement tools and cheats. The application features a modern React frontend with a sleek dark theme and an Express.js backend API. It includes a welcoming homepage that establishes PlayDirty as a trusted cheat supplier with 24/7 support, along with product browsing, search, and filtering capabilities with a responsive design that works across desktop and mobile devices.\n\n## Recent Changes (September 28, 2025)\n- **Enhanced Reviews System**: Complete image upload functionality with professional UI\n  - Professional drag-and-drop image upload interface with 3-image limit per review\n  - File validation (type checking, 5MB size limits) and base64 storage system\n  - Image preview with removal functionality in review form\n  - Beautiful image display in review listings with click-to-expand modal view\n  - Complete CRUD operations with proper database persistence\n  - Comprehensive frontend and backend validation\n- **Purchase History System**: Complete order tracking and management\n  - Comprehensive order history with detailed product information and status tracking\n  - Digital download management with secure file access and redownload functionality\n  - One-click reorder functionality for easy repurchasing\n  - Full authentication integration with role-based access\n- **Discount System**: Complete infrastructure (built but not activated)\n  - Secure role-based authorization system using proper user.role field\n  - Comprehensive admin management interface with full CRUD operations\n  - Customer discount input component with validation\n  - Complete discount calculation and application logic\n  - Built infrastructure ready for future activation\n- **Security Enhancements**: Fixed critical security vulnerabilities\n  - Implemented proper role-based authorization instead of insecure substring checks\n  - Applied database schema updates for user roles and product review images\n  - All security fixes verified and tested\n\n## Previous Changes (September 13, 2025)\n- Successfully set up the GitHub import in Replit environment\n- Configured development workflow on port 5000 with hot module replacement\n- Created new homepage with \"Welcome to PlayDirty\" hero section\n- Added content highlighting PlayDirty as a premium gaming enhancement supplier\n- Integrated multiple 24/7 support mentions and trust indicators\n- Maintained consistent dark theme and styling throughout\n- Set up deployment configuration for production (autoscale)\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Styling**: TailwindCSS with shadcn/ui component library for consistent, modern UI design\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Design System**: Dark theme with red accent colors, custom CSS variables for theming\n- **Component Structure**: Modular component architecture with reusable UI components\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API architecture with proper error handling and logging\n- **Development**: Hot reload with Vite integration for seamless full-stack development\n- **Storage**: In-memory storage implementation with interface for future database integration\n\n## Data Layer\n- **ORM**: Drizzle ORM configured for PostgreSQL with type-safe queries\n- **Schema**: Shared TypeScript schemas between client and server using Zod validation\n- **Database**: PostgreSQL with Neon serverless database connection\n- **Migrations**: Drizzle Kit for database migrations and schema management\n\n## Development Environment\n- **Build System**: Vite for frontend bundling and esbuild for server bundling\n- **Type Safety**: Full TypeScript coverage across frontend, backend, and shared schemas\n- **Code Quality**: Consistent code formatting and linting setup\n- **Development Server**: Integrated development server with API proxy and hot reload\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **drizzle-orm**: Type-safe ORM for database operations\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight React router\n\n## UI Component Library\n- **@radix-ui**: Accessible, unstyled UI primitives for building design system\n- **shadcn/ui**: Pre-built component library based on Radix UI\n- **tailwindcss**: Utility-first CSS framework for styling\n- **class-variance-authority**: Utility for creating component variants\n\n## Development Tools\n- **vite**: Build tool and development server\n- **typescript**: Type safety across the application\n- **esbuild**: Fast JavaScript bundler for production builds\n- **drizzle-kit**: Database migration and schema management tool\n\n## Form and Validation\n- **react-hook-form**: Form state management and validation\n- **@hookform/resolvers**: Integration with validation libraries\n- **zod**: Schema validation for forms and API data\n\n## Additional Libraries\n- **date-fns**: Date manipulation and formatting\n- **embla-carousel-react**: Carousel/slider component\n- **cmdk**: Command palette component for search functionality","size_bytes":5419},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    hmr: {\n      clientPort: 5000,\n    },\n  },\n});\n","size_bytes":1050},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport path from \"path\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration for admin authentication\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'playdirty-admin-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Serve static files from attached_assets directory with absolute path\nconst assetsDir = path.resolve(import.meta.dirname, \"..\", \"attached_assets\");\napp.use(\"/attached_assets\", express.static(assetsDir, { fallthrough: false, index: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2703},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertSupportTicketSchema, insertProductReviewSchema, insertWishlistSchema } from \"@shared/schema\";\nimport { setupAuth } from \"./auth\";\n\n// Extend session to include admin authentication\ndeclare module 'express-session' {\n  interface SessionData {\n    isAdmin?: boolean;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication first\n  setupAuth(app);\n\n  // User authentication middleware\n  const requireUserAuth = (req: any, res: any, next: any) => {\n    if (req.isAuthenticated && req.isAuthenticated()) {\n      return next();\n    }\n    return res.status(401).json({ message: 'Unauthorized' });\n  };\n  // Get all products\n  app.get(\"/api/products\", async (_req, res) => {\n    try {\n      res.set('Cache-Control', 'no-store');\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Get single product\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Search products\n  app.get(\"/api/products/search/:query\", async (req, res) => {\n    try {\n      const products = await storage.searchProducts(req.params.query);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search products\" });\n    }\n  });\n\n  // Filter products\n  app.post(\"/api/products/filter\", async (req, res) => {\n    try {\n      const products = await storage.filterProducts(req.body);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to filter products\" });\n    }\n  });\n\n  // Enhanced product search with advanced filters\n  app.post(\"/api/products/search/advanced\", async (req, res) => {\n    try {\n      const { query = '', filters = {} } = req.body;\n      const products = await storage.getAdvancedProductSearch(query, filters);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to perform advanced search\" });\n    }\n  });\n\n  // Get product recommendations\n  app.get(\"/api/products/recommendations\", async (req, res) => {\n    try {\n      const userId = (req as any).user?.id;\n      const productId = req.query.productId as string;\n      const limit = parseInt(req.query.limit as string) || 5;\n      \n      const recommendations = await storage.getProductRecommendations(userId, productId, limit);\n      res.json(recommendations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recommendations\" });\n    }\n  });\n\n  // Recently viewed products\n  app.post(\"/api/recently-viewed/:productId\", requireUserAuth, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const productId = req.params.productId;\n      \n      await storage.addRecentlyViewed(userId, productId);\n      \n      // Log user activity\n      await storage.logUserActivity({\n        userId,\n        action: 'view_product',\n        entityType: 'product',\n        entityId: productId,\n        metadata: JSON.stringify({ timestamp: new Date().toISOString() })\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to track product view\" });\n    }\n  });\n\n  app.get(\"/api/recently-viewed\", requireUserAuth, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const products = await storage.getRecentlyViewed(userId);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recently viewed products\" });\n    }\n  });\n\n  // FAQ endpoints\n  app.get(\"/api/faq\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const faqItems = await storage.getFaqItems(category);\n      res.json(faqItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch FAQ items\" });\n    }\n  });\n\n  // User activity tracking\n  app.get(\"/api/user/activity\", requireUserAuth, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const activities = await storage.getUserActivity(userId);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user activity\" });\n    }\n  });\n\n  // Product Reviews API\n  // Get reviews for a product\n  app.get(\"/api/products/:productId/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getProductReviews(req.params.productId);\n      res.json(reviews);\n    } catch (error) {\n      console.error('Failed to fetch product reviews:', error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // Add a review for a product (requires authentication)\n  app.post(\"/api/products/:productId/reviews\", requireUserAuth, async (req: any, res) => {\n    try {\n      const { productId } = req.params;\n      const userId = req.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Check if user has already reviewed this product\n      const hasReviewed = await storage.hasUserReviewedProduct(userId, productId);\n      if (hasReviewed) {\n        return res.status(400).json({ message: \"You have already reviewed this product\" });\n      }\n\n      // Check if user has purchased this product to set verified purchase status\n      const userOrders = await storage.getUserOrders(userId);\n      const hasPurchased = userOrders.some(order => \n        order.productId === productId && order.status === 'completed'\n      );\n\n      // Validate request body\n      const result = insertProductReviewSchema.safeParse({\n        ...req.body,\n        productId,\n        userId\n      });\n\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Invalid review data\",\n          errors: result.error.errors\n        });\n      }\n\n      const review = await storage.addProductReview({\n        ...result.data,\n        isVerifiedPurchase: hasPurchased\n      });\n      res.status(201).json(review);\n    } catch (error) {\n      console.error('Failed to add product review:', error);\n      res.status(500).json({ message: \"Failed to add review\" });\n    }\n  });\n\n  // Update a review (requires authentication and ownership)\n  app.patch(\"/api/reviews/:reviewId\", requireUserAuth, async (req: any, res) => {\n    try {\n      const { reviewId } = req.params;\n      const userId = req.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Validate request body\n      const result = insertProductReviewSchema.omit({ \n        productId: true, \n        userId: true \n      }).partial().safeParse(req.body);\n\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Invalid review data\",\n          errors: result.error.errors\n        });\n      }\n\n      // Check ownership by including userId in the update\n      const updatedReview = await storage.updateProductReview(reviewId, {\n        ...result.data,\n        userId // Ensure user can only update their own review\n      });\n\n      if (!updatedReview) {\n        return res.status(404).json({ message: \"Review not found or unauthorized\" });\n      }\n\n      res.json(updatedReview);\n    } catch (error) {\n      console.error('Failed to update product review:', error);\n      res.status(500).json({ message: \"Failed to update review\" });\n    }\n  });\n\n  // Delete a review (requires authentication and ownership)\n  app.delete(\"/api/reviews/:reviewId\", requireUserAuth, async (req: any, res) => {\n    try {\n      const { reviewId } = req.params;\n      const userId = req.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Get the review first to check ownership\n      const review = await storage.getProductReview(reviewId);\n      \n      if (!review || review.userId !== userId) {\n        return res.status(404).json({ message: \"Review not found or unauthorized\" });\n      }\n\n      const deleted = await storage.deleteProductReview(reviewId);\n      \n      if (!deleted) {\n        return res.status(500).json({ message: \"Failed to delete review\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error('Failed to delete product review:', error);\n      res.status(500).json({ message: \"Failed to delete review\" });\n    }\n  });\n\n  // Mark a review as helpful\n  app.post(\"/api/reviews/:reviewId/helpful\", async (req, res) => {\n    try {\n      const { reviewId } = req.params;\n      const success = await storage.markReviewHelpful(reviewId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Review not found\" });\n      }\n\n      res.json({ message: \"Review marked as helpful\" });\n    } catch (error) {\n      console.error('Failed to mark review as helpful:', error);\n      res.status(500).json({ message: \"Failed to mark review as helpful\" });\n    }\n  });\n\n  // Wishlist API\n  // Get user's wishlist\n  app.get(\"/api/wishlist\", requireUserAuth, async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const wishlist = await storage.getUserWishlist(userId);\n      res.json(wishlist);\n    } catch (error) {\n      console.error('Failed to fetch wishlist:', error);\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  // Add product to wishlist\n  app.post(\"/api/wishlist/:productId\", requireUserAuth, async (req: any, res) => {\n    try {\n      const { productId } = req.params;\n      const userId = req.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Check if product exists\n      const product = await storage.getProduct(productId);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      // Check if already in wishlist\n      const isInWishlist = await storage.isProductInWishlist(userId, productId);\n      if (isInWishlist) {\n        return res.status(400).json({ message: \"Product is already in wishlist\" });\n      }\n\n      const wishlistItem = await storage.addToWishlist(userId, productId);\n      res.status(201).json(wishlistItem);\n    } catch (error) {\n      console.error('Failed to add to wishlist:', error);\n      res.status(500).json({ message: \"Failed to add to wishlist\" });\n    }\n  });\n\n  // Remove product from wishlist\n  app.delete(\"/api/wishlist/:productId\", requireUserAuth, async (req: any, res) => {\n    try {\n      const { productId } = req.params;\n      const userId = req.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const success = await storage.removeFromWishlist(userId, productId);\n      if (!success) {\n        return res.status(404).json({ message: \"Product not found in wishlist\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error('Failed to remove from wishlist:', error);\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Check if product is in wishlist\n  app.get(\"/api/wishlist/check/:productId\", requireUserAuth, async (req: any, res) => {\n    try {\n      const { productId } = req.params;\n      const userId = req.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const isInWishlist = await storage.isProductInWishlist(userId, productId);\n      res.json({ isInWishlist });\n    } catch (error) {\n      console.error('Failed to check wishlist status:', error);\n      res.status(500).json({ message: \"Failed to check wishlist status\" });\n    }\n  });\n\n  // Get product groups\n  app.get(\"/api/product-groups\", async (_req, res) => {\n    try {\n      res.set('Cache-Control', 'no-store');\n      const productGroups = await storage.getProductGroups();\n      res.json(productGroups);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product groups\" });\n    }\n  });\n\n  // SellAuth webhook endpoint for automatic delivery\n  app.post(\"/api/webhooks/sellauth\", async (req, res) => {\n    try {\n      const { order_id, product_id, customer_email, customer_name } = req.body;\n      \n      // Get product details\n      const product = await storage.getProduct(product_id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      // Generate delivery response based on product type\n      const deliveryContent: any = {};\n      \n      // Add delivery content based on product type\n      if (product.deliveryUrl) {\n        deliveryContent.download_url = product.deliveryUrl;\n      }\n      if (product.licenseKey) {\n        deliveryContent.license_key = product.licenseKey;\n      }\n      \n      const deliveryData = {\n        order_id,\n        customer_email,\n        product_name: product.name,\n        delivery_method: product.deliveryType || \"download\",\n        delivery_content: deliveryContent\n      };\n      \n      // Here you could also:\n      // - Send email with product details\n      // - Generate temporary download links\n      // - Create user accounts\n      // - Deliver game accounts/credentials\n      \n      res.json({\n        success: true,\n        message: \"Product delivered successfully\",\n        delivery: deliveryData\n      });\n      \n    } catch (error) {\n      console.error(\"Webhook error:\", error);\n      res.status(500).json({ message: \"Delivery failed\" });\n    }\n  });\n\n  // Generate secure download link endpoint\n  app.get(\"/api/download/:productId/:token\", async (req, res) => {\n    try {\n      // Validate token and product access\n      const { productId, token } = req.params;\n      \n      // In production, verify the token is valid and hasn't expired\n      // For now, just return the product's delivery URL\n      const product = await storage.getProduct(productId);\n      if (!product || !product.deliveryUrl) {\n        return res.status(404).json({ message: \"Download not found\" });\n      }\n      \n      // Redirect to actual file or return download info\n      res.json({\n        product_name: product.name,\n        download_url: product.deliveryUrl,\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\n      });\n      \n    } catch (error) {\n      res.status(500).json({ message: \"Download failed\" });\n    }\n  });\n\n  // Support ticket submission\n  app.post(\"/api/support\", async (req, res) => {\n    try {\n      const validatedData = insertSupportTicketSchema.parse(req.body);\n      const ticket = await storage.createSupportTicket(validatedData);\n      res.status(201).json({\n        success: true,\n        message: \"Support ticket created successfully\",\n        ticket: {\n          id: ticket.id,\n          status: ticket.status,\n          createdAt: ticket.createdAt\n        }\n      });\n    } catch (error) {\n      console.error(\"Support ticket creation error:\", error);\n      res.status(400).json({ \n        success: false,\n        message: \"Failed to create support ticket\"\n      });\n    }\n  });\n\n  // Admin authentication middleware\n  const requireAdminAuth = (req: any, res: any, next: any) => {\n    if (req.session?.isAdmin) {\n      return next();\n    }\n    return res.status(401).json({ message: 'Unauthorized' });\n  };\n\n  // Admin login\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      // Simple authentication with provided credentials\n      if (username === 'pdcheats' && password === 'Astras08!') {\n        req.session!.isAdmin = true;\n        res.json({ success: true, message: 'Login successful' });\n      } else {\n        res.status(401).json({ message: 'Invalid credentials' });\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // Admin auth check\n  app.get(\"/api/admin/check\", requireAdminAuth, (req, res) => {\n    res.json({ authenticated: true });\n  });\n\n  // Admin logout\n  app.post(\"/api/admin/logout\", (req, res) => {\n    req.session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n\n  // Get all orders (admin only)\n  app.get(\"/api/admin/orders\", requireAdminAuth, async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  // Update order status (admin only)\n  app.patch(\"/api/admin/orders/:id/status\", requireAdminAuth, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update order status' });\n    }\n  });\n\n  // Update order license key (admin only)\n  app.patch(\"/api/admin/orders/:id/license\", requireAdminAuth, async (req, res) => {\n    try {\n      const { licenseKey, downloadUrl } = req.body;\n      const order = await storage.updateOrderLicenseKey(req.params.id, licenseKey, downloadUrl);\n      if (!order) {\n        return res.status(404).json({ message: 'Order not found' });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update order license key' });\n    }\n  });\n\n  // Create order (from checkout) - requires authentication\n  app.post(\"/api/orders\", requireUserAuth, async (req, res) => {\n    try {\n      const orderData = {\n        ...req.body,\n        userId: req.user!.id\n      };\n      const order = await storage.createOrder(orderData);\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create order' });\n    }\n  });\n\n  // Get user orders (authenticated)\n  app.get(\"/api/orders\", requireUserAuth, async (req, res) => {\n    try {\n      const { orderId } = req.query;\n      const userId = req.user!.id;\n      \n      if (orderId) {\n        // Get specific order\n        const order = await storage.getUserOrder(orderId as string, userId);\n        if (!order) {\n          return res.status(404).json({ message: 'Order not found' });\n        }\n        res.json(order);\n      } else {\n        // Get all orders for this user\n        const userOrders = await storage.getUserOrders(userId);\n        res.json(userOrders);\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  // User Profile Management Routes\n  \n  // Get current user profile\n  app.get(\"/api/profile\", requireUserAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      // Remove password from response for security\n      const { password, ...userProfile } = user;\n      res.json(userProfile);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch profile' });\n    }\n  });\n\n  // Update user profile\n  app.patch(\"/api/profile\", requireUserAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const updateData = req.body;\n      \n      // Don't allow updating password or id through this endpoint\n      delete updateData.password;\n      delete updateData.id;\n      \n      const updatedUser = await storage.updateUserProfile(userId, updateData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      // Remove password from response\n      const { password, ...userProfile } = updatedUser;\n      res.json(userProfile);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update profile' });\n    }\n  });\n\n  // Change password\n  app.patch(\"/api/profile/password\", requireUserAuth, async (req, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      const userId = req.user!.id;\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: 'Current password and new password are required' });\n      }\n      \n      const success = await storage.changeUserPassword(userId, currentPassword, newPassword);\n      if (!success) {\n        return res.status(400).json({ message: 'Current password is incorrect' });\n      }\n      \n      res.json({ message: 'Password updated successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update password' });\n    }\n  });\n\n  // Upload avatar\n  app.post(\"/api/profile/avatar\", requireUserAuth, async (req, res) => {\n    try {\n      const { avatar } = req.body; // Base64 encoded image or URL\n      const userId = req.user!.id;\n      \n      if (!avatar) {\n        return res.status(400).json({ message: 'Avatar data is required' });\n      }\n      \n      const updatedUser = await storage.updateUserAvatar(userId, avatar);\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      res.json({ avatar: updatedUser.avatar });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to upload avatar' });\n    }\n  });\n\n  // Delete user account\n  app.delete(\"/api/profile\", requireUserAuth, async (req, res) => {\n    try {\n      const { password } = req.body;\n      const userId = req.user!.id;\n      \n      if (!password) {\n        return res.status(400).json({ message: 'Password confirmation required' });\n      }\n      \n      const success = await storage.deleteUserAccount(userId, password);\n      if (!success) {\n        return res.status(400).json({ message: 'Incorrect password' });\n      }\n      \n      // Destroy session after account deletion\n      req.logout((err) => {\n        if (err) {\n          return res.status(500).json({ message: 'Failed to logout after account deletion' });\n        }\n        res.json({ message: 'Account deleted successfully' });\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete account' });\n    }\n  });\n\n  // Discount Codes API Routes\n\n  // Validate discount code (public - used during checkout)\n  app.post(\"/api/discount-codes/validate\", async (req, res) => {\n    try {\n      const { code, orderAmount } = req.body;\n      \n      if (!code) {\n        return res.status(400).json({ message: 'Discount code is required' });\n      }\n      \n      const discount = await storage.validateDiscountCode(code.toUpperCase());\n      if (!discount) {\n        return res.status(404).json({ message: 'Invalid or expired discount code' });\n      }\n      \n      // Check minimum order amount\n      if (orderAmount && parseFloat(orderAmount) < parseFloat(discount.minOrderAmount || '0')) {\n        return res.status(400).json({ \n          message: `Minimum order amount of $${discount.minOrderAmount} required` \n        });\n      }\n      \n      // Calculate discount amount\n      let discountAmount = 0;\n      if (discount.type === 'percentage') {\n        discountAmount = (parseFloat(orderAmount || '0') * parseFloat(discount.value)) / 100;\n      } else {\n        discountAmount = parseFloat(discount.value);\n      }\n      \n      res.json({\n        code: discount.code,\n        type: discount.type,\n        value: discount.value,\n        discountAmount,\n        minOrderAmount: discount.minOrderAmount,\n        valid: true\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to validate discount code' });\n    }\n  });\n\n  // Admin discount code management routes (require admin auth)\n  \n  // Get all discount codes (admin only)\n  app.get(\"/api/admin/discount-codes\", requireUserAuth, async (req, res) => {\n    try {\n      // Check if user has admin role\n      const user = req.user!;\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      \n      const discountCodes = await storage.getAllDiscountCodes();\n      res.json(discountCodes);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch discount codes' });\n    }\n  });\n  \n  // Create new discount code (admin only)\n  app.post(\"/api/admin/discount-codes\", requireUserAuth, async (req, res) => {\n    try {\n      // Check if user has admin role\n      const user = req.user!;\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      \n      const discountData = {\n        ...req.body,\n        createdBy: user.id\n      };\n      \n      const discountCode = await storage.createDiscountCode(discountData);\n      res.status(201).json(discountCode);\n    } catch (error) {\n      if (error?.message?.includes('unique') || error?.code === '23505') {\n        return res.status(400).json({ message: 'Discount code already exists' });\n      }\n      res.status(500).json({ message: 'Failed to create discount code' });\n    }\n  });\n\n  // Update discount code (admin only)\n  app.put(\"/api/admin/discount-codes/:id\", requireUserAuth, async (req, res) => {\n    try {\n      // Check if user has admin role\n      const user = req.user!;\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      \n      const { id } = req.params;\n      const updateData = req.body;\n      \n      const updatedCode = await storage.updateDiscountCode(id, updateData);\n      if (!updatedCode) {\n        return res.status(404).json({ message: 'Discount code not found' });\n      }\n      \n      res.json(updatedCode);\n    } catch (error) {\n      if (error?.message?.includes('unique') || error?.code === '23505') {\n        return res.status(400).json({ message: 'Discount code already exists' });\n      }\n      res.status(500).json({ message: 'Failed to update discount code' });\n    }\n  });\n\n  // Delete discount code (admin only)\n  app.delete(\"/api/admin/discount-codes/:id\", requireUserAuth, async (req, res) => {\n    try {\n      // Check if user has admin role\n      const user = req.user!;\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      \n      const { id } = req.params;\n      \n      const success = await storage.deleteDiscountCode(id);\n      if (!success) {\n        return res.status(404).json({ message: 'Discount code not found' });\n      }\n      \n      res.json({ message: 'Discount code deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete discount code' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":26942},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Product,\n  type InsertProduct,\n  type ProductGroup,\n  type SupportTicket,\n  type InsertSupportTicket,\n  type ProductReview,\n  type InsertProductReview,\n  type Wishlist,\n  type InsertWishlist,\n  type RecentlyViewed,\n  type InsertRecentlyViewed,\n  type DiscountCode,\n  type InsertDiscountCode,\n  type FaqItem,\n  type InsertFaqItem,\n  type Referral,\n  type InsertReferral,\n  type UserActivity,\n  type InsertUserActivity,\n  users,\n  products,\n  supportTickets,\n  orders,\n  productReviews,\n  wishlists,\n  recentlyViewed,\n  discountCodes,\n  faqItems,\n  referrals,\n  userActivity,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { eq, and, or, gte, lte, ilike, inArray, desc, sql } from \"drizzle-orm\";\nimport { db } from \"./db.js\";\n\nexport interface Order {\n  id: string;\n  productName: string;\n  productPrice: string;\n  userId: string;\n  customerEmail?: string;\n  paymentMethod: string;\n  walletAddress: string;\n  status: 'pending' | 'confirmed' | 'completed';\n  createdAt: string;\n  transactionId?: string;\n  licenseKey?: string;\n  downloadUrl?: string;\n}\n\nexport interface CreateOrderData {\n  productName: string;\n  productPrice: string;\n  userId: string;\n  customerEmail?: string;\n  paymentMethod: string;\n  walletAddress: string;\n}\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductGroups(): Promise<ProductGroup[]>;\n  searchProducts(query: string): Promise<Product[]>;\n  filterProducts(filters: {\n    categories?: string[];\n    games?: string[];\n    priceRange?: { min: number; max: number };\n    inStock?: boolean;\n  }): Promise<Product[]>;\n\n  createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket>;\n  getSupportTickets(): Promise<SupportTicket[]>;\n\n  getOrders(): Promise<Order[]>;\n  createOrder(orderData: CreateOrderData): Promise<Order>;\n  updateOrderStatus(id: string, status: 'pending' | 'confirmed' | 'completed'): Promise<Order | undefined>;\n  updateOrderLicenseKey(id: string, licenseKey: string, downloadUrl?: string): Promise<Order | undefined>;\n  getUserOrders(userId: string): Promise<Order[]>;\n  getUserOrder(orderId: string, userId: string): Promise<Order | undefined>;\n\n  // Product reviews\n  addProductReview(reviewData: InsertProductReview): Promise<ProductReview>;\n  \n  // Recently viewed products\n  addRecentlyViewed(userId: string, productId: string): Promise<void>;\n  getRecentlyViewed(userId: string): Promise<Product[]>;\n  \n  // Wishlist functionality\n  addToWishlist(userId: string, productId: string): Promise<Wishlist>;\n  removeFromWishlist(userId: string, productId: string): Promise<void>;\n  getUserWishlist(userId: string): Promise<Product[]>;\n  isInWishlist(userId: string, productId: string): Promise<boolean>;\n  \n  // User activity tracking\n  logUserActivity(activity: InsertUserActivity): Promise<void>;\n  getUserActivity(userId: string): Promise<UserActivity[]>;\n  \n  // FAQ functionality\n  getFaqItems(category?: string): Promise<FaqItem[]>;\n  addFaqItem(faq: InsertFaqItem): Promise<FaqItem>;\n  \n  // Discount codes (ready for future activation)\n  validateDiscountCode(code: string): Promise<DiscountCode | null>;\n  createDiscountCode(discount: InsertDiscountCode): Promise<DiscountCode>;\n  getAllDiscountCodes(): Promise<DiscountCode[]>;\n  updateDiscountCode(id: string, updateData: Partial<InsertDiscountCode>): Promise<DiscountCode | null>;\n  deleteDiscountCode(id: string): Promise<boolean>;\n  \n  // Referral system\n  createReferral(referral: InsertReferral): Promise<Referral>;\n  getReferralByCode(code: string): Promise<Referral | null>;\n  getUserReferrals(userId: string): Promise<Referral[]>;\n  \n  // Product reviews (existing methods)\n  getProductReviews(productId: string): Promise<ProductReview[]>;\n  getProductReview(reviewId: string): Promise<ProductReview | undefined>;\n  updateProductReview(id: string, updateData: Partial<InsertProductReview>): Promise<ProductReview | undefined>;\n  deleteProductReview(id: string): Promise<boolean>;\n  markReviewHelpful(reviewId: string): Promise<boolean>;\n  hasUserReviewedProduct(userId: string, productId: string): Promise<boolean>;\n\n  // Enhanced search and filtering\n  getAdvancedProductSearch(query: string, filters: {\n    categories?: string[];\n    games?: string[];\n    priceRange?: { min: number; max: number };\n    inStock?: boolean;\n    sortBy?: 'price' | 'rating' | 'newest';\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<Product[]>;\n  \n  // Product recommendations\n  getProductRecommendations(userId?: string, productId?: string, limit?: number): Promise<Product[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private products: Map<string, Product>;\n  private productGroups: Map<string, ProductGroup>;\n  private supportTickets: Map<string, SupportTicket>;\n  private orders: Map<string, Order>;\n\n  constructor() {\n    this.users = new Map();\n    this.products = new Map();\n    this.productGroups = new Map();\n    this.supportTickets = new Map();\n    this.orders = new Map();\n    this.initializeProducts();\n    this.initializeProductGroups();\n  }\n\n  private initializeProducts() {\n    const now = new Date();\n    const initialProducts: Omit<Product, \"id\">[] = [\n      // Rust MEK variants\n      {\n        name: \"Rust MEK - 1 Day\",\n        description: \"Premium Rust enhancement tool - 1 Day access\",\n        price: \"7.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 15,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-mek-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-1day.zip\",\n        licenseKey: \"RUST-MEK-1D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.8,\n        reviewCount: 24,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Rust MEK - 3 Day\",\n        description: \"Premium Rust enhancement tool - 3 Day access\",\n        price: \"15.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 12,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-mek-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-3day.zip\",\n        licenseKey: \"RUST-MEK-3D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.7,\n        reviewCount: 18,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Rust MEK - 7 Day\",\n        description: \"Premium Rust enhancement tool - 7 Day access\",\n        price: \"29.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 8,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-mek-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-7day.zip\",\n        licenseKey: \"RUST-MEK-7D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.9,\n        reviewCount: 32,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Rust MEK - 30 Day\",\n        description: \"Premium Rust enhancement tool - 30 Day access\",\n        price: \"59.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 5,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-mek-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-30day.zip\",\n        licenseKey: \"RUST-MEK-30D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.8,\n        reviewCount: 45,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Rust MEK - Lifetime\",\n        description: \"Premium Rust enhancement tool - Lifetime access\",\n        price: \"249.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 2,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-mek-image.png\",\n        deliveryUrl:\n          \"https://secure.pdcheats.uk/downloads/rust-mek-lifetime.zip\",\n        licenseKey: \"RUST-MEK-LT-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.9,\n        reviewCount: 67,\n        createdAt: now,\n        updatedAt: now,\n      },\n      // Temp Spoofer variants\n      {\n        name: \"Temp Spoofer - 1 Day\",\n        description: \"Temporary hardware ID spoofer - 1 Day access\",\n        price: \"5.99\",\n        originalPrice: null,\n        category: \"Spoofers\",\n        game: \"Multi-Game\",\n        stockQuantity: 20,\n        inStock: true,\n        imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n        deliveryUrl:\n          \"https://secure.pdcheats.uk/downloads/temp-spoofer-1day.zip\",\n        licenseKey: \"TSPOOF-1D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.6,\n        reviewCount: 15,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Temp Spoofer - 7 Day\",\n        description: \"Temporary hardware ID spoofer - 7 Day access\",\n        price: \"17.99\",\n        originalPrice: null,\n        category: \"Spoofers\",\n        game: \"Multi-Game\",\n        stockQuantity: 15,\n        inStock: true,\n        imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n        deliveryUrl:\n          \"https://secure.pdcheats.uk/downloads/temp-spoofer-7day.zip\",\n        licenseKey: \"TSPOOF-7D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.7,\n        reviewCount: 28,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Temp Spoofer - 30 Day\",\n        description: \"Temporary hardware ID spoofer - 30 Day access\",\n        price: \"36.99\",\n        originalPrice: null,\n        category: \"Spoofers\",\n        game: \"Multi-Game\",\n        stockQuantity: 10,\n        inStock: true,\n        imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n        deliveryUrl:\n          \"https://secure.pdcheats.uk/downloads/temp-spoofer-30day.zip\",\n        licenseKey: \"TSPOOF-30D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.8,\n        reviewCount: 36,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Temp Spoofer - Lifetime\",\n        description: \"Temporary hardware ID spoofer - Lifetime access\",\n        price: \"179.99\",\n        originalPrice: null,\n        category: \"Spoofers\",\n        game: \"Multi-Game\",\n        stockQuantity: 3,\n        inStock: true,\n        imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n        deliveryUrl:\n          \"https://secure.pdcheats.uk/downloads/temp-spoofer-lifetime.zip\",\n        licenseKey: \"TSPOOF-LT-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.9,\n        reviewCount: 52,\n        createdAt: now,\n        updatedAt: now,\n      },\n      // Rust FA\n      {\n        name: \"Rust FA\",\n        description: \"Rust Full Access account with premium features\",\n        price: \"7.99\",\n        originalPrice: null,\n        category: \"Game Accounts\",\n        game: \"Rust\",\n        stockQuantity: 8,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-fa-image.png\",\n        deliveryUrl: null,\n        licenseKey: null,\n        deliveryType: \"account\",\n        averageRating: 4.5,\n        reviewCount: 12,\n        createdAt: now,\n        updatedAt: now,\n      },\n      // Apex External variants\n      {\n        name: \"Apex External - 1 Day\",\n        description: \"External Apex Legends cheat - 1 Day access\",\n        price: \"2.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Apex Legends\",\n        stockQuantity: 25,\n        inStock: true,\n        imageUrl: \"/attached_assets/apex-external-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/apex-ext-1day.zip\",\n        licenseKey: \"APEX-EXT-1D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.3,\n        reviewCount: 19,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Apex External - 3 Day\",\n        description: \"External Apex Legends cheat - 3 Day access\",\n        price: \"4.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Apex Legends\",\n        stockQuantity: 20,\n        inStock: true,\n        imageUrl: \"/attached_assets/apex-external-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/apex-ext-3day.zip\",\n        licenseKey: \"APEX-EXT-3D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.4,\n        reviewCount: 15,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Apex External - 7 Day\",\n        description: \"External Apex Legends cheat - 7 Day access\",\n        price: \"14.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Apex Legends\",\n        stockQuantity: 15,\n        inStock: true,\n        imageUrl: \"/attached_assets/apex-external-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/apex-ext-7day.zip\",\n        licenseKey: \"APEX-EXT-7D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.5,\n        reviewCount: 22,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Apex External - 30 Day\",\n        description: \"External Apex Legends cheat - 30 Day access\",\n        price: \"29.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Apex Legends\",\n        stockQuantity: 8,\n        inStock: true,\n        imageUrl: \"/attached_assets/apex-external-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/apex-ext-30day.zip\",\n        licenseKey: \"APEX-EXT-30D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.6,\n        reviewCount: 31,\n        createdAt: now,\n        updatedAt: now,\n      },\n      // Perm Spoofer variants\n      {\n        name: \"Perm Spoofer - One Time\",\n        description: \"Permanent hardware ID spoofer - One time use\",\n        price: \"21.00\",\n        originalPrice: null,\n        category: \"Spoofers\",\n        game: \"Multi-Game\",\n        stockQuantity: 12,\n        inStock: true,\n        imageUrl: \"/attached_assets/perm-spoofer-fresh.png\",\n        deliveryUrl:\n          \"https://secure.pdcheats.uk/downloads/perm-spoofer-onetime.zip\",\n        licenseKey: \"PSPOOF-OT-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.7,\n        reviewCount: 18,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Perm Spoofer - Lifetime\",\n        description: \"Permanent hardware ID spoofer - Lifetime access\",\n        price: \"55.00\",\n        originalPrice: null,\n        category: \"Spoofers\",\n        game: \"Multi-Game\",\n        stockQuantity: 5,\n        inStock: true,\n        imageUrl: \"/attached_assets/perm-spoofer-fresh.png\",\n        deliveryUrl:\n          \"https://secure.pdcheats.uk/downloads/perm-spoofer-lifetime.zip\",\n        licenseKey: \"PSPOOF-LT-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.8,\n        reviewCount: 33,\n        createdAt: now,\n        updatedAt: now,\n      },\n      // Rust NFA\n      {\n        name: \"Rust NFA 0-5000 hours\",\n        description: \"Rust No Full Access account with 0-5000 hours playtime\",\n        price: \"3.99\",\n        originalPrice: null,\n        category: \"Game Accounts\",\n        game: \"Rust\",\n        stockQuantity: 30,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-nfa-image.png\",\n        deliveryUrl: null,\n        licenseKey: null,\n        deliveryType: \"account\",\n        averageRating: 4.2,\n        reviewCount: 8,\n        createdAt: now,\n        updatedAt: now,\n      },\n      // Rust External variants\n      {\n        name: \"Rust External - 1 Day\",\n        description: \"External Rust cheat - 1 Day access\",\n        price: \"5.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 18,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-external-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-ext-1day.zip\",\n        licenseKey: \"RUST-EXT-1D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.6,\n        reviewCount: 14,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Rust External - 3 Days\",\n        description: \"External Rust cheat - 3 Days access\",\n        price: \"9.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 14,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-external-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-ext-3days.zip\",\n        licenseKey: \"RUST-EXT-3D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.5,\n        reviewCount: 11,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Rust External - 7 Days\",\n        description: \"External Rust cheat - 7 Days access\",\n        price: \"21.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 10,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-external-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-ext-7days.zip\",\n        licenseKey: \"RUST-EXT-7D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.7,\n        reviewCount: 19,\n        createdAt: now,\n        updatedAt: now,\n      },\n      {\n        name: \"Rust External - 30 Day\",\n        description: \"External Rust cheat - 30 Day access\",\n        price: \"51.99\",\n        originalPrice: null,\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        stockQuantity: 6,\n        inStock: true,\n        imageUrl: \"/attached_assets/rust-external-image.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-ext-30day.zip\",\n        licenseKey: \"RUST-EXT-30D-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.8,\n        reviewCount: 27,\n        createdAt: now,\n        updatedAt: now,\n      },\n      // DMA Products\n      {\n        name: \"DMA Bundle Firmware Included\",\n        description: \"Complete DMA hardware bundle with firmware included for multi-game support\",\n        price: \"659.99\",\n        originalPrice: null,\n        category: \"DMA Hardware\",\n        game: \"Multi-Game\",\n        stockQuantity: 2,\n        inStock: true,\n        imageUrl: \"https://i.postimg.cc/jjCxmnSp/Screenshot-2025-09-13-150454.png\",\n        deliveryUrl: \"https://secure.pdcheats.uk/downloads/dma-bundle.zip\",\n        licenseKey: \"DMA-BUNDLE-2025-XXXX\",\n        deliveryType: \"download\",\n        averageRating: 4.9,\n        reviewCount: 5,\n        createdAt: now,\n        updatedAt: now,\n      },\n    ];\n\n    initialProducts.forEach((product) => {\n      const id = randomUUID();\n      this.products.set(id, { ...product, id });\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    const allProducts = Array.from(this.products.values());\n    const lowerQuery = query.toLowerCase();\n\n    return allProducts.filter(\n      (product) =>\n        product.name.toLowerCase().includes(lowerQuery) ||\n        product.description.toLowerCase().includes(lowerQuery) ||\n        product.game.toLowerCase().includes(lowerQuery) ||\n        product.category.toLowerCase().includes(lowerQuery),\n    );\n  }\n\n  async filterProducts(filters: {\n    categories?: string[];\n    games?: string[];\n    priceRange?: { min: number; max: number };\n    inStock?: boolean;\n  }): Promise<Product[]> {\n    const allProducts = Array.from(this.products.values());\n\n    return allProducts.filter((product) => {\n      if (filters.categories && filters.categories.length > 0) {\n        if (!filters.categories.includes(product.category)) return false;\n      }\n\n      if (filters.games && filters.games.length > 0) {\n        if (!filters.games.includes(product.game)) return false;\n      }\n\n      if (filters.priceRange) {\n        const price = parseFloat(product.price);\n        if (price < filters.priceRange.min || price > filters.priceRange.max)\n          return false;\n      }\n\n      if (filters.inStock !== undefined) {\n        if (product.inStock !== filters.inStock) return false;\n      }\n\n      return true;\n    });\n  }\n\n  async getProductGroups(): Promise<ProductGroup[]> {\n    return Array.from(this.productGroups.values());\n  }\n\n  private initializeProductGroups() {\n    const groups: Omit<ProductGroup, \"id\">[] = [\n      {\n        name: \"Rust MEK\",\n        description:\n          \"Premium Rust enhancement tool with multiple duration options\",\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        imageUrl: \"/attached_assets/rust-mek-image.png\",\n        deliveryType: \"download\",\n        variants: [\n          {\n            id: \"rust-mek-1d\",\n            name: \"1 Day\",\n            price: \"7.99\",\n            stockQuantity: 15,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-mek-1day.zip\",\n            licenseKey: \"RUST-MEK-1D-XXXX\",\n          },\n          {\n            id: \"rust-mek-3d\",\n            name: \"3 Day\",\n            price: \"15.99\",\n            stockQuantity: 12,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-mek-3day.zip\",\n            licenseKey: \"RUST-MEK-3D-XXXX\",\n          },\n          {\n            id: \"rust-mek-7d\",\n            name: \"7 Day\",\n            price: \"29.99\",\n            stockQuantity: 8,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-mek-7day.zip\",\n            licenseKey: \"RUST-MEK-7D-XXXX\",\n          },\n          {\n            id: \"rust-mek-30d\",\n            name: \"30 Day\",\n            price: \"59.99\",\n            stockQuantity: 5,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-mek-30day.zip\",\n            licenseKey: \"RUST-MEK-30D-XXXX\",\n          },\n          {\n            id: \"rust-mek-lt\",\n            name: \"Lifetime\",\n            price: \"249.99\",\n            stockQuantity: 2,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-mek-lifetime.zip\",\n            licenseKey: \"RUST-MEK-LT-XXXX\",\n          },\n        ],\n      },\n      {\n        name: \"Temp Spoofer\",\n        description:\n          \"Temporary hardware ID spoofer with multiple duration options\",\n        category: \"Spoofers\",\n        game: \"Multi-Game\",\n        imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n        deliveryType: \"download\",\n        variants: [\n          {\n            id: \"temp-spoof-1d\",\n            name: \"1 Day\",\n            price: \"5.99\",\n            stockQuantity: 20,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/temp-spoofer-1day.zip\",\n            licenseKey: \"TSPOOF-1D-XXXX\",\n          },\n          {\n            id: \"temp-spoof-7d\",\n            name: \"7 Day\",\n            price: \"17.99\",\n            stockQuantity: 15,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/temp-spoofer-7day.zip\",\n            licenseKey: \"TSPOOF-7D-XXXX\",\n          },\n          {\n            id: \"temp-spoof-30d\",\n            name: \"30 Day\",\n            price: \"36.99\",\n            stockQuantity: 10,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/temp-spoofer-30day.zip\",\n            licenseKey: \"TSPOOF-30D-XXXX\",\n          },\n          {\n            id: \"temp-spoof-lt\",\n            name: \"Lifetime\",\n            price: \"179.99\",\n            stockQuantity: 3,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/temp-spoofer-lifetime.zip\",\n            licenseKey: \"TSPOOF-LT-XXXX\",\n          },\n        ],\n      },\n      {\n        name: \"Apex External\",\n        description:\n          \"External Apex Legends cheat with multiple duration options\",\n        category: \"Game Cheats\",\n        game: \"Apex Legends\",\n        imageUrl: \"/attached_assets/apex-external-image.png\",\n        deliveryType: \"download\",\n        variants: [\n          {\n            id: \"apex-ext-1d\",\n            name: \"1 Day\",\n            price: \"2.99\",\n            stockQuantity: 25,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/apex-ext-1day.zip\",\n            licenseKey: \"APEX-EXT-1D-XXXX\",\n          },\n          {\n            id: \"apex-ext-3d\",\n            name: \"3 Day\",\n            price: \"4.99\",\n            stockQuantity: 20,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/apex-ext-3day.zip\",\n            licenseKey: \"APEX-EXT-3D-XXXX\",\n          },\n          {\n            id: \"apex-ext-7d\",\n            name: \"7 Day\",\n            price: \"14.99\",\n            stockQuantity: 15,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/apex-ext-7day.zip\",\n            licenseKey: \"APEX-EXT-7D-XXXX\",\n          },\n          {\n            id: \"apex-ext-30d\",\n            name: \"30 Day\",\n            price: \"29.99\",\n            stockQuantity: 8,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/apex-ext-30day.zip\",\n            licenseKey: \"APEX-EXT-30D-XXXX\",\n          },\n        ],\n      },\n      {\n        name: \"Perm Spoofer\",\n        description: \"Permanent hardware ID spoofer with multiple options\",\n        category: \"Spoofers\",\n        game: \"Multi-Game\",\n        imageUrl: \"/attached_assets/perm-spoofer-fresh.png\",\n        deliveryType: \"download\",\n        variants: [\n          {\n            id: \"perm-spoof-ot\",\n            name: \"One Time\",\n            price: \"21.00\",\n            stockQuantity: 12,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/perm-spoofer-onetime.zip\",\n            licenseKey: \"PSPOOF-OT-XXXX\",\n          },\n          {\n            id: \"perm-spoof-lt\",\n            name: \"Lifetime\",\n            price: \"55.00\",\n            stockQuantity: 5,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/perm-spoofer-lifetime.zip\",\n            licenseKey: \"PSPOOF-LT-XXXX\",\n          },\n        ],\n      },\n      {\n        name: \"Rust External\",\n        description: \"External Rust cheat with multiple duration options\",\n        category: \"Game Cheats\",\n        game: \"Rust\",\n        imageUrl: \"/attached_assets/rust-external-image.png\",\n        deliveryType: \"download\",\n        variants: [\n          {\n            id: \"rust-ext-1d\",\n            name: \"1 Day\",\n            price: \"5.99\",\n            stockQuantity: 18,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-ext-1day.zip\",\n            licenseKey: \"RUST-EXT-1D-XXXX\",\n          },\n          {\n            id: \"rust-ext-3d\",\n            name: \"3 Days\",\n            price: \"9.99\",\n            stockQuantity: 14,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-ext-3days.zip\",\n            licenseKey: \"RUST-EXT-3D-XXXX\",\n          },\n          {\n            id: \"rust-ext-7d\",\n            name: \"7 Days\",\n            price: \"21.99\",\n            stockQuantity: 10,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-ext-7days.zip\",\n            licenseKey: \"RUST-EXT-7D-XXXX\",\n          },\n          {\n            id: \"rust-ext-30d\",\n            name: \"30 Day\",\n            price: \"51.99\",\n            stockQuantity: 6,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/rust-ext-30day.zip\",\n            licenseKey: \"RUST-EXT-30D-XXXX\",\n          },\n        ],\n      },\n      {\n        name: \"DMA Firmware\",\n        description: \"Professional DMA firmware for advanced users\",\n        category: \"DMA Firmware\",\n        game: \"Multi-Game\",\n        imageUrl: \"/attached_assets/dma-hardware-image.png\",\n        deliveryType: \"download\",\n        variants: [\n          {\n            id: \"dma-firmware\",\n            name: \"Standard\",\n            price: \"119.99\",\n            stockQuantity: 4,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/dma-firmware.zip\",\n            licenseKey: \"DMA-FW-2025-XXXX\",\n          },\n          {\n            id: \"dma-firmware-priv\",\n            name: \"1:1 private\",\n            price: \"199.99\",\n            stockQuantity: 1,\n            inStock: true,\n            deliveryUrl:\n              \"https://secure.pdcheats.uk/downloads/dma-firmware-private.zip\",\n            licenseKey: \"DMA-FW-PRIV-2025-XXXX\",\n          },\n        ],\n      },\n      {\n        name: \"DMA Bundle Firmware Included\",\n        description: \"Complete DMA hardware bundle with firmware included\",\n        category: \"DMA Hardware\",\n        game: \"Multi-Game\",\n        imageUrl: \"/attached_assets/dma-hardware-image.png\",\n        deliveryType: \"download\",\n        variants: [\n          {\n            id: \"dma-bundle\",\n            name: \"Complete Bundle\",\n            price: \"659.99\",\n            stockQuantity: 2,\n            inStock: true,\n            deliveryUrl: \"https://secure.pdcheats.uk/downloads/dma-bundle.zip\",\n            licenseKey: \"DMA-BUNDLE-2025-XXXX\",\n          },\n          {\n            id: \"dma-bundle-no-firmware\",\n            name: \"Bundle with no firmware\",\n            price: \"499.99\",\n            stockQuantity: 3,\n            inStock: true,\n            deliveryUrl: \"https://secure.pdcheats.uk/downloads/dma-bundle-no-firmware.zip\",\n            licenseKey: \"DMA-BUNDLE-NO-FW-2025-XXXX\",\n          },\n        ],\n      },\n      {\n        name: \"Rust FA\",\n        description: \"Rust Full Access account with premium features\",\n        category: \"Game Accounts\",\n        game: \"Rust\",\n        imageUrl: \"/attached_assets/rust-fa-image.png\",\n        deliveryType: \"account\",\n        variants: [\n          {\n            id: \"rust-fa\",\n            name: \"Standard\",\n            price: \"7.99\",\n            stockQuantity: 8,\n            inStock: true,\n            deliveryUrl: null,\n            licenseKey: null,\n          },\n        ],\n      },\n      {\n        name: \"Rust NFA 0-5000 hours\",\n        description: \"Rust No Full Access account with 0-5000 hours playtime\",\n        category: \"Game Accounts\",\n        game: \"Rust\",\n        imageUrl: \"/attached_assets/rust-nfa-image.png\",\n        deliveryType: \"account\",\n        variants: [\n          {\n            id: \"rust-nfa\",\n            name: \"Standard\",\n            price: \"3.99\",\n            stockQuantity: 30,\n            inStock: true,\n            deliveryUrl: null,\n            licenseKey: null,\n          },\n        ],\n      },\n    ];\n\n    groups.forEach((group) => {\n      const id = randomUUID();\n      this.productGroups.set(id, { ...group, id });\n    });\n  }\n\n  async createSupportTicket(\n    ticket: InsertSupportTicket,\n  ): Promise<SupportTicket> {\n    const id = randomUUID();\n    const supportTicket: SupportTicket = {\n      id,\n      name: ticket.name,\n      email: ticket.email,\n      subject: ticket.subject,\n      message: ticket.message,\n      priority: ticket.priority || \"medium\",\n      status: \"open\",\n      createdAt: new Date().toISOString(),\n    };\n\n    this.supportTickets.set(id, supportTicket);\n    return supportTicket;\n  }\n\n  async getSupportTickets(): Promise<SupportTicket[]> {\n    return Array.from(this.supportTickets.values()).sort(\n      (a, b) =>\n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),\n    );\n  }\n\n  // Order management methods\n  async getOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async createOrder(orderData: CreateOrderData): Promise<Order> {\n    const order: Order = {\n      id: randomUUID(),\n      productName: orderData.productName,\n      productPrice: orderData.productPrice,\n      userId: orderData.userId,\n      customerEmail: orderData.customerEmail,\n      paymentMethod: orderData.paymentMethod,\n      walletAddress: orderData.walletAddress,\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n    };\n\n    this.orders.set(order.id, order);\n    return order;\n  }\n\n  async updateOrderStatus(id: string, status: 'pending' | 'confirmed' | 'completed'): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) {\n      return undefined;\n    }\n\n    const updatedOrder = { ...order, status };\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  async updateOrderLicenseKey(id: string, licenseKey: string, downloadUrl?: string): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    \n    const updatedOrder = { ...order, licenseKey, downloadUrl };\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return Array.from(this.orders.values())\n      .filter(order => order.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getUserOrder(orderId: string, userId: string): Promise<Order | undefined> {\n    const order = this.orders.get(orderId);\n    if (!order || order.userId !== userId) {\n      return undefined;\n    }\n    return order;\n  }\n\n  // Product review methods - stub implementations\n  async addProductReview(reviewData: InsertProductReview): Promise<ProductReview> {\n    throw new Error(\"Product reviews not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async getProductReviews(productId: string): Promise<ProductReview[]> {\n    throw new Error(\"Product reviews not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async getProductReview(reviewId: string): Promise<ProductReview | undefined> {\n    throw new Error(\"Product reviews not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async updateProductReview(id: string, updateData: Partial<InsertProductReview>): Promise<ProductReview | undefined> {\n    throw new Error(\"Product reviews not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async deleteProductReview(id: string): Promise<boolean> {\n    throw new Error(\"Product reviews not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async markReviewHelpful(reviewId: string): Promise<boolean> {\n    throw new Error(\"Product reviews not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async hasUserReviewedProduct(userId: string, productId: string): Promise<boolean> {\n    throw new Error(\"Product reviews not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  // Wishlist methods - stub implementations\n  async addToWishlist(userId: string, productId: string): Promise<Wishlist> {\n    throw new Error(\"Wishlist functionality not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<boolean> {\n    throw new Error(\"Wishlist functionality not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async getUserWishlist(userId: string): Promise<Wishlist[]> {\n    throw new Error(\"Wishlist functionality not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n\n  async isProductInWishlist(userId: string, productId: string): Promise<boolean> {\n    throw new Error(\"Wishlist functionality not implemented in MemStorage - use DatabaseStorage instead\");\n  }\n}\n\n// DatabaseStorage implementation for PostgreSQL\nexport class DatabaseStorage implements IStorage {\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    const lowerQuery = `%${query.toLowerCase()}%`;\n    return await db.select().from(products).where(\n      or(\n        ilike(products.name, lowerQuery),\n        ilike(products.description, lowerQuery),\n        ilike(products.game, lowerQuery),\n        ilike(products.category, lowerQuery)\n      )\n    );\n  }\n\n  async filterProducts(filters: {\n    categories?: string[];\n    games?: string[];\n    priceRange?: { min: number; max: number };\n    inStock?: boolean;\n  }): Promise<Product[]> {\n    let query = db.select().from(products);\n    const conditions = [];\n\n    if (filters.categories && filters.categories.length > 0) {\n      conditions.push(inArray(products.category, filters.categories));\n    }\n\n    if (filters.games && filters.games.length > 0) {\n      conditions.push(inArray(products.game, filters.games));\n    }\n\n    if (filters.priceRange) {\n      if (filters.priceRange.min) {\n        conditions.push(gte(products.price, filters.priceRange.min.toString()));\n      }\n      if (filters.priceRange.max) {\n        conditions.push(lte(products.price, filters.priceRange.max.toString()));\n      }\n    }\n\n    if (filters.inStock !== undefined) {\n      conditions.push(eq(products.inStock, filters.inStock));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    return await query;\n  }\n\n  async getProductGroups(): Promise<ProductGroup[]> {\n    // Get all products from database\n    const allProducts = await db.select().from(products);\n    \n    // Group products by base name (removing duration suffixes)\n    const groupMap = new Map<string, {\n      baseProduct: typeof allProducts[0],\n      variants: typeof allProducts\n    }>();\n    \n    for (const product of allProducts) {\n      let baseName: string;\n      \n      // Extract base name by removing duration patterns\n      if (product.name.includes(' - ')) {\n        baseName = product.name.split(' - ')[0];\n      } else {\n        baseName = product.name;\n      }\n      \n      if (!groupMap.has(baseName)) {\n        groupMap.set(baseName, {\n          baseProduct: product,\n          variants: []\n        });\n      }\n      \n      groupMap.get(baseName)!.variants.push(product);\n    }\n    \n    // Convert to ProductGroup format\n    const productGroups: ProductGroup[] = [];\n    \n    for (const [baseName, { baseProduct, variants }] of groupMap) {\n      // Always include all product groups, even single variants\n      \n      const group: ProductGroup = {\n        id: baseName.toLowerCase().replace(/\\s+/g, '-'),\n        name: baseName,\n        description: variants.length > 1 ? \n          `${baseProduct.description.split(' - ')[0]} with multiple duration options` :\n          baseProduct.description,\n        category: baseProduct.category,\n        game: baseProduct.game,\n        imageUrl: baseProduct.imageUrl,\n        deliveryType: baseProduct.deliveryType,\n        variants: variants.map(variant => ({\n          id: variant.id,\n          name: variant.name.includes(' - ') ? variant.name.split(' - ')[1] : 'Standard',\n          price: variant.price,\n          originalPrice: variant.originalPrice,\n          stockQuantity: variant.stockQuantity,\n          inStock: variant.inStock,\n          deliveryUrl: variant.deliveryUrl,\n          licenseKey: variant.licenseKey,\n        })),\n      };\n      \n      productGroups.push(group);\n    }\n    \n    return productGroups;\n  }\n\n  async createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket> {\n    const [supportTicket] = await db\n      .insert(supportTickets)\n      .values(ticket)\n      .returning();\n    return supportTicket;\n  }\n\n  async getSupportTickets(): Promise<SupportTicket[]> {\n    return await db\n      .select()\n      .from(supportTickets)\n      .orderBy(desc(supportTickets.createdAt));\n  }\n\n  async getOrders(): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async createOrder(orderData: CreateOrderData): Promise<Order> {\n    const [order] = await db\n      .insert(orders)\n      .values({\n        userId: orderData.userId,\n        productId: \"\", // Will need to be provided in orderData\n        productName: orderData.productName,\n        productPrice: orderData.productPrice,\n        paymentMethod: orderData.paymentMethod,\n        walletAddress: orderData.walletAddress,\n        status: 'pending',\n      })\n      .returning();\n    return order;\n  }\n\n  async updateOrderStatus(id: string, status: 'pending' | 'confirmed' | 'completed'): Promise<Order | undefined> {\n    const [order] = await db\n      .update(orders)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return order || undefined;\n  }\n\n  async updateOrderLicenseKey(id: string, licenseKey: string, downloadUrl?: string): Promise<Order | undefined> {\n    const [order] = await db\n      .update(orders)\n      .set({ \n        licenseKey, \n        downloadUrl,\n        updatedAt: new Date()\n      })\n      .where(eq(orders.id, id))\n      .returning();\n    return order || undefined;\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async getUserOrder(orderId: string, userId: string): Promise<Order | undefined> {\n    const [order] = await db\n      .select()\n      .from(orders)\n      .where(\n        and(\n          eq(orders.id, orderId),\n          eq(orders.userId, userId)\n        )\n      );\n    return order || undefined;\n  }\n\n  // User Profile Management Methods\n  async updateUserProfile(userId: string, updateData: Partial<User>): Promise<User | undefined> {\n    try {\n      const [updatedUser] = await db\n        .update(users)\n        .set({\n          ...updateData,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId))\n        .returning();\n      return updatedUser || undefined;\n    } catch (error) {\n      console.error('Failed to update user profile:', error);\n      return undefined;\n    }\n  }\n\n  async changeUserPassword(userId: string, currentPassword: string, newPassword: string): Promise<boolean> {\n    try {\n      const [user] = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, userId));\n      \n      if (!user) {\n        return false;\n      }\n\n      // Import bcrypt for password comparison\n      const bcrypt = (await import('bcrypt')).default;\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\n      \n      if (!isCurrentPasswordValid) {\n        return false;\n      }\n\n      // Hash the new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n      \n      await db\n        .update(users)\n        .set({\n          password: hashedNewPassword,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to change password:', error);\n      return false;\n    }\n  }\n\n  async updateUserAvatar(userId: string, avatar: string): Promise<User | undefined> {\n    try {\n      const [updatedUser] = await db\n        .update(users)\n        .set({\n          avatar,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId))\n        .returning();\n      return updatedUser || undefined;\n    } catch (error) {\n      console.error('Failed to update user avatar:', error);\n      return undefined;\n    }\n  }\n\n  async deleteUserAccount(userId: string, password: string): Promise<boolean> {\n    try {\n      const [user] = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, userId));\n      \n      if (!user) {\n        return false;\n      }\n\n      // Import bcrypt for password verification\n      const bcrypt = (await import('bcrypt')).default;\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      \n      if (!isPasswordValid) {\n        return false;\n      }\n\n      // In a real application, you might want to soft delete instead of hard delete\n      // to preserve order history and other related data\n      await db\n        .delete(users)\n        .where(eq(users.id, userId));\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to delete user account:', error);\n      return false;\n    }\n  }\n\n  // Product review methods\n  async addProductReview(reviewData: InsertProductReview): Promise<ProductReview> {\n    // Check if user has purchased this product to set verified purchase status\n    const [purchaseOrder] = await db\n      .select()\n      .from(orders)\n      .where(\n        and(\n          eq(orders.userId, reviewData.userId),\n          eq(orders.productId, reviewData.productId),\n          eq(orders.status, \"completed\")\n        )\n      )\n      .limit(1);\n\n    const [review] = await db\n      .insert(productReviews)\n      .values({\n        ...reviewData,\n        isVerifiedPurchase: !!purchaseOrder\n      })\n      .returning();\n\n    // Update product's average rating and review count\n    await this.updateProductRatingStats(reviewData.productId);\n\n    return review;\n  }\n\n  async getProductReviews(productId: string): Promise<ProductReview[]> {\n    return await db\n      .select()\n      .from(productReviews)\n      .where(eq(productReviews.productId, productId))\n      .orderBy(desc(productReviews.createdAt));\n  }\n\n  async getProductReview(reviewId: string): Promise<ProductReview | undefined> {\n    const [review] = await db\n      .select()\n      .from(productReviews)\n      .where(eq(productReviews.id, reviewId));\n    return review || undefined;\n  }\n\n  async updateProductReview(id: string, updateData: Partial<InsertProductReview>): Promise<ProductReview | undefined> {\n    const [updatedReview] = await db\n      .update(productReviews)\n      .set({\n        ...updateData,\n        updatedAt: sql`now()`\n      })\n      .where(eq(productReviews.id, id))\n      .returning();\n\n    if (updatedReview && updateData.rating) {\n      // Update product rating stats if rating changed\n      await this.updateProductRatingStats(updatedReview.productId);\n    }\n\n    return updatedReview || undefined;\n  }\n\n  async deleteProductReview(id: string): Promise<boolean> {\n    try {\n      // Get the review to update product stats after deletion\n      const [review] = await db\n        .select()\n        .from(productReviews)\n        .where(eq(productReviews.id, id));\n\n      if (!review) {\n        return false;\n      }\n\n      await db\n        .delete(productReviews)\n        .where(eq(productReviews.id, id));\n\n      // Update product rating stats\n      await this.updateProductRatingStats(review.productId);\n\n      return true;\n    } catch (error) {\n      console.error('Failed to delete product review:', error);\n      return false;\n    }\n  }\n\n  async markReviewHelpful(reviewId: string): Promise<boolean> {\n    try {\n      await db\n        .update(productReviews)\n        .set({\n          helpfulCount: sql`${productReviews.helpfulCount} + 1`\n        })\n        .where(eq(productReviews.id, reviewId));\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to mark review as helpful:', error);\n      return false;\n    }\n  }\n\n  async hasUserReviewedProduct(userId: string, productId: string): Promise<boolean> {\n    const [existingReview] = await db\n      .select()\n      .from(productReviews)\n      .where(\n        and(\n          eq(productReviews.userId, userId),\n          eq(productReviews.productId, productId)\n        )\n      )\n      .limit(1);\n\n    return !!existingReview;\n  }\n\n  // Helper method to update product rating statistics\n  private async updateProductRatingStats(productId: string): Promise<void> {\n    const reviewStats = await db\n      .select({\n        avgRating: sql<number>`AVG(${productReviews.rating})`,\n        totalReviews: sql<number>`COUNT(*)`\n      })\n      .from(productReviews)\n      .where(eq(productReviews.productId, productId));\n\n    const stats = reviewStats[0];\n    const averageRating = stats?.avgRating ? Math.round(stats.avgRating * 100) / 100 : 0;\n    const reviewCount = stats?.totalReviews || 0;\n\n    await db\n      .update(products)\n      .set({\n        averageRating: averageRating,\n        reviewCount: reviewCount\n      })\n      .where(eq(products.id, productId));\n  }\n\n  // Wishlist management methods\n  async addToWishlist(userId: string, productId: string): Promise<Wishlist> {\n    // Check if already in wishlist to prevent duplicates\n    const exists = await this.isProductInWishlist(userId, productId);\n    if (exists) {\n      throw new Error(\"Product is already in wishlist\");\n    }\n\n    const [wishlistItem] = await db\n      .insert(wishlists)\n      .values({ userId, productId })\n      .returning();\n\n    return wishlistItem;\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<boolean> {\n    try {\n      const result = await db\n        .delete(wishlists)\n        .where(\n          and(\n            eq(wishlists.userId, userId),\n            eq(wishlists.productId, productId)\n          )\n        );\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to remove from wishlist:', error);\n      return false;\n    }\n  }\n\n  async getUserWishlist(userId: string): Promise<Wishlist[]> {\n    return await db\n      .select()\n      .from(wishlists)\n      .where(eq(wishlists.userId, userId))\n      .orderBy(desc(wishlists.createdAt));\n  }\n\n  async isProductInWishlist(userId: string, productId: string): Promise<boolean> {\n    const [item] = await db\n      .select()\n      .from(wishlists)\n      .where(\n        and(\n          eq(wishlists.userId, userId),\n          eq(wishlists.productId, productId)\n        )\n      )\n      .limit(1);\n\n    return !!item;\n  }\n\n  // Recently Viewed Products\n  async addRecentlyViewed(userId: string, productId: string): Promise<void> {\n    // First, check if this product was already viewed recently by this user\n    const existing = await db\n      .select()\n      .from(recentlyViewed)\n      .where(\n        and(\n          eq(recentlyViewed.userId, userId),\n          eq(recentlyViewed.productId, productId)\n        )\n      )\n      .limit(1);\n\n    if (existing.length > 0) {\n      // Update the viewed timestamp\n      await db\n        .update(recentlyViewed)\n        .set({ viewedAt: sql`now()` })\n        .where(\n          and(\n            eq(recentlyViewed.userId, userId),\n            eq(recentlyViewed.productId, productId)\n          )\n        );\n    } else {\n      // Insert new record\n      await db\n        .insert(recentlyViewed)\n        .values({ userId, productId });\n    }\n\n    // Keep only the last 20 viewed items per user\n    const allViewed = await db\n      .select()\n      .from(recentlyViewed)\n      .where(eq(recentlyViewed.userId, userId))\n      .orderBy(desc(recentlyViewed.viewedAt));\n\n    if (allViewed.length > 20) {\n      const toDelete = allViewed.slice(20);\n      const idsToDelete = toDelete.map(item => item.id);\n      await db\n        .delete(recentlyViewed)\n        .where(inArray(recentlyViewed.id, idsToDelete));\n    }\n  }\n\n  async getRecentlyViewed(userId: string): Promise<Product[]> {\n    const recentlyViewedProducts = await db\n      .select({\n        product: products\n      })\n      .from(recentlyViewed)\n      .innerJoin(products, eq(recentlyViewed.productId, products.id))\n      .where(eq(recentlyViewed.userId, userId))\n      .orderBy(desc(recentlyViewed.viewedAt))\n      .limit(10);\n\n    return recentlyViewedProducts.map(row => row.product);\n  }\n\n  // Wishlist functionality (enhanced versions)\n  async getUserWishlist(userId: string): Promise<Product[]> {\n    const wishlistItems = await db\n      .select({\n        product: products\n      })\n      .from(wishlists)\n      .innerJoin(products, eq(wishlists.productId, products.id))\n      .where(eq(wishlists.userId, userId))\n      .orderBy(desc(wishlists.createdAt));\n\n    return wishlistItems.map(row => row.product);\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<void> {\n    await db\n      .delete(wishlists)\n      .where(\n        and(\n          eq(wishlists.userId, userId),\n          eq(wishlists.productId, productId)\n        )\n      );\n  }\n\n  async isInWishlist(userId: string, productId: string): Promise<boolean> {\n    return this.isProductInWishlist(userId, productId);\n  }\n\n  // User Activity Tracking\n  async logUserActivity(activity: InsertUserActivity): Promise<void> {\n    await db\n      .insert(userActivity)\n      .values(activity);\n  }\n\n  async getUserActivity(userId: string): Promise<UserActivity[]> {\n    return await db\n      .select()\n      .from(userActivity)\n      .where(eq(userActivity.userId, userId))\n      .orderBy(desc(userActivity.createdAt))\n      .limit(100);\n  }\n\n  // FAQ Functionality\n  async getFaqItems(category?: string): Promise<FaqItem[]> {\n    let query = db.select().from(faqItems).where(eq(faqItems.isPublished, true));\n    \n    if (category) {\n      query = query.where(eq(faqItems.category, category));\n    }\n    \n    return await query.orderBy(faqItems.order, faqItems.createdAt);\n  }\n\n  async addFaqItem(faq: InsertFaqItem): Promise<FaqItem> {\n    const [faqItem] = await db\n      .insert(faqItems)\n      .values(faq)\n      .returning();\n    return faqItem;\n  }\n\n  // Discount Codes (ready for future activation)\n  async validateDiscountCode(code: string): Promise<DiscountCode | null> {\n    const [discount] = await db\n      .select()\n      .from(discountCodes)\n      .where(\n        and(\n          eq(discountCodes.code, code.toUpperCase()),\n          eq(discountCodes.isActive, true),\n          lte(discountCodes.validFrom, sql`now()`),\n          gte(discountCodes.validTo, sql`now()`)\n        )\n      )\n      .limit(1);\n\n    if (!discount) return null;\n\n    // Check if max uses reached\n    if (discount.maxUses && discount.usedCount >= discount.maxUses) {\n      return null;\n    }\n\n    return discount;\n  }\n\n  async createDiscountCode(discount: InsertDiscountCode): Promise<DiscountCode> {\n    const [discountCode] = await db\n      .insert(discountCodes)\n      .values({\n        ...discount,\n        code: discount.code.toUpperCase()\n      })\n      .returning();\n    return discountCode;\n  }\n\n  async getAllDiscountCodes(): Promise<DiscountCode[]> {\n    const allCodes = await db\n      .select()\n      .from(discountCodes)\n      .orderBy(desc(discountCodes.createdAt));\n    return allCodes;\n  }\n\n  async updateDiscountCode(id: string, updateData: Partial<InsertDiscountCode>): Promise<DiscountCode | null> {\n    // Only include fields that are actually defined to avoid setting NULL values\n    const cleanUpdateData: any = {};\n    \n    Object.keys(updateData).forEach(key => {\n      const value = updateData[key as keyof InsertDiscountCode];\n      if (value !== undefined) {\n        if (key === 'code') {\n          cleanUpdateData[key] = value.toString().toUpperCase();\n        } else {\n          cleanUpdateData[key] = value;\n        }\n      }\n    });\n    \n    const [updatedCode] = await db\n      .update(discountCodes)\n      .set(cleanUpdateData)\n      .where(eq(discountCodes.id, id))\n      .returning();\n    return updatedCode || null;\n  }\n\n  async deleteDiscountCode(id: string): Promise<boolean> {\n    const result = await db\n      .delete(discountCodes)\n      .where(eq(discountCodes.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Referral System\n  async createReferral(referral: InsertReferral): Promise<Referral> {\n    const [referralRecord] = await db\n      .insert(referrals)\n      .values(referral)\n      .returning();\n    return referralRecord;\n  }\n\n  async getReferralByCode(code: string): Promise<Referral | null> {\n    const [referral] = await db\n      .select()\n      .from(referrals)\n      .where(eq(referrals.referralCode, code))\n      .limit(1);\n    return referral || null;\n  }\n\n  async getUserReferrals(userId: string): Promise<Referral[]> {\n    return await db\n      .select()\n      .from(referrals)\n      .where(eq(referrals.referrerId, userId))\n      .orderBy(desc(referrals.createdAt));\n  }\n\n  // Enhanced Search and Filtering\n  async getAdvancedProductSearch(query: string, filters: {\n    categories?: string[];\n    games?: string[];\n    priceRange?: { min: number; max: number };\n    inStock?: boolean;\n    sortBy?: 'price' | 'rating' | 'newest';\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<Product[]> {\n    let dbQuery = db.select().from(products);\n    const conditions = [];\n\n    // Search query\n    if (query && query.trim()) {\n      const lowerQuery = `%${query.toLowerCase()}%`;\n      conditions.push(\n        or(\n          ilike(products.name, lowerQuery),\n          ilike(products.description, lowerQuery),\n          ilike(products.game, lowerQuery),\n          ilike(products.category, lowerQuery)\n        )\n      );\n    }\n\n    // Filters\n    if (filters.categories && filters.categories.length > 0) {\n      conditions.push(inArray(products.category, filters.categories));\n    }\n\n    if (filters.games && filters.games.length > 0) {\n      conditions.push(inArray(products.game, filters.games));\n    }\n\n    if (filters.priceRange) {\n      if (filters.priceRange.min) {\n        conditions.push(gte(products.price, filters.priceRange.min.toString()));\n      }\n      if (filters.priceRange.max) {\n        conditions.push(lte(products.price, filters.priceRange.max.toString()));\n      }\n    }\n\n    if (filters.inStock !== undefined) {\n      conditions.push(eq(products.inStock, filters.inStock));\n    }\n\n    // Apply conditions\n    if (conditions.length > 0) {\n      dbQuery = dbQuery.where(and(...conditions));\n    }\n\n    // Sorting\n    const sortOrder = filters.sortOrder === 'asc' ? 'asc' : 'desc';\n    switch (filters.sortBy) {\n      case 'price':\n        dbQuery = dbQuery.orderBy(sortOrder === 'asc' ? products.price : desc(products.price));\n        break;\n      case 'rating':\n        dbQuery = dbQuery.orderBy(sortOrder === 'asc' ? products.averageRating : desc(products.averageRating));\n        break;\n      case 'newest':\n        dbQuery = dbQuery.orderBy(sortOrder === 'asc' ? products.createdAt : desc(products.createdAt));\n        break;\n      default:\n        dbQuery = dbQuery.orderBy(desc(products.createdAt));\n    }\n\n    return await dbQuery;\n  }\n\n  // Product Recommendations\n  async getProductRecommendations(userId?: string, productId?: string, limit: number = 5): Promise<Product[]> {\n    if (productId) {\n      // Get recommendations based on product (similar products)\n      const [currentProduct] = await db\n        .select()\n        .from(products)\n        .where(eq(products.id, productId))\n        .limit(1);\n\n      if (!currentProduct) {\n        return await this.getPopularProducts(limit);\n      }\n\n      // Find products in same category/game\n      const recommendations = await db\n        .select()\n        .from(products)\n        .where(\n          and(\n            or(\n              eq(products.category, currentProduct.category),\n              eq(products.game, currentProduct.game)\n            ),\n            eq(products.inStock, true),\n            sql`${products.id} != ${productId}` // Exclude current product\n          )\n        )\n        .orderBy(desc(products.averageRating), desc(products.reviewCount))\n        .limit(limit);\n\n      return recommendations;\n    } else if (userId) {\n      // Get personalized recommendations based on user activity\n      const userPurchases = await db\n        .select({ productId: orders.productId })\n        .from(orders)\n        .where(eq(orders.userId, userId));\n\n      if (userPurchases.length === 0) {\n        return await this.getPopularProducts(limit);\n      }\n\n      const purchasedProductIds = userPurchases.map(p => p.productId);\n\n      // Find products from same categories as purchased products\n      const purchasedProducts = await db\n        .select()\n        .from(products)\n        .where(inArray(products.id, purchasedProductIds));\n\n      const categories = [...new Set(purchasedProducts.map(p => p.category))];\n      const games = [...new Set(purchasedProducts.map(p => p.game))];\n\n      const recommendations = await db\n        .select()\n        .from(products)\n        .where(\n          and(\n            or(\n              inArray(products.category, categories),\n              inArray(products.game, games)\n            ),\n            eq(products.inStock, true),\n            sql`${products.id} NOT IN (${purchasedProductIds.map(() => '?').join(', ')})`\n          )\n        )\n        .orderBy(desc(products.averageRating), desc(products.reviewCount))\n        .limit(limit);\n\n      return recommendations;\n    } else {\n      // General popular products\n      return await this.getPopularProducts(limit);\n    }\n  }\n\n  private async getPopularProducts(limit: number): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(eq(products.inStock, true))\n      .orderBy(desc(products.averageRating), desc(products.reviewCount))\n      .limit(limit);\n  }\n}\n\n// export const storage = new MemStorage();\nexport const storage = new DatabaseStorage(); // Using PostgreSQL database now\n","size_bytes":62546},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { type Server } from \"http\";\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  // Dynamic imports to avoid loading dev dependencies in production\n  const { createServer: createViteServer, createLogger } = await import(\"vite\");\n  const viteConfig = await import(\"../vite.config\");\n  const { nanoid } = await import(\"nanoid\");\n  \n  const viteLogger = createLogger();\n  \n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    host: \"0.0.0.0\",\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig.default,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2402},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, boolean, timestamp, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  category: text(\"category\").notNull(),\n  game: text(\"game\").notNull(),\n  stockQuantity: integer(\"stock_quantity\").notNull().default(0),\n  inStock: boolean(\"in_stock\").notNull().default(true),\n  imageUrl: text(\"image_url\").notNull(),\n  deliveryUrl: text(\"delivery_url\"), // Download link or file path\n  licenseKey: text(\"license_key\"), // For software licenses\n  deliveryType: text(\"delivery_type\").notNull().default(\"download\"), // \"download\", \"key\", \"account\"\n  averageRating: real(\"average_rating\").default(0),\n  reviewCount: integer(\"review_count\").default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  averageRating: true,\n  reviewCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\n// Users table - enhanced with profile fields\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\"),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  avatar: text(\"avatar\"),\n  role: text(\"role\").notNull().default(\"user\"), // \"user\", \"admin\", \"moderator\"\n  isActive: boolean(\"is_active\").notNull().default(true),\n  emailVerified: boolean(\"email_verified\").notNull().default(false),\n  passwordResetToken: text(\"password_reset_token\"),\n  passwordResetExpires: timestamp(\"password_reset_expires\"),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  productName: text(\"product_name\").notNull(),\n  productPrice: decimal(\"product_price\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(),\n  walletAddress: text(\"wallet_address\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"confirmed\", \"completed\", \"cancelled\"\n  licenseKey: text(\"license_key\"),\n  downloadUrl: text(\"download_url\"),\n  downloadCount: integer(\"download_count\").notNull().default(0),\n  transactionId: text(\"transaction_id\"),\n  discountCode: text(\"discount_code\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  downloadCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\n// Product Reviews table\nexport const productReviews = pgTable(\"product_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  title: text(\"title\"),\n  comment: text(\"comment\"),\n  images: text(\"images\"), // JSON array of image URLs/base64 data\n  isVerifiedPurchase: boolean(\"is_verified_purchase\").notNull().default(false),\n  helpfulCount: integer(\"helpful_count\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertProductReviewSchema = createInsertSchema(productReviews).omit({\n  id: true,\n  isVerifiedPurchase: true,\n  helpfulCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertProductReview = z.infer<typeof insertProductReviewSchema>;\nexport type ProductReview = typeof productReviews.$inferSelect;\n\n// Wishlist table\nexport const wishlists = pgTable(\"wishlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertWishlistSchema = createInsertSchema(wishlists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertWishlist = z.infer<typeof insertWishlistSchema>;\nexport type Wishlist = typeof wishlists.$inferSelect;\n\n// Recently Viewed Products table\nexport const recentlyViewed = pgTable(\"recently_viewed\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  viewedAt: timestamp(\"viewed_at\").notNull().default(sql`now()`),\n});\n\nexport const insertRecentlyViewedSchema = createInsertSchema(recentlyViewed).omit({\n  id: true,\n  viewedAt: true,\n});\n\nexport type InsertRecentlyViewed = z.infer<typeof insertRecentlyViewedSchema>;\nexport type RecentlyViewed = typeof recentlyViewed.$inferSelect;\n\n// User Sessions table for security\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  sessionToken: text(\"session_token\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\nexport type UserSession = typeof userSessions.$inferSelect;\n\n// Discount Codes table\nexport const discountCodes = pgTable(\"discount_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  type: text(\"type\").notNull(), // \"percentage\", \"fixed\"\n  value: decimal(\"value\", { precision: 10, scale: 2 }).notNull(),\n  minOrderAmount: decimal(\"min_order_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  maxUses: integer(\"max_uses\"),\n  usedCount: integer(\"used_count\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  validFrom: timestamp(\"valid_from\").notNull(),\n  validTo: timestamp(\"valid_to\").notNull(),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertDiscountCodeSchema = createInsertSchema(discountCodes).omit({\n  id: true,\n  usedCount: true,\n  createdAt: true,\n});\n\nexport type InsertDiscountCode = z.infer<typeof insertDiscountCodeSchema>;\nexport type DiscountCode = typeof discountCodes.$inferSelect;\n\n// Product Bundles table\nexport const productBundles = pgTable(\"product_bundles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }).notNull(),\n  discount: integer(\"discount\").notNull(), // percentage\n  imageUrl: text(\"image_url\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  productIds: text(\"product_ids\").notNull(), // JSON array of product IDs\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertProductBundleSchema = createInsertSchema(productBundles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertProductBundle = z.infer<typeof insertProductBundleSchema>;\nexport type ProductBundle = typeof productBundles.$inferSelect;\n\n// Newsletter Subscriptions table\nexport const newsletterSubscriptions = pgTable(\"newsletter_subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  preferences: text(\"preferences\"), // JSON object for preferences\n  unsubscribeToken: text(\"unsubscribe_token\").notNull().unique(),\n  subscribedAt: timestamp(\"subscribed_at\").notNull().default(sql`now()`),\n  unsubscribedAt: timestamp(\"unsubscribed_at\"),\n});\n\nexport const insertNewsletterSubscriptionSchema = createInsertSchema(newsletterSubscriptions).omit({\n  id: true,\n  unsubscribeToken: true,\n  subscribedAt: true,\n  unsubscribedAt: true,\n});\n\nexport type InsertNewsletterSubscription = z.infer<typeof insertNewsletterSubscriptionSchema>;\nexport type NewsletterSubscription = typeof newsletterSubscriptions.$inferSelect;\n\n// FAQ Items table\nexport const faqItems = pgTable(\"faq_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  category: text(\"category\").notNull(),\n  order: integer(\"order\").notNull().default(0),\n  isPublished: boolean(\"is_published\").notNull().default(true),\n  viewCount: integer(\"view_count\").notNull().default(0),\n  helpfulCount: integer(\"helpful_count\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertFaqItemSchema = createInsertSchema(faqItems).omit({\n  id: true,\n  viewCount: true,\n  helpfulCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertFaqItem = z.infer<typeof insertFaqItemSchema>;\nexport type FaqItem = typeof faqItems.$inferSelect;\n\n// Blog Posts table\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  excerpt: text(\"excerpt\").notNull(),\n  content: text(\"content\").notNull(),\n  author: varchar(\"author\").notNull(),\n  category: text(\"category\").notNull(),\n  tags: text(\"tags\"), // JSON array of tags\n  featuredImage: text(\"featured_image\"),\n  isPublished: boolean(\"is_published\").notNull().default(false),\n  viewCount: integer(\"view_count\").notNull().default(0),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  viewCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\n\n// User Activity Tracking table\nexport const userActivity = pgTable(\"user_activity\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  action: text(\"action\").notNull(), // \"login\", \"logout\", \"view_product\", \"purchase\", \"download\", etc.\n  entityType: text(\"entity_type\"), // \"product\", \"order\", \"page\", etc.\n  entityId: varchar(\"entity_id\"),\n  metadata: text(\"metadata\"), // JSON object for additional data\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertUserActivitySchema = createInsertSchema(userActivity).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUserActivity = z.infer<typeof insertUserActivitySchema>;\nexport type UserActivity = typeof userActivity.$inferSelect;\n\n// Support tickets - enhanced\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  category: text(\"category\").notNull().default(\"general\"), // \"general\", \"technical\", \"billing\", \"refund\"\n  priority: text(\"priority\").notNull().default(\"medium\"), // \"low\", \"medium\", \"high\", \"urgent\"\n  status: text(\"status\").notNull().default(\"open\"), // \"open\", \"in_progress\", \"resolved\", \"closed\"\n  assignedTo: varchar(\"assigned_to\"),\n  attachments: text(\"attachments\"), // JSON array of file URLs\n  internalNotes: text(\"internal_notes\"),\n  responseTime: timestamp(\"response_time\"),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  status: true,\n  assignedTo: true,\n  internalNotes: true,\n  responseTime: true,\n  resolvedAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\n\n// Referral Program table\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  referrerId: varchar(\"referrer_id\").notNull(),\n  refereeId: varchar(\"referee_id\"),\n  referralCode: text(\"referral_code\").notNull().unique(),\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"completed\", \"paid\"\n  commissionRate: decimal(\"commission_rate\", { precision: 5, scale: 2 }).notNull(), // percentage\n  commissionAmount: decimal(\"commission_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  orderId: varchar(\"order_id\"),\n  paidAt: timestamp(\"paid_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertReferralSchema = createInsertSchema(referrals).omit({\n  id: true,\n  status: true,\n  commissionAmount: true,\n  paidAt: true,\n  createdAt: true,\n});\n\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\nexport type Referral = typeof referrals.$inferSelect;\n\n// Product groups for variants (keeping existing interface)\nexport type ProductVariant = {\n  id: string;\n  name: string;\n  price: string;\n  originalPrice?: string | null;\n  stockQuantity: number;\n  inStock: boolean;\n  deliveryUrl?: string | null;\n  licenseKey?: string | null;\n};\n\nexport type ProductGroup = {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  game: string;\n  imageUrl: string;\n  deliveryType: string;\n  variants: ProductVariant[];\n};\n\n// Select User type without password for client-side use\nexport type SelectUser = Omit<User, 'password'>;","size_bytes":15538},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport Home from \"@/pages/home\";\nimport Products from \"@/pages/products\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport Support from \"@/pages/support\";\nimport About from \"@/pages/about\";\nimport Checkout from \"@/pages/checkout\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport Admin from \"@/pages/admin\";\nimport AuthPage from \"@/pages/auth-page\";\nimport CustomerDashboard from \"@/pages/customer-dashboard\";\nimport UserProfile from \"@/pages/user-profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/product/:id\" component={ProductDetail} />\n      <Route path=\"/support\" component={Support} />\n      <Route path=\"/about\" component={About} />\n      <ProtectedRoute path=\"/checkout/:productData\" component={Checkout} />\n      <Route path=\"/admin-login\" component={AdminLogin} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute path=\"/dashboard\" component={CustomerDashboard} />\n      <ProtectedRoute path=\"/profile\" component={UserProfile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1881},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 4%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(0, 0%, 8%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(0, 0%, 8%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(248, 100%, 34%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(248, 100%, 20%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(0, 0%, 15%);\n  --muted-foreground: hsl(0, 0%, 65%);\n  --accent: hsl(248, 100%, 34%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(248, 100%, 40%);\n  --destructive-foreground: hsl(0, 0%, 95%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 20%);\n  --ring: hsl(248, 100%, 34%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 8%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(248, 100%, 34%);\n  --sidebar-primary-foreground: hsl(0, 0%, 0%);\n  --sidebar-accent: hsl(248, 100%, 34%);\n  --sidebar-accent-foreground: hsl(0, 0%, 95%);\n  --sidebar-border: hsl(0, 0%, 20%);\n  --sidebar-ring: hsl(248, 100%, 34%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 1px 2px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 1px 2px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow-md: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 2px 4px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow-lg: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 4px 6px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow-xl: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 8px 10px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow-2xl: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 4%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(0, 0%, 8%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(0, 0%, 8%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(248, 100%, 34%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(248, 100%, 20%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(0, 0%, 15%);\n  --muted-foreground: hsl(0, 0%, 65%);\n  --accent: hsl(248, 100%, 34%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(248, 100%, 40%);\n  --destructive-foreground: hsl(0, 0%, 95%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 20%);\n  --ring: hsl(248, 100%, 34%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 8%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(248, 100%, 34%);\n  --sidebar-primary-foreground: hsl(0, 0%, 0%);\n  --sidebar-accent: hsl(248, 100%, 34%);\n  --sidebar-accent-foreground: hsl(0, 0%, 95%);\n  --sidebar-border: hsl(0, 0%, 20%);\n  --sidebar-ring: hsl(248, 100%, 34%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 1px 2px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 1px 2px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow-md: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 2px 4px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow-lg: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 4px 6px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow-xl: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05), 0px 8px 10px -1px hsl(248, 100%, 34%, 0.05);\n  --shadow-2xl: 0px 2px 0px 0px hsl(248, 100%, 34%, 0.05);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.glow-text {\n  text-shadow: 0 0 10px currentColor;\n}\n\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 20px 40px rgba(24, 0, 173, 0.1), 0 0 20px rgba(24, 0, 173, 0.1);\n}\n\n.neon-border {\n  border: 1px solid transparent;\n  background: linear-gradient(hsl(0, 0%, 8%), hsl(0, 0%, 8%)) padding-box,\n              linear-gradient(45deg, hsl(248, 100%, 34%), hsl(248, 100%, 20%)) border-box;\n}\n\n.search-glow:focus {\n  box-shadow: 0 0 20px rgba(24, 0, 173, 0.3);\n}\n\n.product-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n@media (max-width: 768px) {\n  .product-grid {\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 1rem;\n  }\n}\n\n/* Falling Red Dots Animation */\n.falling-dots {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n  overflow: hidden;\n}\n\n.falling-dots::before {\n  content: '';\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: \n    radial-gradient(2px 2px at 20px 30px, hsl(248, 100%, 34%), transparent),\n    radial-gradient(2px 2px at 40px 70px, hsl(248, 100%, 34%), transparent),\n    radial-gradient(1px 1px at 90px 40px, hsl(248, 100%, 34%), transparent),\n    radial-gradient(1px 1px at 130px 80px, hsl(248, 100%, 34%), transparent),\n    radial-gradient(2px 2px at 160px 30px, hsl(248, 100%, 34%), transparent);\n  background-repeat: repeat;\n  background-size: 200px 100px;\n  animation: falling-dots-animation 15s linear infinite;\n}\n\n.falling-dots::after {\n  content: '';\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: \n    radial-gradient(1px 1px at 60px 10px, hsl(248, 100%, 20%), transparent),\n    radial-gradient(2px 2px at 100px 50px, hsl(248, 100%, 20%), transparent),\n    radial-gradient(1px 1px at 140px 20px, hsl(248, 100%, 20%), transparent),\n    radial-gradient(1px 1px at 180px 60px, hsl(248, 100%, 20%), transparent);\n  background-repeat: repeat;\n  background-size: 250px 120px;\n  animation: falling-dots-animation 20s linear infinite;\n  animation-delay: -10s;\n}\n\n@keyframes falling-dots-animation {\n  0% {\n    transform: translateY(-100vh) rotateZ(0deg);\n    opacity: 0;\n  }\n  10% {\n    opacity: 0.6;\n  }\n  90% {\n    opacity: 0.6;\n  }\n  100% {\n    transform: translateY(100vh) rotateZ(360deg);\n    opacity: 0;\n  }\n}\n","size_bytes":6834},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Menu, User, LogOut } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useAuth } from \"@/hooks/use-auth\";\nconst logoImage = \"https://i.postimg.cc/0j1BFrgF/Untitled-3.png\";\n\ninterface HeaderProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n}\n\nexport default function Header({ searchQuery, onSearchChange }: HeaderProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-card border-b border-border backdrop-blur-sm\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo and Branding */}\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-2xl font-bold text-primary flex items-center\" data-testid=\"brand-logo\">\n              <img src={logoImage} alt=\"PlayDirty\" className=\"w-8 h-8 mr-2\" />\n              PlayDirty\n            </div>\n          </div>\n\n          {/* Search Bar - Desktop */}\n          <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n            <div className=\"relative w-full\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search products...\"\n                value={searchQuery}\n                onChange={(e) => onSearchChange(e.target.value)}\n                className=\"w-full bg-input text-foreground px-4 py-2 pl-10 rounded-lg border border-border focus:border-primary focus:outline-none search-glow transition-all duration-300\"\n                data-testid=\"input-search-desktop\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            </div>\n          </div>\n\n          {/* Navigation Links - Desktop */}\n          <nav className=\"hidden lg:flex items-center space-x-6\">\n            <a href=\"/\" className=\"text-foreground hover:text-primary transition-colors\" data-testid=\"link-home\">\n              Home\n            </a>\n            <a href=\"/products\" className=\"text-foreground hover:text-primary transition-colors\" data-testid=\"link-products\">\n              Products\n            </a>\n            <a href=\"/support\" className=\"text-foreground hover:text-primary transition-colors\" data-testid=\"link-support\">\n              Support\n            </a>\n            <a href=\"/about\" className=\"text-foreground hover:text-primary transition-colors\" data-testid=\"link-about\">\n              About\n            </a>\n            \n            {/* Authentication Links */}\n            {user ? (\n              <div className=\"flex items-center space-x-4\">\n                <a href=\"/dashboard\" className=\"text-foreground hover:text-primary transition-colors border border-primary/20 px-3 py-1 rounded flex items-center\" data-testid=\"link-dashboard\">\n                  <User className=\"w-4 h-4 mr-1\" />\n                  {user.username}\n                </a>\n                <a href=\"/profile\" className=\"text-foreground hover:text-primary transition-colors px-3 py-1 rounded flex items-center\" data-testid=\"link-profile\">\n                  Profile\n                </a>\n                <Button\n                  onClick={handleLogout}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-foreground hover:text-primary\"\n                  disabled={logoutMutation.isPending}\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ) : (\n              <a href=\"/auth\" className=\"text-foreground hover:text-primary transition-colors border border-primary/20 px-3 py-1 rounded\" data-testid=\"link-auth\">\n                Sign In\n              </a>\n            )}\n          </nav>\n\n          {/* Mobile Menu Button */}\n          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n                <Menu className=\"h-6 w-6\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-64\">\n              <nav className=\"flex flex-col space-y-4 mt-8\">\n                <a href=\"/\" className=\"text-foreground hover:text-primary transition-colors\" data-testid=\"link-mobile-home\" onClick={() => setIsMobileMenuOpen(false)}>\n                  Home\n                </a>\n                <a href=\"/products\" className=\"text-foreground hover:text-primary transition-colors\" data-testid=\"link-mobile-products\" onClick={() => setIsMobileMenuOpen(false)}>\n                  Products\n                </a>\n                <a href=\"/support\" className=\"text-foreground hover:text-primary transition-colors\" data-testid=\"link-mobile-support\" onClick={() => setIsMobileMenuOpen(false)}>\n                  Support\n                </a>\n                <a href=\"/about\" className=\"text-foreground hover:text-primary transition-colors\" data-testid=\"link-mobile-about\" onClick={() => setIsMobileMenuOpen(false)}>\n                  About\n                </a>\n                \n                {/* Mobile Authentication Links */}\n                {user ? (\n                  <>\n                    <a href=\"/dashboard\" className=\"text-foreground hover:text-primary transition-colors border border-primary/20 px-3 py-1 rounded flex items-center\" data-testid=\"link-mobile-dashboard\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <User className=\"w-4 h-4 mr-2\" />\n                      {user.username}\n                    </a>\n                    <a href=\"/profile\" className=\"text-foreground hover:text-primary transition-colors px-3 py-1 rounded flex items-center\" data-testid=\"link-mobile-profile\" onClick={() => setIsMobileMenuOpen(false)}>\n                      Profile\n                    </a>\n                    <Button\n                      onClick={handleLogout}\n                      variant=\"ghost\"\n                      className=\"text-foreground hover:text-primary justify-start px-0\"\n                      disabled={logoutMutation.isPending}\n                      data-testid=\"button-mobile-logout\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n                    </Button>\n                  </>\n                ) : (\n                  <a href=\"/auth\" className=\"text-foreground hover:text-primary transition-colors border border-primary/20 px-3 py-1 rounded\" data-testid=\"link-mobile-auth\" onClick={() => setIsMobileMenuOpen(false)}>\n                    Sign In\n                  </a>\n                )}\n              </nav>\n            </SheetContent>\n          </Sheet>\n        </div>\n\n        {/* Mobile Search */}\n        <div className=\"md:hidden mt-4\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search products...\"\n              value={searchQuery}\n              onChange={(e) => onSearchChange(e.target.value)}\n              className=\"w-full bg-input text-foreground px-4 py-2 pl-10 rounded-lg border border-border focus:border-primary focus:outline-none\"\n              data-testid=\"input-search-mobile\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":7840},"client/src/components/product-card.tsx":{"content":"import { Product } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, X, Package, Eye, Star, ShoppingCart } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface ProductCardProps {\n  product: Product;\n  className?: string;\n  compact?: boolean;\n}\n\nexport default function ProductCard({ product, className = \"\", compact = false }: ProductCardProps) {\n  const [, setLocation] = useLocation();\n  const isInStock = product.inStock && product.stockQuantity > 0;\n  const hasDiscount = product.originalPrice && parseFloat(product.originalPrice) > parseFloat(product.price);\n\n  const handleCheckoutClick = () => {\n    const productData = encodeURIComponent(JSON.stringify(product));\n    setLocation(`/checkout/${productData}`);\n  };\n\n  const { user } = useAuth();\n\n  const handleViewDetails = async () => {\n    // Track product view for authenticated users\n    if (user) {\n      try {\n        await fetch(`/api/recently-viewed/${product.id}`, {\n          method: 'POST',\n          credentials: 'include'\n        });\n      } catch (error) {\n        // Silently ignore tracking errors to not disrupt user experience\n        console.debug('Failed to track product view:', error);\n      }\n    }\n    \n    setLocation(`/product/${product.id}`);\n  };\n\n  return (\n    <div className={`bg-card rounded-lg border border-border overflow-hidden card-hover neon-border ${!isInStock ? 'opacity-75' : ''} ${className}`} data-testid={`card-product-${product.id}`}>\n      <div className={`relative bg-muted/20 ${compact ? 'p-3' : 'p-6'} border-b border-border`}>\n        {!compact && (\n          <div className=\"flex justify-between items-start mb-4\">\n            <span className=\"px-2 py-1 bg-primary text-primary-foreground text-xs font-medium rounded-md\">\n              {product.category}\n            </span>\n            {hasDiscount && (\n              <span className=\"px-2 py-1 bg-purple-600 text-white text-xs font-medium rounded-md\">\n                SALE\n              </span>\n            )}\n          </div>\n        )}\n        <div className=\"text-center cursor-pointer\" onClick={handleViewDetails}>\n          {product.imageUrl ? (\n            <img \n              src={product.imageUrl} \n              alt={product.name}\n              className={`${compact ? 'w-full h-24' : 'w-[360px] h-auto'} mx-auto mb-2 rounded-md object-cover hover:opacity-90 transition-opacity`}\n            />\n          ) : (\n            <Package className={`${compact ? 'w-6 h-6' : 'w-12 h-12'} text-muted-foreground mx-auto mb-2`} />\n          )}\n          <h3 className={`${compact ? 'text-sm' : 'text-lg'} font-semibold hover:text-primary transition-colors ${compact ? 'truncate' : ''}`} data-testid={`text-product-name-${product.id}`}>\n            {product.name}\n          </h3>\n        </div>\n      </div>\n      \n      <div className={`${compact ? 'p-3' : 'p-6'}`}>\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <Package className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-sm text-muted-foreground\">\n              {product.game}\n            </span>\n          </div>\n          <span \n            className={`text-xs px-2 py-1 rounded-full flex items-center space-x-1 ${\n              isInStock \n                ? 'bg-green-600 text-white' \n                : 'bg-purple-600 text-white'\n            }`}\n            data-testid={`status-stock-${product.id}`}\n          >\n            {isInStock ? (\n              <>\n                <Check className=\"w-3 h-3\" />\n                <span>\n                  {product.stockQuantity > 1 ? `${product.stockQuantity} In Stock` : 'In Stock'}\n                </span>\n              </>\n            ) : (\n              <>\n                <X className=\"w-3 h-3\" />\n                <span>Out of Stock</span>\n              </>\n            )}\n          </span>\n        </div>\n        \n        <p className=\"text-muted-foreground text-sm mb-3\" data-testid={`text-product-description-${product.id}`}>\n          {product.description}\n        </p>\n        \n        {/* Rating Display */}\n        {((product.averageRating ?? 0) > 0 && (product.reviewCount ?? 0) > 0) && (\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <div className=\"flex items-center\">\n              {[1, 2, 3, 4, 5].map((star) => (\n                <Star\n                  key={star}\n                  className={`w-4 h-4 ${\n                    star <= (product.averageRating || 0)\n                      ? 'fill-yellow-400 text-yellow-400'\n                      : 'text-gray-300'\n                  }`}\n                />\n              ))}\n            </div>\n            <span className=\"text-sm font-medium\">{product.averageRating?.toFixed(1)}</span>\n            <span className=\"text-sm text-muted-foreground\">({product.reviewCount} reviews)</span>\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xl font-bold text-primary\" data-testid={`text-price-${product.id}`}>\n              ${product.price}\n            </span>\n            {hasDiscount && (\n              <span className=\"text-sm text-muted-foreground line-through\" data-testid={`text-original-price-${product.id}`}>\n                ${product.originalPrice}\n              </span>\n            )}\n          </div>\n        </div>\n        \n        {/* Action Buttons */}\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleViewDetails}\n            className=\"flex-1\"\n          >\n            <Eye className=\"w-4 h-4 mr-1\" />\n            Details\n          </Button>\n          <Button\n            size=\"sm\"\n            className={`flex-1 ${\n              isInStock\n                ? 'bg-primary text-primary-foreground hover:bg-primary/90'\n                : 'bg-muted text-muted-foreground cursor-not-allowed'\n            }`}\n            disabled={!isInStock}\n            onClick={handleCheckoutClick}\n            data-testid={`button-checkout-${product.id}`}\n          >\n            <ShoppingCart className=\"w-4 h-4 mr-1\" />\n            {isInStock ? 'Buy Now' : 'Out of Stock'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6413},"client/src/components/product-group-card.tsx":{"content":"import { useState } from \"react\";\nimport { ProductGroup, Product } from \"@shared/schema\";\nimport { ShoppingCart, Package } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useLocation } from \"wouter\";\n\ninterface ProductGroupCardProps {\n  group: ProductGroup;\n}\n\nexport default function ProductGroupCard({ group }: ProductGroupCardProps) {\n  const [selectedVariant, setSelectedVariant] = useState(group.variants[0]);\n  const [, setLocation] = useLocation();\n\n  const isInStock = selectedVariant.inStock && selectedVariant.stockQuantity > 0;\n  const hasDiscount = selectedVariant.originalPrice && parseFloat(selectedVariant.originalPrice) > parseFloat(selectedVariant.price);\n\n  // Create a virtual Product object for the checkout page\n  const createProductFromVariant = (): Product => ({\n    id: selectedVariant.id,\n    name: `${group.name} - ${selectedVariant.name}`,\n    description: group.description,\n    price: selectedVariant.price,\n    originalPrice: selectedVariant.originalPrice || null,\n    category: group.category,\n    game: group.game || \"\",\n    stockQuantity: selectedVariant.stockQuantity,\n    inStock: selectedVariant.inStock,\n    imageUrl: group.imageUrl || null,\n    deliveryUrl: selectedVariant.deliveryUrl || null,\n    licenseKey: selectedVariant.licenseKey || null,\n    deliveryType: group.deliveryType,\n  });\n\n  const handleCheckoutClick = () => {\n    const productData = encodeURIComponent(JSON.stringify(createProductFromVariant()));\n    setLocation(`/checkout/${productData}`);\n  };\n\n  return (\n    <div className={`bg-card rounded-lg border border-border overflow-hidden card-hover neon-border ${!isInStock ? 'opacity-75' : ''}`} data-testid={`card-group-${group.id}`}>\n      <div className=\"relative bg-muted/20 p-6 border-b border-border\">\n        <div className=\"flex justify-between items-start\">\n          <span className=\"px-2 py-1 bg-primary text-primary-foreground text-xs font-medium rounded-md\">\n            {group.category}\n          </span>\n          {hasDiscount && (\n            <span className=\"px-2 py-1 bg-purple-600 text-white text-xs font-medium rounded-md\">\n              SALE\n            </span>\n          )}\n        </div>\n        <div className=\"mt-4 text-center\">\n          {group.imageUrl ? (\n            <img \n              src={group.imageUrl} \n              alt={group.name}\n              className=\"w-[360px] h-[360px] object-cover mx-auto mb-2 rounded-lg\"\n            />\n          ) : (\n            <Package className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n          )}\n          <h3 className=\"text-lg font-semibold\" data-testid={`text-name-${group.id}`}>\n            {group.name === \"DMA Bundle Firmware Included\" && selectedVariant.id === \"dma-bundle-no-firmware\" \n              ? \"DMA Bundle\" \n              : group.name}\n          </h3>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <Package className=\"w-4 h-4 text-muted-foreground\" />\n          <span className=\"text-sm text-muted-foreground\" data-testid={`text-game-${group.id}`}>\n            {group.game}\n          </span>\n        </div>\n\n\n        <p className=\"text-muted-foreground text-sm mb-4 line-clamp-2\" data-testid={`text-description-${group.id}`}>\n          {group.description}\n        </p>\n\n        {/* Variant Selector */}\n        <div className=\"mb-4\">\n          <label className=\"text-sm font-medium mb-2 block\">Duration:</label>\n          <Select \n            value={selectedVariant.id} \n            onValueChange={(value) => setSelectedVariant(group.variants.find(v => v.id === value) || group.variants[0])}\n            data-testid={`select-variant-${group.id}`}\n          >\n            <SelectTrigger className=\"w-full\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {group.variants.map((variant) => (\n                <SelectItem key={variant.id} value={variant.id}>\n                  {variant.name} - ${variant.price}\n                  {variant.originalPrice && (\n                    <span className=\"ml-2 text-muted-foreground line-through text-xs\">\n                      ${variant.originalPrice}\n                    </span>\n                  )}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-2xl font-bold text-primary\" data-testid={`text-price-${group.id}`}>\n              ${selectedVariant.price}\n            </span>\n            {hasDiscount && (\n              <span className=\"text-lg text-muted-foreground line-through\" data-testid={`text-original-price-${group.id}`}>\n                ${selectedVariant.originalPrice}\n              </span>\n            )}\n          </div>\n          \n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Stock</div>\n            <div className={`text-sm font-medium ${isInStock ? 'text-green-500' : 'text-purple-600'}`} data-testid={`text-stock-${group.id}`}>\n              {isInStock ? `${selectedVariant.stockQuantity} available` : 'Out of stock'}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={() => setLocation(`/product/${selectedVariant.id}`)}\n            data-testid={`button-details-${group.id}`}\n          >\n            <Package className=\"w-4 h-4 mr-2\" />\n            View Details\n          </Button>\n          \n          <Button\n            className={`w-full px-4 py-2 rounded-lg font-medium transition-colors ${\n              isInStock\n                ? 'bg-primary text-primary-foreground hover:bg-primary/90'\n                : 'bg-muted text-muted-foreground cursor-not-allowed'\n            }`}\n            disabled={!isInStock}\n            onClick={handleCheckoutClick}\n            data-testid={`button-checkout-${group.id}`}\n          >\n            <ShoppingCart className=\"w-4 h-4 mr-2\" />\n            {isInStock ? 'Checkout' : 'Out of Stock'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6374},"client/src/components/sidebar-filters.tsx":{"content":"import { Filter, ChevronDown } from \"lucide-react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport interface FilterState {\n  categories: string[];\n  games: string[];\n  priceRange: string;\n  showInStock: boolean;\n  showOutOfStock: boolean;\n}\n\ninterface DropdownFiltersProps {\n  filters: FilterState;\n  onFiltersChange: (filters: FilterState) => void;\n}\n\nexport default function DropdownFilters({ filters, onFiltersChange }: DropdownFiltersProps) {\n  const handleCategoryChange = (category: string, checked: boolean) => {\n    const newCategories = checked\n      ? [...filters.categories, category]\n      : filters.categories.filter(c => c !== category);\n    \n    onFiltersChange({\n      ...filters,\n      categories: newCategories\n    });\n  };\n\n  const handleGameChange = (game: string, checked: boolean) => {\n    const newGames = checked\n      ? [...filters.games, game]\n      : filters.games.filter(g => g !== game);\n    \n    onFiltersChange({\n      ...filters,\n      games: newGames\n    });\n  };\n\n  const handlePriceRangeChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      priceRange: value\n    });\n  };\n\n  const handleStockChange = (type: 'inStock' | 'outOfStock', checked: boolean) => {\n    onFiltersChange({\n      ...filters,\n      [type === 'inStock' ? 'showInStock' : 'showOutOfStock']: checked\n    });\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button \n          variant=\"outline\" \n          className=\"min-w-32 justify-between neon-border\"\n          data-testid=\"button-filters\"\n        >\n          <Filter className=\"w-4 h-4 mr-2 text-primary\" />\n          Filters\n          <ChevronDown className=\"w-4 h-4 ml-2\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-6 bg-card border-border neon-border\" align=\"start\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\" data-testid=\"text-filters-title\">\n          <Filter className=\"inline mr-2 text-primary w-5 h-5\" />\n          Filters\n        </h3>\n        \n        {/* Categories */}\n        <div className=\"mb-6\">\n          <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Categories</h4>\n          <div className=\"space-y-2\">\n            {[\"Game Cheats\", \"Spoofers\", \"Game Accounts\", \"Unlock Tools\"].map((category) => (\n              <div key={category} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`category-${category}`}\n                  checked={filters.categories.includes(category)}\n                  onCheckedChange={(checked) => handleCategoryChange(category, checked as boolean)}\n                  data-testid={`checkbox-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                />\n                <Label htmlFor={`category-${category}`} className=\"text-sm\">\n                  {category}\n                </Label>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Separator className=\"my-4\" />\n\n        {/* Games */}\n        <div className=\"mb-6\">\n          <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Games</h4>\n          <div className=\"space-y-2\">\n            {[\"Fortnite\", \"CS2\", \"Valorant\", \"Rust\", \"R6 Siege\", \"Call of Duty\", \"Multi-Game\"].map((game) => (\n              <div key={game} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`game-${game}`}\n                  checked={filters.games.includes(game)}\n                  onCheckedChange={(checked) => handleGameChange(game, checked as boolean)}\n                  data-testid={`checkbox-game-${game.toLowerCase().replace(/\\s+/g, '-')}`}\n                />\n                <Label htmlFor={`game-${game}`} className=\"text-sm\">\n                  {game}\n                </Label>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Separator className=\"my-4\" />\n\n        {/* Price Range */}\n        <div className=\"mb-6\">\n          <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Price Range</h4>\n          <RadioGroup value={filters.priceRange} onValueChange={handlePriceRangeChange}>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"all\" id=\"price-all\" data-testid=\"radio-price-all\" />\n              <Label htmlFor=\"price-all\" className=\"text-sm\">All Prices</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"under-10\" id=\"price-under-10\" data-testid=\"radio-price-under-10\" />\n              <Label htmlFor=\"price-under-10\" className=\"text-sm\">Under $10</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"10-50\" id=\"price-10-50\" data-testid=\"radio-price-10-50\" />\n              <Label htmlFor=\"price-10-50\" className=\"text-sm\">$10 - $50</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"50-plus\" id=\"price-50-plus\" data-testid=\"radio-price-50-plus\" />\n              <Label htmlFor=\"price-50-plus\" className=\"text-sm\">$50+</Label>\n            </div>\n          </RadioGroup>\n        </div>\n\n        <Separator className=\"my-4\" />\n\n        {/* Stock Status */}\n        <div>\n          <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Availability</h4>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"stock-in\"\n                checked={filters.showInStock}\n                onCheckedChange={(checked) => handleStockChange('inStock', checked as boolean)}\n                data-testid=\"checkbox-stock-in\"\n              />\n              <Label htmlFor=\"stock-in\" className=\"text-sm\">In Stock</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"stock-out\"\n                checked={filters.showOutOfStock}\n                onCheckedChange={(checked) => handleStockChange('outOfStock', checked as boolean)}\n                data-testid=\"checkbox-stock-out\"\n              />\n              <Label htmlFor=\"stock-out\" className=\"text-sm\">Out of Stock</Label>\n            </div>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","size_bytes":6636},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import React, { useState } from \"react\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, Clock, Users, Zap, Heart, Target, Award } from \"lucide-react\";\n\nexport default function About() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"falling-dots\"></div>\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      \n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl md:text-7xl font-bold text-foreground mb-6\" data-testid=\"text-page-title\">\n            About <span className=\"text-primary\">Us</span>\n          </h1>\n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 leading-relaxed\">\n            PlayDirty is your premier destination for cutting-edge gaming enhancement tools and solutions. \n            We're passionate about providing gamers with the competitive edge they need to dominate their favorite games.\n          </p>\n        </div>\n      </div>\n\n      {/* Our Story Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-8 text-center\">\n            Our Story\n          </h2>\n          <div className=\"grid md:grid-cols-2 gap-8 mb-12\">\n            <Card className=\"border border-border bg-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-6 h-6 text-primary\" />\n                  Our Mission\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  To provide gamers worldwide with premium, reliable, and secure gaming enhancement tools \n                  that elevate their gaming experience while maintaining the highest standards of quality and safety.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border bg-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"w-6 h-6 text-primary\" />\n                  Our Values\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  We believe in transparency, quality, and putting our customers first. Every product we offer \n                  is thoroughly tested and backed by our commitment to excellence and customer satisfaction.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"text-center mb-12\">\n            <p className=\"text-lg text-muted-foreground leading-relaxed\">\n              Founded by gaming enthusiasts, PlayDirty emerged from a simple idea: to create a trusted platform \n              where gamers could access premium enhancement tools without compromising on security or quality. \n              What started as a small community project has grown into a leading provider of gaming solutions, \n              serving thousands of satisfied customers worldwide.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* What Sets Us Apart */}\n      <div className=\"container mx-auto px-4 py-16 bg-muted/30\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-12 text-center\">\n            What Sets <span className=\"text-primary\">Us</span> Apart\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"border border-border bg-card text-center\">\n              <CardHeader>\n                <Shield className=\"w-12 h-12 text-green-500 mx-auto mb-4\" />\n                <CardTitle>Security First</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  All our products undergo rigorous security testing. We prioritize your safety and privacy \n                  with industry-leading encryption and secure delivery methods.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border bg-card text-center\">\n              <CardHeader>\n                <Clock className=\"w-12 h-12 text-blue-500 mx-auto mb-4\" />\n                <CardTitle>24/7 Support</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Our dedicated support team is always ready to help. Whether you need installation assistance \n                  or have questions about our products, we're here for you.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border bg-card text-center\">\n              <CardHeader>\n                <Award className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n                <CardTitle>Premium Quality</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  We work with the best developers in the industry to ensure our products are reliable, \n                  feature-rich, and regularly updated to maintain compatibility.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Trust Indicators */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-8\">\n            Trusted by Gamers Worldwide\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <Users className=\"w-12 h-12 text-purple-500 mx-auto mb-4\" />\n              <div className=\"text-3xl font-bold text-foreground\">100+</div>\n              <div className=\"text-muted-foreground\">Happy Customers</div>\n            </div>\n            <div className=\"text-center\">\n              <Zap className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n              <div className=\"text-3xl font-bold text-foreground\">99.9%</div>\n              <div className=\"text-muted-foreground\">Uptime</div>\n            </div>\n            <div className=\"text-center\">\n              <Shield className=\"w-12 h-12 text-green-500 mx-auto mb-4\" />\n              <div className=\"text-3xl font-bold text-foreground\">100%</div>\n              <div className=\"text-muted-foreground\">Secure</div>\n            </div>\n            <div className=\"text-center\">\n              <Clock className=\"w-12 h-12 text-blue-500 mx-auto mb-4\" />\n              <div className=\"text-3xl font-bold text-foreground\">&lt;2hrs</div>\n              <div className=\"text-muted-foreground\">Support Response</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-muted/30 py-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n              <span className=\"text-muted-foreground text-sm\">Powered by SellAuth</span>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-green-500\">🛡️</span>\n                <span className=\"text-sm text-muted-foreground\">Secure Payments</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":7895},"client/src/pages/home.tsx":{"content":"import React, { useState } from \"react\";\nimport Header from \"@/components/header\";\nimport ProductRecommendations, { RecentlyViewed } from \"@/components/product-recommendations\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Clock, Users, Zap, CheckCircle, Star } from \"lucide-react\";\nconst logoImage = \"https://i.postimg.cc/0j1BFrgF/Untitled-3.png\";\n\nexport default function Home() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"falling-dots\"></div>\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      \n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl md:text-7xl font-bold text-foreground mb-6\" data-testid=\"text-page-title\">\n            Welcome to <span className=\"text-primary\">PlayDirty</span>\n          </h1>\n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 leading-relaxed\">\n            Your most trusted source for premium gaming enhancement tools and solutions. \n            Experience the difference with our industry-leading cheats, spoofers, and gaming accounts.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\">\n            <Button size=\"lg\" className=\"text-lg px-8 py-3\" onClick={() => window.location.href = '/products'}>\n              Browse Products\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-3\" onClick={() => window.location.href = 'https://discord.com/invite/playdirty'}>\n              Contact Support\n            </Button>\n          </div>\n          \n          {/* Trust Indicators */}\n          <div className=\"flex flex-wrap justify-center gap-6 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-green-500\" />\n              <span>Secure & Safe</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"w-5 h-5 text-blue-500\" />\n              <span>24/7 Support</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5 text-purple-500\" />\n              <span>100+ Satisfied Customers</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Zap className=\"w-5 h-5 text-yellow-500\" />\n              <span>Instant Delivery</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Recently Viewed Products */}\n      <RecentlyViewed className=\"container mx-auto px-4\" limit={6} />\n\n      {/* Popular Products */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <ProductRecommendations \n          variant=\"trending\" \n          limit={8} \n          title=\"Trending Products\"\n          className=\"mb-8\"\n        />\n      </div>\n\n      {/* Why Choose PlayDirty */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n            Why Choose PlayDirty?\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            We've been setting the standard in the gaming enhancement industry for years. \n            Here's what makes us the best choice for serious gamers.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Shield className=\"w-8 h-8 text-green-500\" />\n                <CardTitle className=\"text-xl\">Premium Quality</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Our cheats and tools are developed by industry experts using the latest techniques. \n                Each product undergoes rigorous testing to ensure reliability and performance.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Clock className=\"w-8 h-8 text-blue-500\" />\n                <CardTitle className=\"text-xl\">24/7 Expert Support</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Our dedicated support team is available around the clock to help you with any questions, \n                installation issues, or technical problems. Real humans, real solutions.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Zap className=\"w-8 h-8 text-yellow-500\" />\n                <CardTitle className=\"text-xl\">Instant Delivery</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Get immediate access to your purchased products through our automated delivery system. \n                No waiting, no delays - start enhancing your gameplay right away.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Users className=\"w-8 h-8 text-purple-500\" />\n                <CardTitle className=\"text-xl\">Trusted Community</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Join hundreds of satisfied customers who trust PlayDirty for their gaming needs. \n                Our reputation speaks for itself in the gaming community.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <CheckCircle className=\"w-8 h-8 text-green-500\" />\n                <CardTitle className=\"text-xl\">Regular Updates</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Stay ahead of the game with frequent updates and patches. Our team continuously \n                monitors game changes to keep our products working flawlessly.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Star className=\"w-8 h-8 text-yellow-500\" />\n                <CardTitle className=\"text-xl\">Competitive Pricing</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Get the best value for your money with our competitive pricing and flexible duration options. \n                Premium quality doesn't have to break the bank.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Product Categories */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n            Our Product Range\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            From advanced game cheats to hardware spoofers and premium accounts, \n            we have everything you need to dominate your favorite games.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <div className=\"bg-card border border-border rounded-lg p-6 text-center hover:border-primary transition-colors\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Zap className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">Game Cheats</h3>\n            <p className=\"text-muted-foreground\">\n              Premium enhancement tools for popular games like Rust, Apex Legends, and more.\n            </p>\n          </div>\n\n          <div className=\"bg-card border border-border rounded-lg p-6 text-center hover:border-primary transition-colors\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Shield className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">Spoofers</h3>\n            <p className=\"text-muted-foreground\">\n              Advanced hardware ID spoofers for both temporary and permanent protection.\n            </p>\n          </div>\n\n          <div className=\"bg-card border border-border rounded-lg p-6 text-center hover:border-primary transition-colors\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Users className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">Game Accounts</h3>\n            <p className=\"text-muted-foreground\">\n              High-quality gaming accounts with various playtime and feature options.\n            </p>\n          </div>\n\n          <div className=\"bg-card border border-border rounded-lg p-6 text-center hover:border-primary transition-colors\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">DMA Hardware</h3>\n            <p className=\"text-muted-foreground\">\n              Professional DMA firmware and bundles for advanced users and developers.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Support CTA */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"bg-card border border-border rounded-lg p-8 md:p-12 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Need Help? We're Here 24/7\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8\">\n              Our experienced support team is always ready to assist you with product selection, \n              installation guidance, troubleshooting, or any other questions you might have. \n              No matter what time zone you're in, we've got you covered.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\" onClick={() => window.location.href = 'https://discord.com/invite/playdirty'}>\n                Contact Support Now\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-3\">\n                View FAQ\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap justify-center gap-6 mt-8 text-sm text-muted-foreground\">\n              <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                <Clock className=\"w-4 h-4 mr-1\" />\n                Average Response: 30 minutes\n              </Badge>\n              <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                <Users className=\"w-4 h-4 mr-1\" />\n                Expert Support Staff\n              </Badge>\n              <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                Multiple Support Channels\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border mt-16\">\n        <div className=\"container mx-auto px-4 py-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"col-span-1 md:col-span-2\">\n              <div className=\"text-2xl font-bold text-primary flex items-center mb-4\">\n                <img src={logoImage} alt=\"PlayDirty\" className=\"w-8 h-8 mr-2\" />\n                PlayDirty\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                Your trusted source for gaming enhancement tools and solutions. \n                Premium quality, secure delivery, and 24/7 support.\n              </p>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-discord\">\n                  Discord\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-telegram\">\n                  Telegram\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-twitter\">\n                  Twitter\n                </a>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">Support</h4>\n              <div className=\"space-y-2\">\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-help\">Help Center</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-contact\">Contact Us</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-guide\">Installation Guide</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-faq\">FAQ</a>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">Legal</h4>\n              <div className=\"space-y-2\">\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-terms\">Terms of Service</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-privacy\">Privacy Policy</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-refund\">Refund Policy</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-dmca\">DMCA</a>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-border pt-8 mt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <p className=\"text-muted-foreground text-sm\">\n                © 2024 PlayDirty. All rights reserved.\n              </p>\n              <div className=\"flex items-center space-x-4 mt-4 md:mt-0\">\n                <span className=\"text-muted-foreground text-sm\">Powered by SellAuth</span>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-green-500\">🛡️</span>\n                  <span className=\"text-sm text-muted-foreground\">Secure Payments</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":16125},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-purple-600\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":714},"client/src/pages/products.tsx":{"content":"import React, { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Product, ProductGroup } from \"@shared/schema\";\nimport Header from \"@/components/header\";\nimport DropdownFilters, { FilterState } from \"@/components/sidebar-filters\";\nimport ProductCard from \"@/components/product-card\";\nimport ProductGroupCard from \"@/components/product-group-card\";\nimport AdvancedSearch from \"@/components/advanced-search\";\nimport ProductRecommendations, { RecentlyViewed } from \"@/components/product-recommendations\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Grid, List, Sparkles } from \"lucide-react\";\n\nexport default function Products() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [viewMode, setViewMode] = useState<\"groups\" | \"individual\">(\"groups\");\n  const [useAdvancedSearch, setUseAdvancedSearch] = useState(false);\n  const [searchResults, setSearchResults] = useState<Product[]>([]);\n  const [filters, setFilters] = useState<FilterState>({\n    categories: [],\n    games: [],\n    priceRange: \"all\",\n    showInStock: true,\n    showOutOfStock: true\n  });\n\n  const { data: products = [], isLoading, error } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: productGroups = [], isLoading: isLoadingGroups } = useQuery<ProductGroup[]>({\n    queryKey: ['/api/product-groups'],\n  });\n\n  // Handle search results from advanced search component\n  const handleSearchResults = (results: Product[]) => {\n    setSearchResults(results);\n    setUseAdvancedSearch(true);\n  };\n\n  const filteredAndSortedProducts = useMemo(() => {\n    // Use advanced search results if available, otherwise fallback to legacy filtering\n    if (useAdvancedSearch) {\n      return searchResults;\n    }\n\n    let filtered = products;\n\n    // Legacy search filter (for backward compatibility)\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(product =>\n        product.name.toLowerCase().includes(query) ||\n        product.description.toLowerCase().includes(query) ||\n        product.game.toLowerCase().includes(query) ||\n        product.category.toLowerCase().includes(query)\n      );\n    }\n\n    // Category filter\n    if (filters.categories.length > 0) {\n      filtered = filtered.filter(product => filters.categories.includes(product.category));\n    }\n\n    // Game filter\n    if (filters.games.length > 0) {\n      filtered = filtered.filter(product => filters.games.includes(product.game));\n    }\n\n    // Price range filter\n    if (filters.priceRange !== \"all\") {\n      filtered = filtered.filter(product => {\n        const price = parseFloat(product.price);\n        switch (filters.priceRange) {\n          case \"under-10\": return price < 10;\n          case \"10-50\": return price >= 10 && price <= 50;\n          case \"50-plus\": return price > 50;\n          default: return true;\n        }\n      });\n    }\n\n    // Stock filter\n    if (!filters.showInStock || !filters.showOutOfStock) {\n      filtered = filtered.filter(product => {\n        if (filters.showInStock && !filters.showOutOfStock) {\n          return product.inStock && product.stockQuantity > 0;\n        }\n        if (!filters.showInStock && filters.showOutOfStock) {\n          return !product.inStock || product.stockQuantity === 0;\n        }\n        return true;\n      });\n    }\n\n    // Sort (only for legacy mode)\n    const sorted = [...filtered].sort((a, b) => {\n      switch (sortBy) {\n        case \"price-low\":\n          return parseFloat(a.price) - parseFloat(b.price);\n        case \"price-high\":\n          return parseFloat(b.price) - parseFloat(a.price);\n        case \"popular\":\n          // Sort by stock quantity (higher = more popular)\n          return b.stockQuantity - a.stockQuantity;\n        case \"newest\":\n          // Sort alphabetically as we don't have creation dates\n          return a.name.localeCompare(b.name);\n        default:\n          return a.name.localeCompare(b.name);\n      }\n    });\n\n    return sorted;\n  }, [products, searchQuery, filters, sortBy, useAdvancedSearch, searchResults]);\n\n  const filteredAndSortedGroups = useMemo(() => {\n    let filtered = productGroups;\n\n    // Search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(group =>\n        group.name.toLowerCase().includes(query) ||\n        group.description.toLowerCase().includes(query) ||\n        group.game.toLowerCase().includes(query) ||\n        group.category.toLowerCase().includes(query)\n      );\n    }\n\n    // Category filter\n    if (filters.categories.length > 0) {\n      filtered = filtered.filter(group => filters.categories.includes(group.category));\n    }\n\n    // Game filter\n    if (filters.games.length > 0) {\n      filtered = filtered.filter(group => filters.games.includes(group.game));\n    }\n\n    // Price range filter\n    if (filters.priceRange !== \"all\") {\n      filtered = filtered.filter(group => {\n        return group.variants.some(variant => {\n          const price = parseFloat(variant.price);\n          switch (filters.priceRange) {\n            case \"under-10\": return price < 10;\n            case \"10-50\": return price >= 10 && price <= 50;\n            case \"50-plus\": return price > 50;\n            default: return true;\n          }\n        });\n      });\n    }\n\n    // Stock filter\n    if (!filters.showInStock || !filters.showOutOfStock) {\n      filtered = filtered.filter(group => {\n        return group.variants.some(variant => {\n          if (filters.showInStock && !filters.showOutOfStock) {\n            return variant.inStock && variant.stockQuantity > 0;\n          }\n          if (!filters.showInStock && filters.showOutOfStock) {\n            return !variant.inStock || variant.stockQuantity === 0;\n          }\n          return true;\n        });\n      });\n    }\n\n    // Sort groups by name\n    const sorted = [...filtered].sort((a, b) => {\n      return a.name.localeCompare(b.name);\n    });\n\n    return sorted;\n  }, [productGroups, searchQuery, filters, sortBy]);\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold text-destructive mb-4\">Error Loading Products</h1>\n            <p className=\"text-muted-foreground\">Failed to load products. Please try again later.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"falling-dots\"></div>\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <main className=\"w-full\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-4 sm:mb-0\" data-testid=\"text-page-title\">\n              Products\n            </h1>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant={useAdvancedSearch ? \"default\" : \"outline\"}\n                onClick={() => {\n                  setUseAdvancedSearch(!useAdvancedSearch);\n                  if (!useAdvancedSearch) {\n                    // Reset to show all products when switching to advanced mode\n                    setSearchResults([]);\n                  }\n                }}\n                className=\"text-sm\"\n              >\n                <Sparkles className=\"w-4 h-4 mr-1\" />\n                {useAdvancedSearch ? \"Advanced Search\" : \"Enable Advanced\"}\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                onClick={() => setViewMode(viewMode === \"groups\" ? \"individual\" : \"groups\")}\n                className=\"text-sm\"\n              >\n                {viewMode === \"groups\" ? <List className=\"w-4 h-4 mr-1\" /> : <Grid className=\"w-4 h-4 mr-1\" />}\n                {viewMode === \"groups\" ? \"Individual View\" : \"Group View\"}\n              </Button>\n            </div>\n          </div>\n\n          {/* Advanced Search Component */}\n          {useAdvancedSearch ? (\n            <div className=\"mb-8\">\n              <AdvancedSearch onResults={handleSearchResults} />\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-between mb-6\">\n              <DropdownFilters filters={filters} onFiltersChange={setFilters} />\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">Sort by:</span>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"name\">Name</SelectItem>\n                    <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                    <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                    <SelectItem value=\"popular\">Most Popular</SelectItem>\n                    <SelectItem value=\"newest\">Newest</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n\n          {/* Recently Viewed Products */}\n          <RecentlyViewed className=\"mb-8\" limit={8} />\n\n            {(isLoading || isLoadingGroups) ? (\n              <div className=\"product-grid\">\n                {[...Array(8)].map((_, i) => (\n                  <div key={i} className=\"bg-card rounded-lg border border-border overflow-hidden\">\n                    <Skeleton className=\"w-full h-48\" />\n                    <div className=\"p-6\">\n                      <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                      <Skeleton className=\"h-4 w-full mb-4\" />\n                      <div className=\"flex justify-between items-center\">\n                        <Skeleton className=\"h-6 w-20\" />\n                        <Skeleton className=\"h-10 w-24\" />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : viewMode === \"individual\" ? (\n              filteredAndSortedProducts.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <h2 className=\"text-2xl font-bold text-muted-foreground mb-4\">No Products Found</h2>\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery || filters.categories.length > 0 || filters.games.length > 0\n                      ? \"Try adjusting your search or filters\"\n                      : \"No products available at the moment\"}\n                  </p>\n                </div>\n              ) : (\n                <>\n                  <div className=\"product-grid\" data-testid=\"grid-products\">\n                    {filteredAndSortedProducts.map((product) => (\n                      <ProductCard key={product.id} product={product} />\n                    ))}\n                  </div>\n                  \n                  <div className=\"text-center mt-12\">\n                    <span className=\"text-muted-foreground\" data-testid=\"text-results-count\">\n                      Showing {filteredAndSortedProducts.length} product{filteredAndSortedProducts.length !== 1 ? 's' : ''}\n                    </span>\n                  </div>\n                </>\n              )\n            ) : (\n              filteredAndSortedGroups.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <h2 className=\"text-2xl font-bold text-muted-foreground mb-4\">No Product Groups Found</h2>\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery || filters.categories.length > 0 || filters.games.length > 0\n                      ? \"Try adjusting your search or filters\"\n                      : \"No product groups available at the moment\"}\n                  </p>\n                </div>\n              ) : (\n                <>\n                  <div className=\"product-grid\" data-testid=\"grid-products\">\n                    {filteredAndSortedGroups.map((group) => (\n                      <ProductGroupCard key={group.id} group={group} />\n                    ))}\n                  </div>\n                  \n                  <div className=\"text-center mt-12\">\n                    <span className=\"text-muted-foreground\" data-testid=\"text-results-count\">\n                      Showing {filteredAndSortedGroups.length} product group{filteredAndSortedGroups.length !== 1 ? 's' : ''}\n                    </span>\n                  </div>\n                </>\n              )\n            )}\n        </main>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border mt-16\">\n        <div className=\"container mx-auto px-4 py-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"col-span-1 md:col-span-2\">\n              <div className=\"text-2xl font-bold text-primary flex items-center mb-4\">\n                <img src=\"https://i.postimg.cc/0j1BFrgF/Untitled-3.png\" alt=\"PlayDirty\" className=\"w-6 h-6 mr-2\" />\n                PlayDirty\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                Your trusted source for gaming enhancement tools and solutions. \n                Premium quality, secure delivery, and 24/7 support.\n              </p>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-discord\">\n                  Discord\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-telegram\">\n                  Telegram\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-twitter\">\n                  Twitter\n                </a>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">Support</h4>\n              <div className=\"space-y-2\">\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-help\">Help Center</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-contact\">Contact Us</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-guide\">Installation Guide</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-faq\">FAQ</a>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-foreground mb-4\">Legal</h4>\n              <div className=\"space-y-2\">\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-terms\">Terms of Service</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-privacy\">Privacy Policy</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-refund\">Refund Policy</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-dmca\">DMCA</a>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-border pt-8 mt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <p className=\"text-muted-foreground text-sm\">\n                © 2024 PlayDirty. All rights reserved.\n              </p>\n              <div className=\"flex items-center space-x-4 mt-4 md:mt-0\">\n                <span className=\"text-muted-foreground text-sm\">Powered by SellAuth</span>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-green-500\">🛡️</span>\n                  <span className=\"text-sm text-muted-foreground\">Secure Payments</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":16810},"client/src/pages/support.tsx":{"content":"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MessageCircle, Mail, HelpCircle, CheckCircle } from \"lucide-react\";\nimport { insertSupportTicketSchema, type InsertSupportTicket } from \"@shared/schema\";\n\nexport default function Support() {\n  const { toast } = useToast();\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const form = useForm<InsertSupportTicket>({\n    resolver: zodResolver(insertSupportTicketSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\",\n      priority: \"medium\"\n    }\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: InsertSupportTicket) => {\n      const response = await apiRequest(\"POST\", \"/api/support\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      form.reset();\n      toast({\n        title: \"Support ticket submitted\",\n        description: \"We'll get back to you within 24 hours!\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit support ticket. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: InsertSupportTicket) => {\n    submitMutation.mutate(data);\n  };\n\n  const faqs = [\n    {\n      question: \"How do I download my purchased products?\",\n      answer: \"After purchase, you'll receive an email with download links. You can also access your products from your account dashboard.\"\n    },\n    {\n      question: \"What payment methods do you accept?\",\n      answer: \"We accept all major credit cards, PayPal, and cryptocurrency payments through our secure payment processor.\"\n    },\n    {\n      question: \"How long do license keys last?\",\n      answer: \"License duration varies by product. Check the product description for specific duration details (1 day, 7 days, 30 days, or lifetime).\"\n    },\n    {\n      question: \"What if my product doesn't work?\",\n      answer: \"Contact our support team immediately. We offer 24/7 technical support and will help resolve any issues or provide refunds if necessary.\"\n    },\n    {\n      question: \"Can I get a refund?\",\n      answer: \"Yes, we offer refunds within 24 hours of purchase if you experience technical issues that we cannot resolve.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"falling-dots\"></div>\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold text-foreground mb-4\" data-testid=\"heading-support\">\n              Support Center\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Get help with your products or contact our support team\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Contact Form */}\n            <Card data-testid=\"card-contact-form\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageCircle className=\"w-5 h-5\" />\n                  Contact Support\n                </CardTitle>\n                <CardDescription>\n                  Submit a support ticket and we'll get back to you within 24 hours\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {isSubmitted ? (\n                  <div className=\"text-center py-8\" data-testid=\"success-message\">\n                    <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">Ticket Submitted!</h3>\n                    <p className=\"text-muted-foreground\">\n                      We've received your support request and will respond within 24 hours.\n                    </p>\n                    <Button \n                      onClick={() => setIsSubmitted(false)} \n                      className=\"mt-4\"\n                      data-testid=\"button-submit-another\"\n                    >\n                      Submit Another Ticket\n                    </Button>\n                  </div>\n                ) : (\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Name</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Your full name\" \n                                {...field} \n                                data-testid=\"input-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"email\" \n                                placeholder=\"your.email@example.com\" \n                                {...field} \n                                data-testid=\"input-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"subject\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Subject/Order ID</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Order ID\" \n                                {...field} \n                                data-testid=\"input-subject\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"message\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Message</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Please provide details about your issue...\"\n                                className=\"min-h-[120px]\"\n                                {...field} \n                                data-testid=\"textarea-message\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={submitMutation.isPending}\n                        data-testid=\"button-submit-ticket\"\n                      >\n                        {submitMutation.isPending ? \"Submitting...\" : \"Submit Ticket\"}\n                      </Button>\n                    </form>\n                  </Form>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* FAQs */}\n            <Card data-testid=\"card-faqs\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <HelpCircle className=\"w-5 h-5\" />\n                  Frequently Asked Questions\n                </CardTitle>\n                <CardDescription>\n                  Quick answers to common questions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {faqs.map((faq, index) => (\n                    <div key={index} className=\"border-b border-border pb-4 last:border-b-0\" data-testid={`faq-${index}`}>\n                      <h4 className=\"font-semibold text-foreground mb-2\">\n                        {faq.question}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {faq.answer}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Support Options */}\n          <div className=\"mt-8 grid md:grid-cols-3 gap-4\">\n            <Card className=\"text-center p-6\" data-testid=\"card-email-support\">\n              <Mail className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <h3 className=\"font-semibold mb-1\">Email Support</h3>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Direct email for urgent issues\n              </p>\n              <a \n                href=\"mailto:support@playdirty.com\" \n                className=\"text-primary hover:underline text-sm\"\n                data-testid=\"link-email\"\n              >\n                support@playdirty.com\n              </a>\n            </Card>\n\n            <Card className=\"text-center p-6\" data-testid=\"card-live-chat\">\n              <MessageCircle className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <h3 className=\"font-semibold mb-1\">Live Chat</h3>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Available 24/7 for instant help\n              </p>\n              <Button size=\"sm\" data-testid=\"button-live-chat\">\n                Start Chat\n              </Button>\n            </Card>\n\n            <Card className=\"text-center p-6\" data-testid=\"card-response-time\">\n              <CheckCircle className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <h3 className=\"font-semibold mb-1\">Response Time</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Average response within 2-4 hours\n              </p>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11340},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-purple-300 group-[.destructive]:hover:text-purple-50 group-[.destructive]:focus:ring-purple-400 group-[.destructive]:focus:ring-offset-purple-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4857},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { Product } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, Copy, CheckCircle, Mail, User } from \"lucide-react\";\n\ntype PaymentMethod = 'bitcoin' | 'ethereum' | 'litecoin';\n\ninterface CryptoWallet {\n  name: string;\n  symbol: string;\n  address: string;\n  color: string;\n}\n\nconst cryptoWallets: Record<PaymentMethod, CryptoWallet> = {\n  bitcoin: {\n    name: 'Bitcoin',\n    symbol: 'BTC',\n    address: 'bc1q23qag8hte7cgstjm2lm82m2r26td83gvj7y3k3',\n    color: 'text-orange-500'\n  },\n  ethereum: {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    address: '0x66b07DFe9025aA5D9F073Ca9aC7B5a4b9C348C1d',\n    color: 'text-blue-500'\n  },\n  litecoin: {\n    name: 'Litecoin',\n    symbol: 'LTC',\n    address: 'LdybeZA3CS7t6sMNb88ZEyHoJPGhYCNZmj',\n    color: 'text-gray-400'\n  }\n};\n\nexport default function CheckoutPage() {\n  const [, setLocation] = useLocation();\n  const [match, params] = useRoute(\"/checkout/:productData\");\n  const { user } = useAuth();\n  const [product, setProduct] = useState<Product | null>(null);\n  const [selectedPayment, setSelectedPayment] = useState<PaymentMethod | null>(null);\n  const [copiedAddress, setCopiedAddress] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (params?.productData) {\n      try {\n        const decodedProduct = JSON.parse(decodeURIComponent(params.productData));\n        setProduct(decodedProduct);\n      } catch (error) {\n        console.error('Failed to parse product data:', error);\n        setLocation('/');\n      }\n    } else {\n      setLocation('/');\n    }\n  }, [params, setLocation]);\n\n  const copyToClipboard = async (address: string) => {\n    try {\n      await navigator.clipboard.writeText(address);\n      setCopiedAddress(address);\n      setTimeout(() => setCopiedAddress(null), 2000);\n    } catch (err) {\n      console.error('Failed to copy address:', err);\n    }\n  };\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Loading...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation('/products')}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Products\n          </Button>\n          <h1 className=\"text-3xl font-bold\">Checkout</h1>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Product Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\">\n                  {product.imageUrl && (\n                    <img \n                      src={product.imageUrl} \n                      alt={product.name}\n                      className=\"w-16 h-16 rounded-lg object-cover\"\n                    />\n                  )}\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">{product.name}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{product.game}</p>\n                  </div>\n                </div>\n                \n                <div className=\"pt-4 border-t\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">Total</span>\n                    <span className=\"text-2xl font-bold text-primary\">${product.price}</span>\n                  </div>\n                </div>\n\n                <Badge variant=\"outline\" className=\"w-full justify-center\">\n                  {product.category}\n                </Badge>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Methods */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Options</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Customer Email */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-lg\">Account Information</h3>\n                  <div className=\"space-y-2\">\n                    <Label>Logged in as</Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                      <div className=\"pl-10 p-3 bg-background rounded border text-sm\">\n                        <p className=\"font-medium\">{user?.username}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Orders will be accessible in your dashboard\n                        </p>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Required to access your purchase and receive your license key\n                    </p>\n                  </div>\n                </div>\n\n                {/* Cryptocurrency Payment Methods */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-lg\">Select Cryptocurrency</h3>\n                  <div className=\"grid gap-4\">\n                    {Object.entries(cryptoWallets).map(([key, wallet]) => (\n                      <Card \n                        key={key}\n                        className={`cursor-pointer transition-all border-2 ${\n                          selectedPayment === key \n                            ? 'border-primary bg-primary/5' \n                            : 'border-border hover:border-primary/50'\n                        }`}\n                        onClick={() => setSelectedPayment(key as PaymentMethod)}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className={`w-10 h-10 rounded-full bg-muted flex items-center justify-center ${wallet.color} font-bold`}>\n                                {wallet.symbol}\n                              </div>\n                              <div>\n                                <h4 className=\"font-semibold\">{wallet.name}</h4>\n                                <p className=\"text-sm text-muted-foreground\">{wallet.symbol}</p>\n                              </div>\n                            </div>\n                            <div className={`w-4 h-4 rounded-full border-2 ${\n                              selectedPayment === key \n                                ? 'border-primary bg-primary' \n                                : 'border-muted-foreground'\n                            }`} />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Payment Instructions */}\n                {selectedPayment && (\n                  <div className=\"bg-muted/20 p-6 rounded-lg border border-border\">\n                    <h3 className=\"font-semibold text-lg mb-4\">Payment Instructions</h3>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Send exactly <span className=\"font-bold text-primary\">${product.price}</span> worth of {cryptoWallets[selectedPayment].name} to:\n                        </p>\n                        <div className=\"flex items-center gap-2 p-3 bg-background rounded border\">\n                          <code className=\"flex-1 text-sm font-mono break-all\">\n                            {cryptoWallets[selectedPayment].address}\n                          </code>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => copyToClipboard(cryptoWallets[selectedPayment].address)}\n                            className=\"shrink-0\"\n                          >\n                            {copiedAddress === cryptoWallets[selectedPayment].address ? (\n                              <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                            ) : (\n                              <Copy className=\"w-4 h-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-yellow-500/10 border border-yellow-500/20 p-4 rounded\">\n                        <h4 className=\"font-semibold text-yellow-600 mb-2\">Important:</h4>\n                        <ul className=\"text-sm text-yellow-700 space-y-1\">\n                          <li>• Double-check the wallet address before sending</li>\n                          <li>• Send the exact USD amount in {cryptoWallets[selectedPayment].symbol}</li>\n                          <li>• Transaction may take 10-60 minutes to confirm</li>\n                          <li>• Contact support if you need assistance</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-4 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setLocation('/products')}\n                    className=\"flex-1\"\n                    size=\"lg\"\n                  >\n                    Back to Products\n                  </Button>\n                  {selectedPayment && user && (\n                    <Button\n                      className=\"flex-1\"\n                      size=\"lg\"\n                      onClick={async () => {\n                        if (!user) {\n                          alert('Please log in to complete your purchase');\n                          return;\n                        }\n                        \n                        try {\n                          const orderData = {\n                            productName: product.name,\n                            productPrice: product.price,\n                            userId: user.id,\n                            customerEmail: `${user.username}@playdirty.com`,\n                            paymentMethod: cryptoWallets[selectedPayment].name,\n                            walletAddress: cryptoWallets[selectedPayment].address\n                          };\n\n                          const response = await fetch('/api/orders', {\n                            method: 'POST',\n                            headers: {\n                              'Content-Type': 'application/json',\n                            },\n                            credentials: 'include',\n                            body: JSON.stringify(orderData),\n                          });\n\n                          if (response.ok) {\n                            const order = await response.json();\n                            alert(`Order submitted successfully!\\n\\nOrder ID: ${order.id}\\nAccount: ${user.username}\\n\\nYour order is now accessible in your dashboard.\\n\\nWe will verify your payment and process your order within 1-24 hours.`);\n                            setLocation('/dashboard');\n                          } else {\n                            alert('Failed to submit order. Please try again.');\n                          }\n                        } catch (error) {\n                          alert('Connection error. Please try again.');\n                        }\n                      }}\n                    >\n                      I've Sent Payment\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setLocation('/')}\n                    className=\"flex-1\"\n                    size=\"lg\"\n                  >\n                    Contact Support\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12870},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Shield } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await fetch('/api/admin/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        setLocation('/admin');\n      } else {\n        const data = await response.json();\n        setError(data.message || 'Invalid credentials');\n      }\n    } catch (err) {\n      setError('Connection failed. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Shield className=\"w-12 h-12 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Admin Login</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Logging in...\" : \"Login\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3110},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Shield, LogOut, Package, CheckCircle, Clock, AlertTriangle, Key } from \"lucide-react\";\n\ninterface Order {\n  id: string;\n  productName: string;\n  productPrice: string;\n  customerEmail?: string;\n  paymentMethod: string;\n  walletAddress: string;\n  status: 'pending' | 'confirmed' | 'completed';\n  createdAt: string;\n  transactionId?: string;\n  licenseKey?: string;\n  downloadUrl?: string;\n}\n\nexport default function AdminPanel() {\n  const [, setLocation] = useLocation();\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [completingOrder, setCompletingOrder] = useState<Order | null>(null);\n  const [licenseKey, setLicenseKey] = useState(\"\");\n  const [downloadUrl, setDownloadUrl] = useState(\"\");\n\n  useEffect(() => {\n    checkAuth();\n    fetchOrders();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const response = await fetch('/api/admin/check', {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        setLocation('/admin-login');\n      }\n    } catch (err) {\n      setLocation('/admin-login');\n    }\n  };\n\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch('/api/admin/orders', {\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setOrders(data);\n      } else {\n        setError('Failed to fetch orders');\n      }\n    } catch (err) {\n      setError('Connection failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateOrderStatus = async (orderId: string, status: 'confirmed' | 'completed') => {\n    try {\n      const response = await fetch(`/api/admin/orders/${orderId}/status`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ status }),\n      });\n\n      if (response.ok) {\n        setOrders(orders.map(order => \n          order.id === orderId ? { ...order, status } : order\n        ));\n      } else {\n        setError('Failed to update order status');\n      }\n    } catch (err) {\n      setError('Connection failed');\n    }\n  };\n\n  const handleCompleteOrder = (order: Order) => {\n    setCompletingOrder(order);\n    setLicenseKey(\"\");\n    setDownloadUrl(\"\");\n  };\n\n  const completeOrderWithLicense = async () => {\n    if (!completingOrder || !licenseKey.trim()) {\n      setError('License key is required');\n      return;\n    }\n\n    try {\n      // Update license key first\n      const licenseResponse = await fetch(`/api/admin/orders/${completingOrder.id}/license`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ \n          licenseKey: licenseKey.trim(), \n          downloadUrl: downloadUrl.trim() || undefined \n        }),\n      });\n\n      if (!licenseResponse.ok) {\n        setError('Failed to update license key');\n        return;\n      }\n\n      // Then update status to completed\n      const statusResponse = await fetch(`/api/admin/orders/${completingOrder.id}/status`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ status: 'completed' }),\n      });\n\n      if (statusResponse.ok) {\n        setOrders(orders.map(order => \n          order.id === completingOrder.id \n            ? { ...order, status: 'completed', licenseKey: licenseKey.trim(), downloadUrl: downloadUrl.trim() || undefined } \n            : order\n        ));\n        setCompletingOrder(null);\n        setLicenseKey(\"\");\n        setDownloadUrl(\"\");\n      } else {\n        setError('Failed to complete order');\n      }\n    } catch (err) {\n      setError('Connection failed');\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await fetch('/api/admin/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n    } catch (err) {\n      // Ignore logout errors\n    }\n    setLocation('/admin-login');\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      case 'confirmed':\n        return <AlertTriangle className=\"w-4 h-4 text-blue-500\" />;\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-500/10 text-yellow-600 border-yellow-500/20';\n      case 'confirmed':\n        return 'bg-blue-500/10 text-blue-600 border-blue-500/20';\n      case 'completed':\n        return 'bg-green-500/10 text-green-600 border-green-500/20';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Loading...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Shield className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\">Admin Panel</h1>\n          </div>\n          <Button variant=\"outline\" onClick={handleLogout}>\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Stats */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <Package className=\"w-8 h-8 text-primary\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Orders</p>\n                  <p className=\"text-2xl font-bold\">{orders.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <Clock className=\"w-8 h-8 text-yellow-500\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pending</p>\n                  <p className=\"text-2xl font-bold\">\n                    {orders.filter(o => o.status === 'pending').length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <AlertTriangle className=\"w-8 h-8 text-blue-500\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Confirmed</p>\n                  <p className=\"text-2xl font-bold\">\n                    {orders.filter(o => o.status === 'confirmed').length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <CheckCircle className=\"w-8 h-8 text-green-500\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Completed</p>\n                  <p className=\"text-2xl font-bold\">\n                    {orders.filter(o => o.status === 'completed').length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Orders Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {orders.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Package className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No orders found</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {orders.map((order) => (\n                  <Card key={order.id} className=\"border border-border\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-4 mb-2\">\n                            <h3 className=\"font-semibold\">{order.productName}</h3>\n                            <Badge className={getStatusColor(order.status)}>\n                              <div className=\"flex items-center gap-1\">\n                                {getStatusIcon(order.status)}\n                                {order.status}\n                              </div>\n                            </Badge>\n                          </div>\n                          <div className=\"grid md:grid-cols-2 gap-4 text-sm text-muted-foreground\">\n                            <div>\n                              <p><strong>Price:</strong> ${order.productPrice}</p>\n                              <p><strong>Payment:</strong> {order.paymentMethod}</p>\n                            </div>\n                            <div>\n                              <p><strong>Created:</strong> {new Date(order.createdAt).toLocaleString()}</p>\n                              <p><strong>Order ID:</strong> {order.id}</p>\n                            </div>\n                          </div>\n                          <div className=\"mt-2\">\n                            <p className=\"text-xs text-muted-foreground break-all\">\n                              <strong>Wallet:</strong> {order.walletAddress}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2 ml-4\">\n                          {order.status === 'pending' && (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => updateOrderStatus(order.id, 'confirmed')}\n                            >\n                              Confirm Payment\n                            </Button>\n                          )}\n                          {order.status === 'confirmed' && (\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleCompleteOrder(order)}\n                                >\n                                  <Key className=\"w-4 h-4 mr-1\" />\n                                  Complete Order\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Complete Order</DialogTitle>\n                                  <DialogDescription>\n                                    Assign a license key and download URL for: <strong>{order.productName}</strong>\n                                  </DialogDescription>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <div>\n                                    <Label htmlFor=\"licenseKey\">License Key *</Label>\n                                    <Input\n                                      id=\"licenseKey\"\n                                      value={licenseKey}\n                                      onChange={(e) => setLicenseKey(e.target.value)}\n                                      placeholder=\"e.g. RUST-MEK-1D-ABC123DEF456\"\n                                      required\n                                    />\n                                  </div>\n                                  <div>\n                                    <Label htmlFor=\"downloadUrl\">Download URL (Optional)</Label>\n                                    <Input\n                                      id=\"downloadUrl\"\n                                      value={downloadUrl}\n                                      onChange={(e) => setDownloadUrl(e.target.value)}\n                                      placeholder=\"https://secure.pdcheats.uk/downloads/...\"\n                                    />\n                                  </div>\n                                  <div className=\"flex justify-end space-x-2\">\n                                    <Button variant=\"outline\" onClick={() => setCompletingOrder(null)}>\n                                      Cancel\n                                    </Button>\n                                    <Button onClick={completeOrderWithLicense}>\n                                      Complete Order\n                                    </Button>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          )}\n                          {order.status === 'completed' && order.licenseKey && (\n                            <div className=\"text-xs text-green-600\">\n                              <Key className=\"w-3 h-3 inline mr-1\" />\n                              License Assigned\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14725},"client/src/pages/customer-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { User, LogOut, Package, Copy, CheckCircle, Key, Download, ShoppingCart, Clock, CreditCard } from \"lucide-react\";\nimport Header from \"@/components/header\";\n\ninterface UserOrder {\n  id: string;\n  productName: string;\n  productPrice: string;\n  userId: string;\n  customerEmail?: string;\n  paymentMethod: string;\n  status: 'pending' | 'confirmed' | 'completed';\n  createdAt: string;\n  licenseKey?: string;\n  downloadUrl?: string;\n}\n\nexport default function CustomerDashboard() {\n  const { user, logoutMutation } = useAuth();\n  const [orders, setOrders] = useState<UserOrder[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [copiedKey, setCopiedKey] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    if (user) {\n      fetchOrders();\n    }\n  }, [user]);\n\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch('/api/orders', {\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setOrders(data);\n      } else {\n        setError('Failed to fetch orders');\n      }\n    } catch (err) {\n      setError('Connection failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedKey(text);\n      setTimeout(() => setCopiedKey(null), 2000);\n    } catch (err) {\n      console.error('Failed to copy to clipboard');\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\" className=\"bg-yellow-900/20 text-yellow-400 border-yellow-800\">\n          <Clock className=\"w-3 h-3 mr-1\" />\n          Pending\n        </Badge>;\n      case 'confirmed':\n        return <Badge variant=\"secondary\" className=\"bg-blue-900/20 text-blue-400 border-blue-800\">\n          <CreditCard className=\"w-3 h-3 mr-1\" />\n          Confirmed\n        </Badge>;\n      case 'completed':\n        return <Badge variant=\"secondary\" className=\"bg-green-900/20 text-green-400 border-green-800\">\n          <CheckCircle className=\"w-3 h-3 mr-1\" />\n          Completed\n        </Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getOrderStats = () => {\n    const totalOrders = orders.length;\n    const completedOrders = orders.filter(order => order.status === 'completed').length;\n    const availableKeys = orders.filter(order => order.licenseKey && order.status === 'completed').length;\n    \n    return { totalOrders, completedOrders, availableKeys };\n  };\n\n  const stats = getOrderStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black\">\n        <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n        <div className=\"flex items-center justify-center pt-20\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#1800ad] mx-auto mb-4\"></div>\n            <p className=\"text-gray-400\">Loading your dashboard...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      \n      <div className=\"container mx-auto px-4 py-8 pt-20\">\n        {/* User Welcome Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white mb-2\">\n                Welcome back, {user?.username}!\n              </h1>\n              <p className=\"text-gray-400\">Manage your orders and access your gaming tools</p>\n            </div>\n            <Button\n              onClick={() => logoutMutation.mutate()}\n              variant=\"outline\"\n              className=\"border-gray-700 text-gray-300 hover:bg-gray-800\"\n              disabled={logoutMutation.isPending}\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-gray-900/50 border-gray-800\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-400 flex items-center\">\n                <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                Total Orders\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">{stats.totalOrders}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900/50 border-gray-800\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-400 flex items-center\">\n                <CheckCircle className=\"w-4 h-4 mr-2\" />\n                Completed Orders\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-400\">{stats.completedOrders}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900/50 border-gray-800\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-400 flex items-center\">\n                <Key className=\"w-4 h-4 mr-2\" />\n                Available Keys\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-[#1800ad]\">{stats.availableKeys}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Error Display */}\n        {error && (\n          <Alert className=\"mb-6 bg-red-900/20 border-red-800 text-red-400\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Orders Section */}\n        <Card className=\"bg-gray-900/50 border-gray-800\">\n          <CardHeader>\n            <CardTitle className=\"text-xl text-white flex items-center\">\n              <Package className=\"w-5 h-5 mr-2\" />\n              Your Orders\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {orders.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Package className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                <p className=\"text-gray-400 mb-2\">No orders yet</p>\n                <p className=\"text-sm text-gray-500\">\n                  Browse our products and make your first purchase to get started!\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {orders.map((order) => (\n                  <Card key={order.id} className=\"bg-gray-800/50 border-gray-700\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-white text-lg mb-1\">\n                            {order.productName}\n                          </h3>\n                          <p className=\"text-sm text-gray-400\">\n                            Order ID: {order.id}\n                          </p>\n                          <p className=\"text-sm text-gray-400\">\n                            Created: {new Date(order.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-bold text-[#1800ad] mb-2\">\n                            ${order.productPrice}\n                          </div>\n                          {getStatusBadge(order.status)}\n                        </div>\n                      </div>\n\n                      {/* License Key Section */}\n                      {order.status === 'completed' && order.licenseKey && (\n                        <div className=\"mt-4 p-4 bg-[#1800ad]/10 rounded-lg border border-[#1800ad]/20\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-sm font-medium text-[#1800ad] mb-1 flex items-center\">\n                                <Key className=\"w-4 h-4 mr-1\" />\n                                License Key\n                              </p>\n                              <div className=\"font-mono text-sm bg-gray-900 px-3 py-2 rounded border border-gray-700 text-gray-300\">\n                                {order.licenseKey}\n                              </div>\n                            </div>\n                            <Button\n                              onClick={() => copyToClipboard(order.licenseKey!)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"ml-3 border-[#1800ad] text-[#1800ad] hover:bg-[#1800ad] hover:text-white\"\n                            >\n                              {copiedKey === order.licenseKey ? (\n                                <CheckCircle className=\"w-4 h-4\" />\n                              ) : (\n                                <Copy className=\"w-4 h-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Download Section */}\n                      {order.status === 'completed' && order.downloadUrl && (\n                        <div className=\"mt-4\">\n                          <Button\n                            onClick={() => window.open(order.downloadUrl, '_blank')}\n                            className=\"w-full bg-[#1800ad] hover:bg-[#1800ad]/80 text-white\"\n                          >\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            Download\n                          </Button>\n                        </div>\n                      )}\n\n                      {/* Payment Method */}\n                      <div className=\"mt-4 pt-4 border-t border-gray-700\">\n                        <p className=\"text-sm text-gray-400\">\n                          Payment Method: <span className=\"text-gray-300\">{order.paymentMethod}</span>\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11066},"client/src/pages/customer-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { User } from \"lucide-react\";\n\nexport default function CustomerLogin() {\n  const [, setLocation] = useLocation();\n  const [orderId, setOrderId] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await fetch('/api/customer/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ orderId, email }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setLocation(`/customer-dashboard?order=${orderId}`);\n      } else {\n        const data = await response.json();\n        setError(data.message || 'Invalid order ID or email');\n      }\n    } catch (err) {\n      setError('Connection failed. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <User className=\"w-12 h-12 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Access Your Orders</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Enter your order details to view your purchases and license keys\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"orderId\">Order ID</Label>\n                <Input\n                  id=\"orderId\"\n                  type=\"text\"\n                  placeholder=\"e.g. abc123def-456...\"\n                  value={orderId}\n                  onChange={(e) => setOrderId(e.target.value)}\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Accessing...\" : \"Access My Orders\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-4 text-center\">\n              <Button variant=\"link\" onClick={() => setLocation('/')}>\n                ← Back to Home\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3633},"client/src/hooks/use-auth.tsx":{"content":"import { ReactNode, createContext, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport type { User, InsertUser } from \"@shared/schema\";\nimport { apiRequest, getQueryFn } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<User, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<User, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<User | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (newUser: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", newUser);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to PlayDirty, ${user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3188},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen bg-black\">\n          <div className=\"flex flex-col items-center gap-4\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-[#1800ad]\" />\n            <p className=\"text-sm text-gray-400\">Loading...</p>\n          </div>\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}","size_bytes":861},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Redirect } from \"wouter\";\nimport { Loader2, Shield, Users, Star } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({ username: \"\", password: \"\" });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (loginData.username && loginData.password) {\n      loginMutation.mutate(loginData);\n    }\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (registerData.username && registerData.password) {\n      registerMutation.mutate(registerData);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black flex\">\n      {/* Left side - Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"mb-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-white mb-2\">PlayDirty</h1>\n            <p className=\"text-gray-400\">Your gaming enhancement platform</p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-gray-900/50\">\n              <TabsTrigger value=\"login\" className=\"text-gray-300 data-[state=active]:bg-[#1800ad] data-[state=active]:text-white\">\n                Sign In\n              </TabsTrigger>\n              <TabsTrigger value=\"register\" className=\"text-gray-300 data-[state=active]:bg-[#1800ad] data-[state=active]:text-white\">\n                Sign Up\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card className=\"bg-gray-900/50 border-gray-800\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Welcome back</CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Sign in to access your gaming tools and orders\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\" className=\"text-gray-300\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        type=\"text\"\n                        placeholder=\"Enter your username\"\n                        value={loginData.username}\n                        onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n                        className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus:border-[#1800ad]\"\n                        disabled={loginMutation.isPending}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\" className=\"text-gray-300\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        value={loginData.password}\n                        onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                        className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus:border-[#1800ad]\"\n                        disabled={loginMutation.isPending}\n                        required\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-[#1800ad] hover:bg-[#1800ad]/80 text-white\"\n                      disabled={loginMutation.isPending}\n                    >\n                      {loginMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Signing in...\n                        </>\n                      ) : (\n                        \"Sign In\"\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card className=\"bg-gray-900/50 border-gray-800\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Create account</CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Join PlayDirty to access premium gaming enhancements\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\" className=\"text-gray-300\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        type=\"text\"\n                        placeholder=\"Choose a username\"\n                        value={registerData.username}\n                        onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}\n                        className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus:border-[#1800ad]\"\n                        disabled={registerMutation.isPending}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\" className=\"text-gray-300\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        placeholder=\"Create a password\"\n                        value={registerData.password}\n                        onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                        className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus:border-[#1800ad]\"\n                        disabled={registerMutation.isPending}\n                        required\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-[#1800ad] hover:bg-[#1800ad]/80 text-white\"\n                      disabled={registerMutation.isPending}\n                    >\n                      {registerMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Creating account...\n                        </>\n                      ) : (\n                        \"Create Account\"\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero section */}\n      <div className=\"flex-1 bg-gradient-to-br from-[#1800ad]/20 to-black flex items-center justify-center p-8\">\n        <div className=\"max-w-md text-center\">\n          <div className=\"mb-8\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-[#1800ad]/20 rounded-full mb-4\">\n              <Shield className=\"h-8 w-8 text-[#1800ad]\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-white mb-4\">Premium Gaming Tools</h2>\n            <p className=\"text-gray-400 leading-relaxed\">\n              Access our exclusive collection of gaming enhancement tools with 24/7 support and instant delivery.\n            </p>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-10 h-10 bg-[#1800ad]/10 rounded-full flex items-center justify-center\">\n                  <Users className=\"h-5 w-5 text-[#1800ad]\" />\n                </div>\n              </div>\n              <div className=\"text-left\">\n                <p className=\"text-sm font-medium text-white\">Trusted by Thousands</p>\n                <p className=\"text-xs text-gray-400\">Join our community of satisfied gamers</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-10 h-10 bg-[#1800ad]/10 rounded-full flex items-center justify-center\">\n                  <Star className=\"h-5 w-5 text-[#1800ad]\" />\n                </div>\n              </div>\n              <div className=\"text-left\">\n                <p className=\"text-sm font-medium text-white\">Premium Quality</p>\n                <p className=\"text-xs text-gray-400\">High-performance tools with regular updates</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-10 h-10 bg-[#1800ad]/10 rounded-full flex items-center justify-center\">\n                  <Shield className=\"h-5 w-5 text-[#1800ad]\" />\n                </div>\n              </div>\n              <div className=\"text-left\">\n                <p className=\"text-sm font-medium text-white\">24/7 Support</p>\n                <p className=\"text-xs text-gray-400\">Always here to help when you need us</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10121},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { type User as SchemaUser, type InsertUser, insertUserSchema } from \"@shared/schema\";\nimport { storage } from \"./storage\";\nimport { fromZodError } from \"zod-validation-error\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SchemaUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  // Session is already configured in server/index.ts, just set up passport\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  \n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user || false);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Register endpoint\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const result = insertUserSchema.safeParse(req.body);\n      if (!result.success) {\n        const error = fromZodError(result.error);\n        return res.status(400).json({ message: error.toString() });\n      }\n\n      const existingUser = await storage.getUserByUsername(result.data.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const user = await storage.createUser({\n        ...result.data,\n        password: await hashPassword(result.data.password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}","size_bytes":3236},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/seed-db.ts":{"content":"import { db } from \"./db\";\nimport { products } from \"@shared/schema\";\nimport type { InsertProduct } from \"@shared/schema\";\n\nconst initialProducts: InsertProduct[] = [\n  // Rust MEK variants\n  {\n    name: \"Rust MEK - 1 Day\",\n    description: \"Premium Rust enhancement tool - 1 Day access\",\n    price: \"7.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 15,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-mek-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-1day.zip\",\n    licenseKey: \"RUST-MEK-1D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Rust MEK - 3 Day\",\n    description: \"Premium Rust enhancement tool - 3 Day access\",\n    price: \"15.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 12,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-mek-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-3day.zip\",\n    licenseKey: \"RUST-MEK-3D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Rust MEK - 7 Day\",\n    description: \"Premium Rust enhancement tool - 7 Day access\",\n    price: \"29.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 8,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-mek-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-7day.zip\",\n    licenseKey: \"RUST-MEK-7D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Rust MEK - 30 Day\",\n    description: \"Premium Rust enhancement tool - 30 Day access\",\n    price: \"59.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 5,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-mek-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-30day.zip\",\n    licenseKey: \"RUST-MEK-30D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Rust MEK - Lifetime\",\n    description: \"Premium Rust enhancement tool - Lifetime access\",\n    price: \"249.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 2,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-mek-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-mek-lifetime.zip\",\n    licenseKey: \"RUST-MEK-LT-XXXX\",\n    deliveryType: \"download\",\n  },\n  // Temp Spoofer variants\n  {\n    name: \"Temp Spoofer - 1 Day\",\n    description: \"Temporary hardware ID spoofer - 1 Day access\",\n    price: \"5.99\",\n    originalPrice: null,\n    category: \"Spoofers\",\n    game: \"Multi-Game\",\n    stockQuantity: 20,\n    inStock: true,\n    imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/temp-spoofer-1day.zip\",\n    licenseKey: \"TSPOOF-1D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Temp Spoofer - 7 Day\",\n    description: \"Temporary hardware ID spoofer - 7 Day access\",\n    price: \"17.99\",\n    originalPrice: null,\n    category: \"Spoofers\",\n    game: \"Multi-Game\",\n    stockQuantity: 15,\n    inStock: true,\n    imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/temp-spoofer-7day.zip\",\n    licenseKey: \"TSPOOF-7D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Temp Spoofer - 30 Day\",\n    description: \"Temporary hardware ID spoofer - 30 Day access\",\n    price: \"36.99\",\n    originalPrice: null,\n    category: \"Spoofers\",\n    game: \"Multi-Game\",\n    stockQuantity: 10,\n    inStock: true,\n    imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/temp-spoofer-30day.zip\",\n    licenseKey: \"TSPOOF-30D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Temp Spoofer - Lifetime\",\n    description: \"Temporary hardware ID spoofer - Lifetime access\",\n    price: \"179.99\",\n    originalPrice: null,\n    category: \"Spoofers\",\n    game: \"Multi-Game\",\n    stockQuantity: 3,\n    inStock: true,\n    imageUrl: \"/attached_assets/temp-spoofer-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/temp-spoofer-lifetime.zip\",\n    licenseKey: \"TSPOOF-LT-XXXX\",\n    deliveryType: \"download\",\n  },\n  // Rust FA\n  {\n    name: \"Rust FA\",\n    description: \"Rust Full Access account with premium features\",\n    price: \"7.99\",\n    originalPrice: null,\n    category: \"Game Accounts\",\n    game: \"Rust\",\n    stockQuantity: 8,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-fa-image.png\",\n    deliveryUrl: null,\n    licenseKey: null,\n    deliveryType: \"account\",\n  },\n  // Apex External variants\n  {\n    name: \"Apex External - 1 Day\",\n    description: \"External Apex Legends cheat - 1 Day access\",\n    price: \"2.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Apex Legends\",\n    stockQuantity: 25,\n    inStock: true,\n    imageUrl: \"/attached_assets/apex-external-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/apex-ext-1day.zip\",\n    licenseKey: \"APEX-EXT-1D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Apex External - 3 Day\",\n    description: \"External Apex Legends cheat - 3 Day access\",\n    price: \"4.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Apex Legends\",\n    stockQuantity: 20,\n    inStock: true,\n    imageUrl: \"/attached_assets/apex-external-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/apex-ext-3day.zip\",\n    licenseKey: \"APEX-EXT-3D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Apex External - 7 Day\",\n    description: \"External Apex Legends cheat - 7 Day access\",\n    price: \"14.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Apex Legends\",\n    stockQuantity: 15,\n    inStock: true,\n    imageUrl: \"/attached_assets/apex-external-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/apex-ext-7day.zip\",\n    licenseKey: \"APEX-EXT-7D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Apex External - 30 Day\",\n    description: \"External Apex Legends cheat - 30 Day access\",\n    price: \"29.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Apex Legends\",\n    stockQuantity: 8,\n    inStock: true,\n    imageUrl: \"/attached_assets/apex-external-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/apex-ext-30day.zip\",\n    licenseKey: \"APEX-EXT-30D-XXXX\",\n    deliveryType: \"download\",\n  },\n  // Perm Spoofer variants\n  {\n    name: \"Perm Spoofer - One Time\",\n    description: \"Permanent hardware ID spoofer - One time use\",\n    price: \"21.00\",\n    originalPrice: null,\n    category: \"Spoofers\",\n    game: \"Multi-Game\",\n    stockQuantity: 12,\n    inStock: true,\n    imageUrl: \"/attached_assets/perm-spoofer-fresh.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/perm-spoofer-onetime.zip\",\n    licenseKey: \"PSPOOF-OT-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Perm Spoofer - Lifetime\",\n    description: \"Permanent hardware ID spoofer - Lifetime access\",\n    price: \"55.00\",\n    originalPrice: null,\n    category: \"Spoofers\",\n    game: \"Multi-Game\",\n    stockQuantity: 5,\n    inStock: true,\n    imageUrl: \"/attached_assets/perm-spoofer-fresh.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/perm-spoofer-lifetime.zip\",\n    licenseKey: \"PSPOOF-LT-XXXX\",\n    deliveryType: \"download\",\n  },\n  // Rust NFA\n  {\n    name: \"Rust NFA 0-5000 hours\",\n    description: \"Rust No Full Access account with 0-5000 hours playtime\",\n    price: \"3.99\",\n    originalPrice: null,\n    category: \"Game Accounts\",\n    game: \"Rust\",\n    stockQuantity: 30,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-nfa-image.png\",\n    deliveryUrl: null,\n    licenseKey: null,\n    deliveryType: \"account\",\n  },\n  // Rust External variants\n  {\n    name: \"Rust External - 1 Day\",\n    description: \"External Rust cheat - 1 Day access\",\n    price: \"5.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 18,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-external-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-ext-1day.zip\",\n    licenseKey: \"RUST-EXT-1D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Rust External - 3 Days\",\n    description: \"External Rust cheat - 3 Days access\",\n    price: \"9.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 14,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-external-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-ext-3days.zip\",\n    licenseKey: \"RUST-EXT-3D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Rust External - 7 Days\",\n    description: \"External Rust cheat - 7 Days access\",\n    price: \"21.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 10,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-external-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-ext-7days.zip\",\n    licenseKey: \"RUST-EXT-7D-XXXX\",\n    deliveryType: \"download\",\n  },\n  {\n    name: \"Rust External - 30 Day\",\n    description: \"External Rust cheat - 30 Day access\",\n    price: \"51.99\",\n    originalPrice: null,\n    category: \"Game Cheats\",\n    game: \"Rust\",\n    stockQuantity: 6,\n    inStock: true,\n    imageUrl: \"/attached_assets/rust-external-image.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/rust-ext-30day.zip\",\n    licenseKey: \"RUST-EXT-30D-XXXX\",\n    deliveryType: \"download\",\n  },\n  // DMA Products\n  {\n    name: \"DMA Bundle Firmware Included\",\n    description: \"Complete DMA hardware bundle with firmware included for multi-game support\",\n    price: \"659.99\",\n    originalPrice: null,\n    category: \"DMA Hardware\",\n    game: \"Multi-Game\",\n    stockQuantity: 2,\n    inStock: true,\n    imageUrl: \"https://i.postimg.cc/jjCxmnSp/Screenshot-2025-09-13-150454.png\",\n    deliveryUrl: \"https://secure.pdcheats.uk/downloads/dma-bundle.zip\",\n    licenseKey: \"DMA-BUNDLE-2025-XXXX\",\n    deliveryType: \"download\",\n  },\n];\n\nasync function seedDatabase() {\n  try {\n    console.log(\"🌱 Seeding database with initial products...\");\n    \n    // Clear existing products first\n    await db.delete(products);\n    \n    // Insert new products\n    await db.insert(products).values(initialProducts);\n    \n    console.log(`✅ Successfully seeded ${initialProducts.length} products!`);\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seeding if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase().then(() => process.exit(0));\n}\n\nexport { seedDatabase };","size_bytes":10623},"client/src/pages/user-profile.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { useToast } from '@/hooks/use-toast';\nimport { User, Settings, Lock, Trash2, Upload } from 'lucide-react';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { useLocation } from 'wouter';\n\ninterface UserProfile {\n  id: string;\n  username: string;\n  email: string | null;\n  firstName: string | null;\n  lastName: string | null;\n  avatar: string | null;\n  isActive: boolean;\n  emailVerified: boolean;\n  lastLogin: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function UserProfile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  \n  // Form states\n  const [profileForm, setProfileForm] = useState({\n    firstName: '',\n    lastName: '',\n    email: ''\n  });\n  \n  const [passwordForm, setPasswordForm] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n  \n  const [deleteForm, setDeleteForm] = useState({\n    password: ''\n  });\n\n  // Load user profile on component mount\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  const fetchProfile = async () => {\n    try {\n      const response = await fetch('/api/profile', {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const profileData = await response.json();\n        setProfile(profileData);\n        setProfileForm({\n          firstName: profileData.firstName || '',\n          lastName: profileData.lastName || '',\n          email: profileData.email || ''\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to load profile\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load profile\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async () => {\n    setSaving(true);\n    try {\n      const response = await fetch('/api/profile', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(profileForm)\n      });\n      \n      if (response.ok) {\n        const updatedProfile = await response.json();\n        setProfile(updatedProfile);\n        toast({\n          title: \"Success\",\n          description: \"Profile updated successfully\"\n        });\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to update profile\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const changePassword = async () => {\n    if (passwordForm.newPassword !== passwordForm.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords don't match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setSaving(true);\n    try {\n      const response = await fetch('/api/profile/password', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          currentPassword: passwordForm.currentPassword,\n          newPassword: passwordForm.newPassword\n        })\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Password changed successfully\"\n        });\n        setPasswordForm({\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: ''\n        });\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to change password\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to change password\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const deleteAccount = async () => {\n    setSaving(true);\n    try {\n      const response = await fetch('/api/profile', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({ password: deleteForm.password })\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Account Deleted\",\n          description: \"Your account has been permanently deleted\"\n        });\n        setLocation('/');\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to delete account\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete account\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const uploadAvatar = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Simple file size check (2MB limit)\n    if (file.size > 2 * 1024 * 1024) {\n      toast({\n        title: \"Error\",\n        description: \"File size must be less than 2MB\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Convert to base64\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const avatar = e.target?.result as string;\n      \n      setSaving(true);\n      try {\n        const response = await fetch('/api/profile/avatar', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          body: JSON.stringify({ avatar })\n        });\n        \n        if (response.ok) {\n          const result = await response.json();\n          setProfile(prev => prev ? { ...prev, avatar: result.avatar } : null);\n          toast({\n            title: \"Success\",\n            description: \"Avatar updated successfully\"\n          });\n        } else {\n          const error = await response.json();\n          toast({\n            title: \"Error\",\n            description: error.message || \"Failed to upload avatar\",\n            variant: \"destructive\"\n          });\n        }\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to upload avatar\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setSaving(false);\n      }\n    };\n    reader.readAsDataURL(file);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#1800ad] mx-auto mb-4\"></div>\n            <p className=\"text-gray-400\">Loading profile...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-white mb-4\">Profile Not Found</h1>\n          <p className=\"text-gray-400\">Unable to load your profile.</p>\n          <Button \n            onClick={() => setLocation('/dashboard')} \n            className=\"mt-4\"\n          >\n            Return to Dashboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">Profile Settings</h1>\n          <p className=\"text-gray-400\">Manage your account settings and preferences</p>\n        </div>\n\n        <Tabs defaultValue=\"profile\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 bg-gray-800/50\">\n            <TabsTrigger value=\"profile\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              Profile\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n              <Lock className=\"h-4 w-4\" />\n              Security\n            </TabsTrigger>\n            <TabsTrigger value=\"account\" className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Account\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"profile\">\n            <Card className=\"bg-gray-900/50 border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Profile Information</CardTitle>\n                <CardDescription>\n                  Update your personal information and profile picture\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Avatar Section */}\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar className=\"h-20 w-20\">\n                    <AvatarImage src={profile.avatar || undefined} />\n                    <AvatarFallback className=\"bg-[#1800ad] text-white text-lg\">\n                      {profile.firstName?.[0] || profile.username[0]?.toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <Label htmlFor=\"avatar-upload\" className=\"cursor-pointer\">\n                      <Button variant=\"outline\" className=\"flex items-center gap-2\" asChild>\n                        <span>\n                          <Upload className=\"h-4 w-4\" />\n                          Upload Avatar\n                        </span>\n                      </Button>\n                    </Label>\n                    <Input\n                      id=\"avatar-upload\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={uploadAvatar}\n                      className=\"hidden\"\n                    />\n                    <p className=\"text-sm text-gray-400 mt-1\">JPG, PNG or GIF (max 2MB)</p>\n                  </div>\n                </div>\n\n                {/* Profile Form */}\n                <div className=\"grid gap-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={profileForm.firstName}\n                      onChange={(e) => setProfileForm(prev => ({ ...prev, firstName: e.target.value }))}\n                      placeholder=\"Enter your first name\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={profileForm.lastName}\n                      onChange={(e) => setProfileForm(prev => ({ ...prev, lastName: e.target.value }))}\n                      placeholder=\"Enter your last name\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileForm.email}\n                      onChange={(e) => setProfileForm(prev => ({ ...prev, email: e.target.value }))}\n                      placeholder=\"Enter your email address\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      value={profile.username}\n                      disabled\n                      className=\"opacity-60\"\n                    />\n                    <p className=\"text-sm text-gray-400\">Username cannot be changed</p>\n                  </div>\n                </div>\n\n                <Button \n                  onClick={updateProfile} \n                  disabled={saving}\n                  className=\"bg-[#1800ad] hover:bg-[#1400a3] text-white\"\n                >\n                  {saving ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"security\">\n            <Card className=\"bg-gray-900/50 border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Change Password</CardTitle>\n                <CardDescription>\n                  Update your password to keep your account secure\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"currentPassword\">Current Password</Label>\n                  <Input\n                    id=\"currentPassword\"\n                    type=\"password\"\n                    value={passwordForm.currentPassword}\n                    onChange={(e) => setPasswordForm(prev => ({ ...prev, currentPassword: e.target.value }))}\n                    placeholder=\"Enter your current password\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"newPassword\">New Password</Label>\n                  <Input\n                    id=\"newPassword\"\n                    type=\"password\"\n                    value={passwordForm.newPassword}\n                    onChange={(e) => setPasswordForm(prev => ({ ...prev, newPassword: e.target.value }))}\n                    placeholder=\"Enter your new password\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    value={passwordForm.confirmPassword}\n                    onChange={(e) => setPasswordForm(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                    placeholder=\"Confirm your new password\"\n                  />\n                </div>\n\n                <Button \n                  onClick={changePassword} \n                  disabled={saving || !passwordForm.currentPassword || !passwordForm.newPassword}\n                  className=\"bg-[#1800ad] hover:bg-[#1400a3] text-white\"\n                >\n                  {saving ? 'Changing...' : 'Change Password'}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"account\">\n            <Card className=\"bg-gray-900/50 border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Account Information</CardTitle>\n                <CardDescription>\n                  View your account details and manage account settings\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid gap-4\">\n                  <div>\n                    <Label className=\"text-white\">Account Status</Label>\n                    <p className=\"text-green-500 mt-1\">\n                      {profile.isActive ? 'Active' : 'Inactive'}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Email Verified</Label>\n                    <p className={`mt-1 ${profile.emailVerified ? 'text-green-500' : 'text-yellow-500'}`}>\n                      {profile.emailVerified ? 'Verified' : 'Unverified'}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Member Since</Label>\n                    <p className=\"text-gray-400 mt-1\">\n                      {new Date(profile.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Last Login</Label>\n                    <p className=\"text-gray-400 mt-1\">\n                      {profile.lastLogin ? new Date(profile.lastLogin).toLocaleDateString() : 'Never'}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"border-t border-gray-800 pt-6\">\n                  <h3 className=\"text-lg font-semibold text-red-500 mb-4\">Danger Zone</h3>\n                  <Card className=\"bg-red-950/20 border-red-800/50\">\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"text-white font-medium\">Delete Account</h4>\n                          <p className=\"text-gray-400 text-sm mt-1\">\n                            Permanently delete your account and all associated data\n                          </p>\n                        </div>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" className=\"flex items-center gap-2\">\n                              <Trash2 className=\"h-4 w-4\" />\n                              Delete Account\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent className=\"bg-gray-900 border-gray-800\">\n                            <AlertDialogHeader>\n                              <AlertDialogTitle className=\"text-white\">Delete Account</AlertDialogTitle>\n                              <AlertDialogDescription className=\"text-gray-400\">\n                                This action cannot be undone. This will permanently delete your account,\n                                order history, and all associated data.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <div className=\"grid gap-2 my-4\">\n                              <Label htmlFor=\"deletePassword\" className=\"text-white\">\n                                Enter your password to confirm deletion\n                              </Label>\n                              <Input\n                                id=\"deletePassword\"\n                                type=\"password\"\n                                value={deleteForm.password}\n                                onChange={(e) => setDeleteForm(prev => ({ ...prev, password: e.target.value }))}\n                                placeholder=\"Enter your password\"\n                              />\n                            </div>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel className=\"bg-gray-800 text-white border-gray-700 hover:bg-gray-700\">\n                                Cancel\n                              </AlertDialogCancel>\n                              <AlertDialogAction \n                                onClick={deleteAccount}\n                                disabled={!deleteForm.password || saving}\n                                className=\"bg-red-600 hover:bg-red-700 text-white\"\n                              >\n                                {saving ? 'Deleting...' : 'Delete Account'}\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":20713},"client/src/components/product-reviews.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Star, ThumbsUp, User, Verified, Edit, Trash2, Upload, X, Image as ImageIcon } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface ProductReview {\n  id: string;\n  productId: string;\n  userId: string;\n  rating: number;\n  title?: string;\n  comment?: string;\n  images?: string; // JSON string array of image URLs/base64\n  isVerifiedPurchase: boolean;\n  helpfulCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ProductReviewsProps {\n  productId: string;\n  currentUserId?: string;\n  onReviewAdded?: () => void;\n}\n\ninterface ReviewFormData {\n  rating: number;\n  title: string;\n  comment: string;\n  images: string[]; // Array of base64 image data\n}\n\n// Star Rating Component\nconst StarRating = ({ \n  rating, \n  editable = false, \n  onRatingChange,\n  size = 'md' \n}: { \n  rating: number;\n  editable?: boolean;\n  onRatingChange?: (rating: number) => void;\n  size?: 'sm' | 'md' | 'lg';\n}) => {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-5 h-5',\n    lg: 'w-6 h-6'\n  };\n\n  return (\n    <div className=\"flex space-x-1\">\n      {[1, 2, 3, 4, 5].map((star) => (\n        <Star\n          key={star}\n          className={`${sizeClasses[size]} ${\n            star <= rating \n              ? 'fill-yellow-400 text-yellow-400' \n              : 'text-gray-300'\n          } ${editable ? 'cursor-pointer hover:text-yellow-400' : ''}`}\n          onClick={() => editable && onRatingChange && onRatingChange(star)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default function ProductReviews({ productId, currentUserId, onReviewAdded }: ProductReviewsProps) {\n  const [reviews, setReviews] = useState<ProductReview[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [hasUserReviewed, setHasUserReviewed] = useState(false);\n  const [formData, setFormData] = useState<ReviewFormData>({\n    rating: 5,\n    title: '',\n    comment: '',\n    images: []\n  });\n  const [uploadingImages, setUploadingImages] = useState(false);\n  const [editingReview, setEditingReview] = useState<ProductReview | null>(null);\n  const [deletingReview, setDeletingReview] = useState<string | null>(null);\n\n  // Fetch reviews\n  const fetchReviews = async () => {\n    try {\n      const response = await fetch(`/api/products/${productId}/reviews`);\n      if (response.ok) {\n        const data = await response.json();\n        setReviews(data);\n        \n        // Check if current user has reviewed\n        if (currentUserId) {\n          const userReview = data.find((review: ProductReview) => review.userId === currentUserId);\n          setHasUserReviewed(!!userReview);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to fetch reviews:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchReviews();\n  }, [productId, currentUserId]);\n\n  // Submit review (create or update)\n  const handleSubmitReview = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!currentUserId) return;\n\n    setSubmitting(true);\n    try {\n      let response;\n      if (editingReview) {\n        // Update existing review\n        response = await fetch(`/api/reviews/${editingReview.id}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ...formData,\n            images: formData.images.length > 0 ? JSON.stringify(formData.images) : undefined\n          }),\n        });\n      } else {\n        // Create new review\n        response = await fetch(`/api/products/${productId}/reviews`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ...formData,\n            images: formData.images.length > 0 ? JSON.stringify(formData.images) : undefined\n          }),\n        });\n      }\n\n      if (response.ok) {\n        setShowForm(false);\n        setEditingReview(null);\n        setFormData({ rating: 5, title: '', comment: '', images: [] });\n        fetchReviews();\n        onReviewAdded?.();\n      } else {\n        const error = await response.json();\n        alert(error.message || `Failed to ${editingReview ? 'update' : 'submit'} review`);\n      }\n    } catch (error) {\n      console.error(`Failed to ${editingReview ? 'update' : 'submit'} review:`, error);\n      alert(`Failed to ${editingReview ? 'update' : 'submit'} review`);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Mark review as helpful\n  const handleMarkHelpful = async (reviewId: string) => {\n    try {\n      const response = await fetch(`/api/reviews/${reviewId}/helpful`, {\n        method: 'POST',\n      });\n      \n      if (response.ok) {\n        fetchReviews(); // Refresh to show updated helpful count\n      }\n    } catch (error) {\n      console.error('Failed to mark review as helpful:', error);\n    }\n  };\n\n  // Edit review\n  const handleEditReview = (review: ProductReview) => {\n    setEditingReview(review);\n    setFormData({\n      rating: review.rating,\n      title: review.title || '',\n      comment: review.comment || '',\n      images: review.images ? JSON.parse(review.images) : []\n    });\n    setShowForm(true);\n  };\n\n  // Delete review\n  const handleDeleteReview = async (reviewId: string) => {\n    setDeletingReview(reviewId);\n    try {\n      const response = await fetch(`/api/reviews/${reviewId}`, {\n        method: 'DELETE',\n      });\n      \n      if (response.ok) {\n        fetchReviews();\n        onReviewAdded?.(); // Refresh product data\n      } else {\n        const error = await response.json();\n        alert(error.message || 'Failed to delete review');\n      }\n    } catch (error) {\n      console.error('Failed to delete review:', error);\n      alert('Failed to delete review');\n    } finally {\n      setDeletingReview(null);\n    }\n  };\n\n  // Cancel editing\n  const handleCancelEdit = () => {\n    setEditingReview(null);\n    setShowForm(false);\n    setFormData({ rating: 5, title: '', comment: '', images: [] });\n  };\n\n  // Image upload handling\n  const handleImageUpload = async (files: FileList) => {\n    if (!files || files.length === 0) return;\n    \n    // Limit to 3 images per review\n    const maxImages = 3;\n    const currentCount = formData.images.length;\n    const remainingSlots = maxImages - currentCount;\n    \n    if (remainingSlots <= 0) {\n      alert(`Maximum ${maxImages} images allowed per review`);\n      return;\n    }\n\n    setUploadingImages(true);\n    \n    try {\n      const newImages: string[] = [];\n      const filesToProcess = Array.from(files).slice(0, remainingSlots);\n      \n      for (const file of filesToProcess) {\n        // Validate file type\n        if (!file.type.startsWith('image/')) {\n          alert('Please select only image files');\n          continue;\n        }\n        \n        // Validate file size (max 5MB)\n        if (file.size > 5 * 1024 * 1024) {\n          alert('Image size must be less than 5MB');\n          continue;\n        }\n        \n        // Convert to base64\n        const base64 = await new Promise<string>((resolve) => {\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result as string);\n          reader.readAsDataURL(file);\n        });\n        \n        newImages.push(base64);\n      }\n      \n      setFormData(prev => ({\n        ...prev,\n        images: [...prev.images, ...newImages]\n      }));\n      \n    } catch (error) {\n      console.error('Error uploading images:', error);\n      alert('Failed to upload images');\n    } finally {\n      setUploadingImages(false);\n    }\n  };\n\n  const removeImage = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index)\n    }));\n  };\n\n  // Parse review images for display\n  const parseReviewImages = (images?: string): string[] => {\n    if (!images) return [];\n    try {\n      return JSON.parse(images);\n    } catch {\n      return [];\n    }\n  };\n\n  // Calculate average rating\n  const averageRating = reviews.length > 0 \n    ? reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length\n    : 0;\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"animate-pulse bg-muted h-32 rounded\"></div>\n        <div className=\"animate-pulse bg-muted h-24 rounded\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Reviews Summary */}\n      <div className=\"border-b border-border pb-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-xl font-semibold\">Customer Reviews</h3>\n          {currentUserId && !hasUserReviewed && (\n            <Button\n              onClick={() => setShowForm(!showForm)}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Write a Review\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <StarRating rating={Math.round(averageRating)} size=\"lg\" />\n            <span className=\"text-2xl font-bold\">{averageRating.toFixed(1)}</span>\n          </div>\n          <span className=\"text-muted-foreground\">\n            ({reviews.length} review{reviews.length !== 1 ? 's' : ''})\n          </span>\n        </div>\n      </div>\n\n      {/* Review Form */}\n      {showForm && currentUserId && (\n        <Card>\n          <CardHeader>\n            <CardTitle>{editingReview ? 'Edit Your Review' : 'Write Your Review'}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmitReview} className=\"space-y-4\">\n              <div>\n                <Label>Rating</Label>\n                <div className=\"mt-1\">\n                  <StarRating\n                    rating={formData.rating}\n                    editable\n                    onRatingChange={(rating) => setFormData({...formData, rating})}\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"title\">Review Title (Optional)</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({...formData, title: e.target.value})}\n                  placeholder=\"Summarize your experience\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"comment\">Your Review (Optional)</Label>\n                <Textarea\n                  id=\"comment\"\n                  value={formData.comment}\n                  onChange={(e) => setFormData({...formData, comment: e.target.value})}\n                  placeholder=\"Tell others about your experience with this product\"\n                  rows={4}\n                />\n              </div>\n\n              {/* Image Upload Section */}\n              <div>\n                <Label>Photos (Optional)</Label>\n                <div className=\"mt-2 space-y-3\">\n                  {/* Image Preview Grid */}\n                  {formData.images.length > 0 && (\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      {formData.images.map((image, index) => (\n                        <div key={index} className=\"relative group\">\n                          <img\n                            src={image}\n                            alt={`Review image ${index + 1}`}\n                            className=\"w-full h-20 object-cover rounded-lg border\"\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => removeImage(index)}\n                            className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs opacity-0 group-hover:opacity-100 transition-opacity\"\n                          >\n                            <X className=\"w-3 h-3\" />\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Upload Button */}\n                  {formData.images.length < 3 && (\n                    <div className=\"border-2 border-dashed border-muted rounded-lg p-4\">\n                      <input\n                        type=\"file\"\n                        id=\"image-upload\"\n                        multiple\n                        accept=\"image/*\"\n                        onChange={(e) => e.target.files && handleImageUpload(e.target.files)}\n                        className=\"hidden\"\n                        disabled={uploadingImages}\n                      />\n                      <label\n                        htmlFor=\"image-upload\"\n                        className=\"flex flex-col items-center justify-center cursor-pointer text-muted-foreground hover:text-foreground transition-colors\"\n                      >\n                        <Upload className=\"w-8 h-8 mb-2\" />\n                        <span className=\"text-sm font-medium\">\n                          {uploadingImages ? 'Uploading...' : 'Upload Photos'}\n                        </span>\n                        <span className=\"text-xs mt-1\">\n                          Add up to {3 - formData.images.length} more photos (max 5MB each)\n                        </span>\n                      </label>\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                <Button type=\"submit\" disabled={submitting}>\n                  {submitting ? (editingReview ? 'Updating...' : 'Submitting...') : (editingReview ? 'Update Review' : 'Submit Review')}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={editingReview ? handleCancelEdit : () => setShowForm(false)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Reviews List */}\n      <div className=\"space-y-4\">\n        {reviews.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Star className=\"w-12 h-12 mx-auto mb-2 text-muted-foreground/50\" />\n            <p>No reviews yet. Be the first to review this product!</p>\n          </div>\n        ) : (\n          reviews.map((review) => (\n            <Card key={review.id}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-muted rounded-full p-2\">\n                      <User className=\"w-4 h-4\" />\n                    </div>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium\">Anonymous User</span>\n                        {review.isVerifiedPurchase && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            <Verified className=\"w-3 h-3 mr-1\" />\n                            Verified Purchase\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <StarRating rating={review.rating} size=\"sm\" />\n                        <span className=\"text-sm text-muted-foreground\">\n                          {format(new Date(review.createdAt), 'MMM dd, yyyy')}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {review.title && (\n                  <h4 className=\"font-medium mb-2\">{review.title}</h4>\n                )}\n                \n                {review.comment && (\n                  <p className=\"text-muted-foreground mb-3\">{review.comment}</p>\n                )}\n\n                {/* Review Images */}\n                {(() => {\n                  const reviewImages = parseReviewImages(review.images);\n                  return reviewImages.length > 0 && (\n                    <div className=\"mb-4\">\n                      <div className=\"grid grid-cols-3 gap-2 max-w-md\">\n                        {reviewImages.map((image, index) => (\n                          <div key={index} className=\"group cursor-pointer\">\n                            <img\n                              src={image}\n                              alt={`Review image ${index + 1}`}\n                              className=\"w-full h-20 object-cover rounded-lg border hover:shadow-md transition-shadow\"\n                              onClick={() => {\n                                // Create modal overlay for full-size image view\n                                const modal = document.createElement('div');\n                                modal.className = 'fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 cursor-pointer';\n                                modal.innerHTML = `\n                                  <img src=\"${image}\" alt=\"Review image ${index + 1}\" class=\"max-w-full max-h-full object-contain\" />\n                                  <button class=\"absolute top-4 right-4 text-white text-2xl font-bold hover:text-gray-300\">&times;</button>\n                                `;\n                                modal.onclick = () => document.body.removeChild(modal);\n                                document.body.appendChild(modal);\n                              }}\n                            />\n                          </div>\n                        ))}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-2 flex items-center\">\n                        <ImageIcon className=\"w-3 h-3 mr-1\" />\n                        {reviewImages.length} photo{reviewImages.length !== 1 ? 's' : ''} from customer\n                      </p>\n                    </div>\n                  );\n                })()}\n                \n                <div className=\"flex items-center justify-between\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleMarkHelpful(review.id)}\n                    className=\"text-muted-foreground hover:text-foreground\"\n                  >\n                    <ThumbsUp className=\"w-4 h-4 mr-1\" />\n                    Helpful ({review.helpfulCount})\n                  </Button>\n                  \n                  {/* Review Management Buttons for Owner */}\n                  {currentUserId === review.userId && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEditReview(review)}\n                        className=\"text-muted-foreground hover:text-foreground\"\n                      >\n                        <Edit className=\"w-4 h-4 mr-1\" />\n                        Edit\n                      </Button>\n                      \n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-muted-foreground hover:text-red-600\"\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Review</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete this review? This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDeleteReview(review.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                              disabled={deletingReview === review.id}\n                            >\n                              {deletingReview === review.id ? 'Deleting...' : 'Delete'}\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":21658},"client/src/pages/product-detail.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useRoute, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { ArrowLeft, Package, Check, X, ShoppingCart, Star } from 'lucide-react';\nimport ProductReviews from '@/components/product-reviews';\nimport { useAuth } from '@/hooks/use-auth';\nimport type { Product } from '@shared/schema';\n\nexport default function ProductDetail() {\n  const [, params] = useRoute('/product/:id');\n  const [, setLocation] = useLocation();\n  const [product, setProduct] = useState<Product | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n\n  const productId = params?.id;\n\n  useEffect(() => {\n    if (!productId) return;\n\n    const fetchProduct = async () => {\n      try {\n        const response = await fetch(`/api/products/${productId}`);\n        if (response.ok) {\n          const data = await response.json();\n          setProduct(data);\n        } else {\n          console.error('Product not found');\n        }\n      } catch (error) {\n        console.error('Failed to fetch product:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProduct();\n  }, [productId]);\n\n  const handleCheckout = () => {\n    if (!product) return;\n    const productData = encodeURIComponent(JSON.stringify(product));\n    setLocation(`/checkout/${productData}`);\n  };\n\n  const handleBack = () => {\n    setLocation('/products');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-48\"></div>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div className=\"h-96 bg-muted rounded\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-8 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                <div className=\"h-20 bg-muted rounded\"></div>\n                <div className=\"h-12 bg-muted rounded w-32\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-6xl mx-auto text-center py-20\">\n          <Package className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n          <h1 className=\"text-2xl font-bold mb-2\">Product Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">The product you're looking for doesn't exist.</p>\n          <Button onClick={handleBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Products\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const isInStock = product.inStock && product.stockQuantity > 0;\n  const hasDiscount = product.originalPrice && parseFloat(product.originalPrice) > parseFloat(product.price);\n  const discountPercent = hasDiscount \n    ? Math.round(((parseFloat(product.originalPrice!) - parseFloat(product.price)) / parseFloat(product.originalPrice!)) * 100)\n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Back Button */}\n        <Button \n          variant=\"ghost\" \n          onClick={handleBack}\n          className=\"mb-6 hover:bg-muted\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Products\n        </Button>\n\n        {/* Product Header */}\n        <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n          {/* Product Image */}\n          <div className=\"bg-muted/20 rounded-lg p-8 flex items-center justify-center border border-border\">\n            {product.imageUrl ? (\n              <img \n                src={product.imageUrl} \n                alt={product.name}\n                className=\"max-w-full h-auto rounded-lg object-cover\"\n                style={{ maxHeight: '400px' }}\n              />\n            ) : (\n              <Package className=\"w-32 h-32 text-muted-foreground\" />\n            )}\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex items-start justify-between mb-2\">\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"default\">{product.category}</Badge>\n                  <Badge variant=\"outline\">{product.game}</Badge>\n                  {hasDiscount && (\n                    <Badge className=\"bg-purple-600 text-white\">\n                      -{discountPercent}% OFF\n                    </Badge>\n                  )}\n                </div>\n                <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs ${\n                  isInStock ? 'bg-green-600 text-white' : 'bg-red-600 text-white'\n                }`}>\n                  {isInStock ? (\n                    <>\n                      <Check className=\"w-3 h-3\" />\n                      <span>{product.stockQuantity > 1 ? `${product.stockQuantity} In Stock` : 'In Stock'}</span>\n                    </>\n                  ) : (\n                    <>\n                      <X className=\"w-3 h-3\" />\n                      <span>Out of Stock</span>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              <h1 className=\"text-3xl font-bold mb-4\">{product.name}</h1>\n\n              {/* Rating */}\n              {((product.averageRating ?? 0) > 0 && (product.reviewCount ?? 0) > 0) && (\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <div className=\"flex items-center\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <Star\n                        key={star}\n                        className={`w-5 h-5 ${\n                          star <= (product.averageRating || 0)\n                            ? 'fill-yellow-400 text-yellow-400'\n                            : 'text-gray-300'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-lg font-medium\">{product.averageRating?.toFixed(1)}</span>\n                  <span className=\"text-muted-foreground\">({product.reviewCount} reviews)</span>\n                </div>\n              )}\n\n              {/* Price */}\n              <div className=\"flex items-baseline space-x-2 mb-6\">\n                <span className=\"text-3xl font-bold text-primary\">\n                  ${product.price}\n                </span>\n                {hasDiscount && (\n                  <span className=\"text-xl text-muted-foreground line-through\">\n                    ${product.originalPrice}\n                  </span>\n                )}\n              </div>\n\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                {product.description}\n              </p>\n            </div>\n\n            {/* Purchase Button */}\n            <div className=\"space-y-3\">\n              <Button\n                size=\"lg\"\n                className={`w-full ${\n                  isInStock\n                    ? 'bg-primary text-primary-foreground hover:bg-primary/90'\n                    : 'bg-muted text-muted-foreground cursor-not-allowed'\n                }`}\n                disabled={!isInStock}\n                onClick={handleCheckout}\n              >\n                <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                {isInStock ? `Buy Now - $${product.price}` : 'Out of Stock'}\n              </Button>\n\n              {/* Delivery Info */}\n              <div className=\"text-sm text-muted-foreground space-y-1\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Delivery Type:</span>\n                  <span className=\"capitalize\">{product.deliveryType}</span>\n                </div>\n                {product.deliveryType === 'download' && (\n                  <div className=\"flex items-center justify-between\">\n                    <span>Instant Download:</span>\n                    <span className=\"text-green-600\">Available after purchase</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Separator className=\"my-8\" />\n\n        {/* Product Reviews */}\n        <div className=\"mb-8\">\n          <ProductReviews \n            productId={product.id} \n            currentUserId={user?.id}\n            onReviewAdded={() => {\n              // Refresh product data to update rating\n              window.location.reload();\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8855},"client/src/components/advanced-search.tsx":{"content":"import React, { useState, useEffect, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Search, Filter, X, ChevronDown, SlidersHorizontal } from \"lucide-react\";\nimport { Product } from \"@shared/schema\";\n\ninterface AdvancedSearchProps {\n  onResults: (products: Product[]) => void;\n  className?: string;\n}\n\ninterface SearchFilters {\n  categories: string[];\n  games: string[];\n  priceRange: { min: number; max: number };\n  inStock?: boolean;\n  sortBy: 'price' | 'rating' | 'newest';\n  sortOrder: 'asc' | 'desc';\n}\n\nconst CATEGORIES = [\n  'Cheats', 'DMA Hardware', 'Spoofer', 'External Tools', 'Private Tools'\n];\n\nconst GAMES = [\n  'Apex Legends', 'Fortnite', 'Rust', 'Call of Duty', 'PUBG', 'Counter-Strike', 'Valorant'\n];\n\nexport default function AdvancedSearch({ onResults, className = \"\" }: AdvancedSearchProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [filters, setFilters] = useState<SearchFilters>({\n    categories: [],\n    games: [],\n    priceRange: { min: 0, max: 500 },\n    inStock: undefined,\n    sortBy: 'newest',\n    sortOrder: 'desc'\n  });\n\n  // Get all products to determine actual price range\n  const { data: allProducts = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const maxPrice = useMemo(() => {\n    if (allProducts.length === 0) return 500;\n    return Math.max(...allProducts.map(p => parseFloat(p.price)));\n  }, [allProducts]);\n\n  // Debounced search\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (searchQuery || filters.categories.length > 0 || filters.games.length > 0 || filters.inStock !== undefined) {\n        handleSearch();\n      } else {\n        onResults(allProducts);\n      }\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [searchQuery, filters, allProducts]);\n\n  const handleSearch = async () => {\n    setIsSearching(true);\n    try {\n      const response = await fetch('/api/products/search/advanced', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: searchQuery,\n          filters: {\n            categories: filters.categories.length > 0 ? filters.categories : undefined,\n            games: filters.games.length > 0 ? filters.games : undefined,\n            priceRange: filters.priceRange.min > 0 || filters.priceRange.max < maxPrice ? filters.priceRange : undefined,\n            inStock: filters.inStock,\n            sortBy: filters.sortBy,\n            sortOrder: filters.sortOrder\n          }\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Search failed');\n      }\n\n      const results = await response.json();\n      onResults(results);\n    } catch (error) {\n      console.error('Search error:', error);\n      onResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const updateFilter = (key: keyof SearchFilters, value: any) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  const toggleCategory = (category: string) => {\n    const newCategories = filters.categories.includes(category)\n      ? filters.categories.filter(c => c !== category)\n      : [...filters.categories, category];\n    updateFilter('categories', newCategories);\n  };\n\n  const toggleGame = (game: string) => {\n    const newGames = filters.games.includes(game)\n      ? filters.games.filter(g => g !== game)\n      : [...filters.games, game];\n    updateFilter('games', newGames);\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      categories: [],\n      games: [],\n      priceRange: { min: 0, max: maxPrice },\n      inStock: undefined,\n      sortBy: 'newest',\n      sortOrder: 'desc'\n    });\n  };\n\n  const hasActiveFilters = filters.categories.length > 0 || \n                          filters.games.length > 0 || \n                          filters.priceRange.min > 0 || \n                          filters.priceRange.max < maxPrice ||\n                          filters.inStock !== undefined;\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Main Search Bar */}\n      <div className=\"relative\">\n        <div className=\"flex gap-2\">\n          <div className=\"relative flex-1\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search products, games, categories...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 bg-input text-foreground border border-border focus:border-primary search-glow transition-all duration-300\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            {isSearching && (\n              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n              </div>\n            )}\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowFilters(!showFilters)}\n            className={`px-4 ${hasActiveFilters ? 'border-primary bg-primary/10' : ''}`}\n          >\n            <SlidersHorizontal className=\"w-4 h-4 mr-2\" />\n            Filters\n            {hasActiveFilters && (\n              <Badge variant=\"secondary\" className=\"ml-2 px-1 py-0 text-xs\">\n                {filters.categories.length + filters.games.length + (filters.inStock !== undefined ? 1 : 0)}\n              </Badge>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Advanced Filters */}\n      <Collapsible open={showFilters} onOpenChange={setShowFilters}>\n        <CollapsibleContent>\n          <Card>\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center justify-between text-lg\">\n                <span>Advanced Filters</span>\n                <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters} disabled={!hasActiveFilters}>\n                  <X className=\"w-4 h-4 mr-1\" />\n                  Clear All\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Sorting */}\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <label className=\"text-sm font-medium mb-2 block\">Sort By</label>\n                  <Select value={filters.sortBy} onValueChange={(value: any) => updateFilter('sortBy', value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"newest\">Newest</SelectItem>\n                      <SelectItem value=\"price\">Price</SelectItem>\n                      <SelectItem value=\"rating\">Rating</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex-1\">\n                  <label className=\"text-sm font-medium mb-2 block\">Order</label>\n                  <Select value={filters.sortOrder} onValueChange={(value: any) => updateFilter('sortOrder', value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"desc\">High to Low</SelectItem>\n                      <SelectItem value=\"asc\">Low to High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Price Range */}\n              <div>\n                <label className=\"text-sm font-medium mb-4 block\">\n                  Price Range: ${filters.priceRange.min} - ${filters.priceRange.max}\n                </label>\n                <Slider\n                  min={0}\n                  max={maxPrice}\n                  step={10}\n                  value={[filters.priceRange.min, filters.priceRange.max]}\n                  onValueChange={([min, max]) => updateFilter('priceRange', { min, max })}\n                  className=\"w-full\"\n                />\n              </div>\n\n              {/* Stock Status */}\n              <div>\n                <label className=\"text-sm font-medium mb-3 block\">Stock Status</label>\n                <div className=\"flex gap-4\">\n                  <Button\n                    variant={filters.inStock === true ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => updateFilter('inStock', filters.inStock === true ? undefined : true)}\n                  >\n                    In Stock Only\n                  </Button>\n                  <Button\n                    variant={filters.inStock === false ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => updateFilter('inStock', filters.inStock === false ? undefined : false)}\n                  >\n                    Out of Stock\n                  </Button>\n                </div>\n              </div>\n\n              {/* Categories */}\n              <div>\n                <label className=\"text-sm font-medium mb-3 block\">Categories</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {CATEGORIES.map(category => (\n                    <Button\n                      key={category}\n                      variant={filters.categories.includes(category) ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => toggleCategory(category)}\n                      className=\"text-xs\"\n                    >\n                      {category}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Games */}\n              <div>\n                <label className=\"text-sm font-medium mb-3 block\">Games</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {GAMES.map(game => (\n                    <Button\n                      key={game}\n                      variant={filters.games.includes(game) ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => toggleGame(game)}\n                      className=\"text-xs\"\n                    >\n                      {game}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </CollapsibleContent>\n      </Collapsible>\n\n      {/* Active Filter Tags */}\n      {hasActiveFilters && (\n        <div className=\"flex flex-wrap gap-2\">\n          {filters.categories.map(category => (\n            <Badge key={`cat-${category}`} variant=\"secondary\" className=\"px-2 py-1\">\n              {category}\n              <button\n                onClick={() => toggleCategory(category)}\n                className=\"ml-2 hover:text-destructive\"\n              >\n                <X className=\"w-3 h-3\" />\n              </button>\n            </Badge>\n          ))}\n          {filters.games.map(game => (\n            <Badge key={`game-${game}`} variant=\"secondary\" className=\"px-2 py-1\">\n              {game}\n              <button\n                onClick={() => toggleGame(game)}\n                className=\"ml-2 hover:text-destructive\"\n              >\n                <X className=\"w-3 h-3\" />\n              </button>\n            </Badge>\n          ))}\n          {filters.inStock !== undefined && (\n            <Badge variant=\"secondary\" className=\"px-2 py-1\">\n              {filters.inStock ? 'In Stock' : 'Out of Stock'}\n              <button\n                onClick={() => updateFilter('inStock', undefined)}\n                className=\"ml-2 hover:text-destructive\"\n              >\n                <X className=\"w-3 h-3\" />\n              </button>\n            </Badge>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12479},"client/src/components/product-recommendations.tsx":{"content":"import React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Product } from \"@shared/schema\";\nimport ProductCard from \"@/components/product-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Star, TrendingUp, Eye, Zap } from \"lucide-react\";\n\ninterface ProductRecommendationsProps {\n  userId?: string;\n  productId?: string;\n  limit?: number;\n  title?: string;\n  className?: string;\n  variant?: 'similar' | 'personalized' | 'trending' | 'recently-viewed';\n}\n\nexport default function ProductRecommendations({\n  userId,\n  productId,\n  limit = 5,\n  title,\n  className = \"\",\n  variant = 'similar'\n}: ProductRecommendationsProps) {\n  const { data: recommendations = [], isLoading, error } = useQuery<Product[]>({\n    queryKey: ['/api/products/recommendations', userId, productId, limit],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (productId) params.append('productId', productId);\n      if (limit) params.append('limit', limit.toString());\n\n      const response = await fetch(`/api/products/recommendations?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch recommendations');\n      }\n      return response.json();\n    },\n    enabled: true,\n  });\n\n  // Don't render if no recommendations\n  if (!isLoading && recommendations.length === 0) {\n    return null;\n  }\n\n  const getDefaultTitle = () => {\n    switch (variant) {\n      case 'similar':\n        return productId ? 'Similar Products' : 'Recommended for You';\n      case 'personalized':\n        return 'Recommended for You';\n      case 'trending':\n        return 'Trending Now';\n      case 'recently-viewed':\n        return 'Recently Viewed';\n      default:\n        return 'You Might Also Like';\n    }\n  };\n\n  const getIcon = () => {\n    switch (variant) {\n      case 'similar':\n        return <Star className=\"w-5 h-5\" />;\n      case 'personalized':\n        return <Zap className=\"w-5 h-5\" />;\n      case 'trending':\n        return <TrendingUp className=\"w-5 h-5\" />;\n      case 'recently-viewed':\n        return <Eye className=\"w-5 h-5\" />;\n      default:\n        return <Star className=\"w-5 h-5\" />;\n    }\n  };\n\n  return (\n    <div className={`w-full ${className}`}>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-xl\">\n            {getIcon()}\n            {title || getDefaultTitle()}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n              {Array.from({ length: limit }).map((_, i) => (\n                <div key={i} className=\"space-y-3\">\n                  <Skeleton className=\"h-48 w-full rounded-lg\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                  <Skeleton className=\"h-6 w-1/3\" />\n                </div>\n              ))}\n            </div>\n          ) : error ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              <p>Unable to load recommendations</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n              {recommendations.map((product) => (\n                <ProductCard\n                  key={product.id}\n                  product={product}\n                  className=\"h-full\"\n                />\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Recently Viewed Products Component\ninterface RecentlyViewedProps {\n  className?: string;\n  limit?: number;\n}\n\nexport function RecentlyViewed({ className = \"\", limit = 8 }: RecentlyViewedProps) {\n  const { data: recentlyViewed = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/recently-viewed'],\n    queryFn: async () => {\n      const response = await fetch('/api/recently-viewed', {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        // If user is not authenticated, return empty array\n        if (response.status === 401) {\n          return [];\n        }\n        throw new Error('Failed to fetch recently viewed');\n      }\n      return response.json();\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Don't render if no recently viewed products\n  if (!isLoading && recentlyViewed.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`w-full ${className}`}>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-xl\">\n            <Eye className=\"w-5 h-5\" />\n            Recently Viewed\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4\">\n              {Array.from({ length: limit }).map((_, i) => (\n                <div key={i} className=\"space-y-2\">\n                  <Skeleton className=\"h-32 w-full rounded-lg\" />\n                  <Skeleton className=\"h-3 w-full\" />\n                  <Skeleton className=\"h-4 w-2/3\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4\">\n              {recentlyViewed.slice(0, limit).map((product) => (\n                <div key={product.id} className=\"group\">\n                  <ProductCard\n                    product={product}\n                    className=\"h-full scale-90 group-hover:scale-95 transition-transform duration-200\"\n                    compact={true}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5880},"client/src/pages/faq.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Search, ChevronDown, MessageCircle, HelpCircle, Book, Settings, CreditCard, Shield } from \"lucide-react\";\nimport { FaqItem } from \"@shared/schema\";\n\nconst FAQ_CATEGORIES = [\n  { id: 'general', name: 'General', icon: HelpCircle },\n  { id: 'products', name: 'Products', icon: Book },\n  { id: 'payment', name: 'Payment', icon: CreditCard },\n  { id: 'technical', name: 'Technical', icon: Settings },\n  { id: 'security', name: 'Security', icon: Shield },\n  { id: 'support', name: 'Support', icon: MessageCircle }\n];\n\nexport default function FAQ() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [openItems, setOpenItems] = useState<Set<string>>(new Set());\n\n  const { data: faqItems = [], isLoading } = useQuery<FaqItem[]>({\n    queryKey: ['/api/faq', selectedCategory],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedCategory) {\n        params.append('category', selectedCategory);\n      }\n      \n      const response = await fetch(`/api/faq?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch FAQ items');\n      }\n      return response.json();\n    },\n  });\n\n  const filteredFaqItems = faqItems.filter(item =>\n    !searchQuery || \n    item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.answer.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const toggleItem = (itemId: string) => {\n    const newOpenItems = new Set(openItems);\n    if (newOpenItems.has(itemId)) {\n      newOpenItems.delete(itemId);\n    } else {\n      newOpenItems.add(itemId);\n    }\n    setOpenItems(newOpenItems);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"falling-dots\"></div>\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n            Frequently Asked Questions\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Find answers to common questions about our products, services, and support. \n            Can't find what you're looking for? Contact our 24/7 support team.\n          </p>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"max-w-2xl mx-auto mb-8\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search frequently asked questions...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-12 pr-4 py-3 text-lg bg-input border-border focus:border-primary\"\n            />\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n          </div>\n        </div>\n\n        {/* Category Filters */}\n        <div className=\"flex flex-wrap justify-center gap-3 mb-12\">\n          <Button\n            variant={selectedCategory === null ? \"default\" : \"outline\"}\n            onClick={() => setSelectedCategory(null)}\n            className=\"text-sm\"\n          >\n            All Categories\n          </Button>\n          {FAQ_CATEGORIES.map(category => {\n            const Icon = category.icon;\n            return (\n              <Button\n                key={category.id}\n                variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                onClick={() => setSelectedCategory(category.id)}\n                className=\"text-sm\"\n              >\n                <Icon className=\"w-4 h-4 mr-2\" />\n                {category.name}\n              </Button>\n            );\n          })}\n        </div>\n\n        {/* FAQ Items */}\n        <div className=\"max-w-4xl mx-auto\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"animate-pulse\">\n                      <div className=\"h-6 bg-muted rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-4 bg-muted rounded w-full\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredFaqItems.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <HelpCircle className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-2xl font-semibold text-foreground mb-2\">\n                {searchQuery ? 'No results found' : 'No FAQ items available'}\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {searchQuery \n                  ? `Try adjusting your search terms or browse different categories.`\n                  : 'FAQ items will appear here once they are added by our team.'\n                }\n              </p>\n              <Button \n                variant=\"outline\"\n                onClick={() => {\n                  setSearchQuery(\"\");\n                  setSelectedCategory(null);\n                }}\n              >\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredFaqItems.map((item) => (\n                <Card key={item.id} className=\"hover:border-primary/50 transition-colors\">\n                  <Collapsible\n                    open={openItems.has(item.id)}\n                    onOpenChange={() => toggleItem(item.id)}\n                  >\n                    <CollapsibleTrigger asChild>\n                      <CardHeader className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-start gap-3\">\n                            <div className=\"flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center mt-1\">\n                              <HelpCircle className=\"w-4 h-4 text-primary\" />\n                            </div>\n                            <div className=\"text-left\">\n                              <CardTitle className=\"text-lg font-semibold text-foreground\">\n                                {item.question}\n                              </CardTitle>\n                              {item.category && (\n                                <Badge variant=\"secondary\" className=\"mt-2\">\n                                  {FAQ_CATEGORIES.find(cat => cat.id === item.category)?.name || item.category}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                          <ChevronDown className={`w-5 h-5 text-muted-foreground transition-transform ${openItems.has(item.id) ? 'rotate-180' : ''}`} />\n                        </div>\n                      </CardHeader>\n                    </CollapsibleTrigger>\n                    <CollapsibleContent>\n                      <CardContent className=\"pt-0 pb-6\">\n                        <div className=\"ml-11 prose prose-sm max-w-none text-muted-foreground\">\n                          <div dangerouslySetInnerHTML={{ __html: item.answer }} />\n                        </div>\n                      </CardContent>\n                    </CollapsibleContent>\n                  </Collapsible>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Contact Support CTA */}\n        <div className=\"max-w-4xl mx-auto mt-16\">\n          <Card className=\"bg-gradient-to-r from-primary/10 via-primary/5 to-primary/10 border-primary/20\">\n            <CardContent className=\"p-8 text-center\">\n              <MessageCircle className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-2xl font-bold text-foreground mb-2\">\n                Still Need Help?\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Our expert support team is available 24/7 to help with any questions or issues.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button size=\"lg\" className=\"px-8\">\n                  Contact Support\n                </Button>\n                <Button variant=\"outline\" size=\"lg\" className=\"px-8\">\n                  Join Discord\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9174},"client/src/pages/wishlist.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport ProductCard from \"@/components/product-card\";\nimport ProductRecommendations from \"@/components/product-recommendations\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Heart, ShoppingCart, Trash2, Star, Filter } from \"lucide-react\";\nimport { Product } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\n\nexport default function Wishlist() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Get user's wishlist\n  const { data: wishlistProducts = [], isLoading, error } = useQuery<Product[]>({\n    queryKey: ['/api/wishlist'],\n    queryFn: async () => {\n      const response = await fetch('/api/wishlist');\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Please log in to view your wishlist');\n        }\n        throw new Error('Failed to fetch wishlist');\n      }\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Remove from wishlist mutation\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const response = await fetch(`/api/wishlist/${productId}`, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to remove from wishlist');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/wishlist'] });\n    },\n  });\n\n  const filteredProducts = wishlistProducts.filter(product =>\n    !searchQuery || \n    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.game.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const totalValue = wishlistProducts.reduce((sum, product) => sum + parseFloat(product.price), 0);\n  const inStockCount = wishlistProducts.filter(product => product.inStock && product.stockQuantity > 0).length;\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <div className=\"falling-dots\"></div>\n        <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n        \n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"text-center max-w-md mx-auto\">\n            <Heart className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold text-foreground mb-4\">\n              Sign In Required\n            </h1>\n            <p className=\"text-muted-foreground mb-6\">\n              Please sign in to view and manage your wishlist\n            </p>\n            <Button onClick={() => setLocation('/login')} size=\"lg\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"falling-dots\"></div>\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2\">\n              My Wishlist\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Keep track of products you're interested in\n            </p>\n          </div>\n          \n          {wishlistProducts.length > 0 && (\n            <div className=\"flex flex-col sm:flex-row gap-4 mt-4 sm:mt-0\">\n              <Card className=\"px-4 py-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Heart className=\"w-4 h-4 text-red-500\" />\n                  <span className=\"text-sm font-medium\">{wishlistProducts.length} items</span>\n                </div>\n              </Card>\n              <Card className=\"px-4 py-2\">\n                <div className=\"flex items-center gap-2\">\n                  <ShoppingCart className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm font-medium\">{inStockCount} in stock</span>\n                </div>\n              </Card>\n              <Card className=\"px-4 py-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"w-4 h-4 text-yellow-500\" />\n                  <span className=\"text-sm font-medium\">${totalValue.toFixed(2)} total</span>\n                </div>\n              </Card>\n            </div>\n          )}\n        </div>\n\n        {/* Search and Filter */}\n        {wishlistProducts.length > 0 && (\n          <div className=\"mb-8\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search your wishlist...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full px-4 py-2 pl-10 bg-input border border-border rounded-lg focus:border-primary focus:outline-none\"\n                />\n                <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Wishlist Content */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-4\">\n                  <Skeleton className=\"h-48 w-full mb-4\" />\n                  <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-6 w-1/2\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : error ? (\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-4\">Error Loading Wishlist</h2>\n            <p className=\"text-muted-foreground mb-4\">{(error as Error).message}</p>\n            <Button onClick={() => window.location.reload()}>Try Again</Button>\n          </div>\n        ) : wishlistProducts.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <Heart className=\"w-24 h-24 text-muted-foreground mx-auto mb-6\" />\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              Your Wishlist is Empty\n            </h2>\n            <p className=\"text-lg text-muted-foreground mb-8 max-w-md mx-auto\">\n              Start adding products you love to keep track of them and get notified of price changes.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" onClick={() => setLocation('/products')}>\n                Browse Products\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" onClick={() => setLocation('/')}>\n                Back to Home\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <>\n            {filteredProducts.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-2\">No Results Found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  No products match your search criteria.\n                </p>\n                <Button variant=\"outline\" onClick={() => setSearchQuery(\"\")}>\n                  Clear Search\n                </Button>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {filteredProducts.map((product) => (\n                  <div key={product.id} className=\"relative group\">\n                    <ProductCard product={product} />\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => removeFromWishlistMutation.mutate(product.id)}\n                      disabled={removeFromWishlistMutation.isPending}\n                      className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            <div className=\"text-center mt-8\">\n              <p className=\"text-muted-foreground\">\n                Showing {filteredProducts.length} of {wishlistProducts.length} products\n              </p>\n            </div>\n          </>\n        )}\n\n        {/* Recommendations */}\n        {wishlistProducts.length > 0 && (\n          <div className=\"mt-16\">\n            <ProductRecommendations \n              variant=\"personalized\" \n              limit={6} \n              title=\"You Might Also Like\"\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9472},"client/src/components/discount-code-input.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, Check, X, Tag, AlertCircle } from \"lucide-react\";\n\nexport interface DiscountCodeResult {\n  code: string;\n  type: 'percentage' | 'fixed';\n  value: string;\n  discountAmount: number;\n  minOrderAmount: string;\n  valid: boolean;\n}\n\ninterface DiscountCodeInputProps {\n  orderAmount: number;\n  onDiscountApplied: (discount: DiscountCodeResult | null) => void;\n  appliedDiscount?: DiscountCodeResult | null;\n  className?: string;\n}\n\nexport default function DiscountCodeInput({ \n  orderAmount, \n  onDiscountApplied, \n  appliedDiscount,\n  className = \"\" \n}: DiscountCodeInputProps) {\n  const [code, setCode] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n\n  const validateCodeMutation = useMutation({\n    mutationFn: async (discountCode: string) => {\n      const response = await fetch('/api/discount-codes/validate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          code: discountCode,\n          orderAmount: orderAmount.toString()\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to validate discount code');\n      }\n\n      return response.json();\n    },\n    onSuccess: (discount: DiscountCodeResult) => {\n      setError(null);\n      setCode(\"\");\n      onDiscountApplied(discount);\n    },\n    onError: (error: Error) => {\n      setError(error.message);\n      onDiscountApplied(null);\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!code.trim()) return;\n    \n    setError(null);\n    validateCodeMutation.mutate(code.trim());\n  };\n\n  const removeDiscount = () => {\n    onDiscountApplied(null);\n    setError(null);\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Applied Discount Display */}\n      {appliedDiscount && (\n        <div className=\"p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-800 rounded-full\">\n                <Check className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n              </div>\n              <div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-semibold text-green-800 dark:text-green-200\">\n                    Code Applied: {appliedDiscount.code}\n                  </span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {appliedDiscount.type === 'percentage' \n                      ? `${appliedDiscount.value}% off`\n                      : `$${appliedDiscount.value} off`\n                    }\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\n                  You save ${appliedDiscount.discountAmount.toFixed(2)}\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={removeDiscount}\n              className=\"text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-200\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Discount Code Input Form */}\n      {!appliedDiscount && (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Tag className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Have a discount code?</span>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            <div className=\"flex gap-2\">\n              <Input\n                type=\"text\"\n                placeholder=\"Enter discount code\"\n                value={code}\n                onChange={(e) => setCode(e.target.value.toUpperCase())}\n                className=\"flex-1\"\n                disabled={validateCodeMutation.isPending}\n              />\n              <Button\n                type=\"submit\"\n                variant=\"outline\"\n                disabled={!code.trim() || validateCodeMutation.isPending}\n                className=\"px-6\"\n              >\n                {validateCodeMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Checking...\n                  </>\n                ) : (\n                  'Apply'\n                )}\n              </Button>\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n          </form>\n        </div>\n      )}\n\n      {/* Helper Text */}\n      {!appliedDiscount && !error && (\n        <p className=\"text-xs text-muted-foreground\">\n          Enter your discount code above to apply it to your order\n        </p>\n      )}\n    </div>\n  );\n}","size_bytes":5529},"client/src/pages/admin-discount-codes.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Calendar, \n  Tag, \n  Percent, \n  DollarSign,\n  Users,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  Search\n} from \"lucide-react\";\nimport { DiscountCode, InsertDiscountCode } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { format } from \"date-fns\";\n\nconst DISCOUNT_TYPE_CONFIG = {\n  percentage: {\n    label: \"Percentage\",\n    icon: Percent,\n    color: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\"\n  },\n  fixed: {\n    label: \"Fixed Amount\",\n    icon: DollarSign,\n    color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"\n  }\n};\n\nconst STATUS_CONFIG = {\n  active: {\n    label: \"Active\",\n    icon: CheckCircle,\n    color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"\n  },\n  inactive: {\n    label: \"Inactive\",\n    icon: Clock,\n    color: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\"\n  },\n  expired: {\n    label: \"Expired\",\n    icon: AlertCircle,\n    color: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"\n  }\n};\n\nexport default function AdminDiscountCodes() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingCode, setEditingCode] = useState<DiscountCode | null>(null);\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Get all discount codes\n  const { data: discountCodes = [], isLoading, error } = useQuery<DiscountCode[]>({\n    queryKey: ['/api/admin/discount-codes'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/discount-codes', {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Admin access required');\n        }\n        throw new Error('Failed to fetch discount codes');\n      }\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Create discount code mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: Omit<InsertDiscountCode, 'createdBy'>) => {\n      const response = await fetch('/api/admin/discount-codes', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/discount-codes'] });\n      setIsCreateDialogOpen(false);\n    },\n  });\n\n  // Update discount code mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Omit<InsertDiscountCode, 'createdBy'>> }) => {\n      const response = await fetch(`/api/admin/discount-codes/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/discount-codes'] });\n      setEditingCode(null);\n    },\n  });\n\n  // Delete discount code mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/discount-codes/${id}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/discount-codes'] });\n    },\n  });\n\n  const getDiscountStatus = (code: DiscountCode) => {\n    const now = new Date();\n    const validFrom = new Date(code.validFrom);\n    const validTo = new Date(code.validTo);\n    \n    if (!code.isActive) return 'inactive';\n    if (now > validTo) return 'expired';\n    if (now < validFrom) return 'inactive';\n    return 'active';\n  };\n\n  const filteredCodes = discountCodes.filter(code =>\n    !searchQuery || \n    code.code.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const activeCodes = discountCodes.filter(code => getDiscountStatus(code) === 'active').length;\n  const totalUsage = discountCodes.reduce((sum, code) => sum + code.usedCount, 0);\n\n  if (!user || user.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <div className=\"falling-dots\"></div>\n        <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n        \n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"text-center max-w-md mx-auto\">\n            <Tag className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold text-foreground mb-4\">\n              Admin Access Required\n            </h1>\n            <p className=\"text-muted-foreground mb-6\">\n              {!user \n                ? 'Please sign in with an admin account to manage discount codes'\n                : 'You need admin privileges to manage discount codes'\n              }\n            </p>\n            <Button onClick={() => setLocation('/login')} size=\"lg\">\n              {!user ? 'Sign In' : 'Contact Admin'}\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"falling-dots\"></div>\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2\">\n              Discount Code Management\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Create and manage discount codes for your customers\n            </p>\n          </div>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"lg\" className=\"mt-4 sm:mt-0\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Discount Code\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Create New Discount Code</DialogTitle>\n              </DialogHeader>\n              <DiscountCodeForm \n                onSubmit={(data) => createMutation.mutate(data)}\n                isLoading={createMutation.isPending}\n                error={createMutation.error?.message}\n              />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Total Codes</p>\n                  <p className=\"text-3xl font-bold\">{discountCodes.length}</p>\n                </div>\n                <Tag className=\"w-8 h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Active Codes</p>\n                  <p className=\"text-3xl font-bold text-green-600\">{activeCodes}</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Total Usage</p>\n                  <p className=\"text-3xl font-bold text-blue-600\">{totalUsage}</p>\n                </div>\n                <Users className=\"w-8 h-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <div className=\"relative max-w-md\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search discount codes...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          </div>\n        </div>\n\n        {/* Discount Codes List */}\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"animate-pulse space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <div className=\"h-5 bg-muted rounded w-32\"></div>\n                      <div className=\"h-6 bg-muted rounded w-16\"></div>\n                    </div>\n                    <div className=\"h-4 bg-muted rounded w-full\"></div>\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : error ? (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{(error as Error).message}</AlertDescription>\n          </Alert>\n        ) : filteredCodes.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <Tag className=\"w-24 h-24 text-muted-foreground mx-auto mb-6\" />\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              No Discount Codes\n            </h2>\n            <p className=\"text-lg text-muted-foreground mb-8 max-w-md mx-auto\">\n              {searchQuery \n                ? 'No codes match your search criteria.'\n                : 'Create your first discount code to start offering promotions to customers.'\n              }\n            </p>\n            <Button onClick={() => setIsCreateDialogOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create First Code\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredCodes.map((code) => {\n              const status = getDiscountStatus(code);\n              const statusConfig = STATUS_CONFIG[status];\n              const typeConfig = DISCOUNT_TYPE_CONFIG[code.type as keyof typeof DISCOUNT_TYPE_CONFIG];\n              const StatusIcon = statusConfig.icon;\n              const TypeIcon = typeConfig.icon;\n\n              return (\n                <Card key={code.id} className=\"hover:border-primary/50 transition-colors\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-3\">\n                          <h3 className=\"text-xl font-bold font-mono\">{code.code}</h3>\n                          <Badge className={statusConfig.color}>\n                            <StatusIcon className=\"w-3 h-3 mr-1\" />\n                            {statusConfig.label}\n                          </Badge>\n                          <Badge className={typeConfig.color}>\n                            <TypeIcon className=\"w-3 h-3 mr-1\" />\n                            {code.type === 'percentage' ? `${code.value}%` : `$${code.value}`}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <p className=\"text-muted-foreground\">Usage</p>\n                            <p className=\"font-medium\">\n                              {code.usedCount} / {code.maxUses ? code.maxUses : '∞'}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Min Order</p>\n                            <p className=\"font-medium\">${code.minOrderAmount || '0.00'}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Valid From</p>\n                            <p className=\"font-medium\">{format(new Date(code.validFrom), 'MMM d')}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Valid To</p>\n                            <p className=\"font-medium\">{format(new Date(code.validTo), 'MMM d')}</p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setEditingCode(code)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (confirm(`Delete discount code \"${code.code}\"?`)) {\n                              deleteMutation.mutate(code.id);\n                            }\n                          }}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Edit Dialog */}\n        <Dialog open={!!editingCode} onOpenChange={() => setEditingCode(null)}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Discount Code</DialogTitle>\n            </DialogHeader>\n            {editingCode && (\n              <DiscountCodeForm \n                initialData={editingCode}\n                onSubmit={(data) => updateMutation.mutate({ id: editingCode.id, data })}\n                isLoading={updateMutation.isPending}\n                error={updateMutation.error?.message}\n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n\n// Discount Code Form Component\ninterface DiscountCodeFormProps {\n  onSubmit: (data: Omit<InsertDiscountCode, 'createdBy'>) => void;\n  isLoading?: boolean;\n  error?: string;\n  initialData?: Partial<DiscountCode>;\n}\n\nfunction DiscountCodeForm({ onSubmit, isLoading, error, initialData }: DiscountCodeFormProps) {\n  const [formData, setFormData] = useState({\n    code: initialData?.code || '',\n    type: initialData?.type || 'percentage',\n    value: initialData?.value || '',\n    minOrderAmount: initialData?.minOrderAmount || '',\n    maxUses: initialData?.maxUses?.toString() || '',\n    isActive: initialData?.isActive ?? true,\n    validFrom: initialData?.validFrom ? format(new Date(initialData.validFrom), 'yyyy-MM-dd') : format(new Date(), 'yyyy-MM-dd'),\n    validTo: initialData?.validTo ? format(new Date(initialData.validTo), 'yyyy-MM-dd') : format(new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), 'yyyy-MM-dd')\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({\n      code: formData.code.toUpperCase(),\n      type: formData.type as 'percentage' | 'fixed',\n      value: formData.value,\n      minOrderAmount: formData.minOrderAmount || '0',\n      maxUses: formData.maxUses ? parseInt(formData.maxUses) : undefined,\n      isActive: formData.isActive,\n      validFrom: new Date(formData.validFrom),\n      validTo: new Date(formData.validTo)\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <label className=\"text-sm font-medium\">Code</label>\n        <Input\n          value={formData.code}\n          onChange={(e) => setFormData({ ...formData, code: e.target.value.toUpperCase() })}\n          placeholder=\"SUMMER20\"\n          required\n        />\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium\">Type</label>\n          <Select value={formData.type} onValueChange={(value) => setFormData({ ...formData, type: value })}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"percentage\">Percentage</SelectItem>\n              <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <label className=\"text-sm font-medium\">Value</label>\n          <Input\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.value}\n            onChange={(e) => setFormData({ ...formData, value: e.target.value })}\n            placeholder={formData.type === 'percentage' ? '20' : '10.00'}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium\">Min Order Amount</label>\n          <Input\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.minOrderAmount}\n            onChange={(e) => setFormData({ ...formData, minOrderAmount: e.target.value })}\n            placeholder=\"0.00\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"text-sm font-medium\">Max Uses</label>\n          <Input\n            type=\"number\"\n            value={formData.maxUses}\n            onChange={(e) => setFormData({ ...formData, maxUses: e.target.value })}\n            placeholder=\"Unlimited\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium\">Valid From</label>\n          <Input\n            type=\"date\"\n            value={formData.validFrom}\n            onChange={(e) => setFormData({ ...formData, validFrom: e.target.value })}\n            required\n          />\n        </div>\n        \n        <div>\n          <label className=\"text-sm font-medium\">Valid To</label>\n          <Input\n            type=\"date\"\n            value={formData.validTo}\n            onChange={(e) => setFormData({ ...formData, validTo: e.target.value })}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <input\n          type=\"checkbox\"\n          id=\"isActive\"\n          checked={formData.isActive}\n          onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n        />\n        <label htmlFor=\"isActive\" className=\"text-sm font-medium\">Active</label>\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n        {isLoading ? 'Creating...' : (initialData ? 'Update Code' : 'Create Code')}\n      </Button>\n    </form>\n  );\n}","size_bytes":20808},"client/src/pages/purchase-history.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  ShoppingBag, \n  Download, \n  Calendar, \n  Search, \n  Filter,\n  CheckCircle,\n  Clock,\n  AlertCircle,\n  RefreshCw,\n  Key,\n  Copy,\n  Eye\n} from \"lucide-react\";\nimport { Order } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { format } from \"date-fns\";\n\nconst ORDER_STATUS_CONFIG = {\n  pending: {\n    label: \"Pending\",\n    icon: Clock,\n    color: \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\"\n  },\n  confirmed: {\n    label: \"Confirmed\", \n    icon: CheckCircle,\n    color: \"bg-blue-500/10 text-blue-500 border-blue-500/20\"\n  },\n  completed: {\n    label: \"Completed\",\n    icon: CheckCircle,\n    color: \"bg-green-500/10 text-green-500 border-green-500/20\"\n  },\n  cancelled: {\n    label: \"Cancelled\",\n    icon: AlertCircle,\n    color: \"bg-red-500/10 text-red-500 border-red-500/20\"\n  }\n};\n\nexport default function PurchaseHistory() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Get user's order history\n  const { data: orders = [], isLoading, error } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n    queryFn: async () => {\n      const response = await fetch('/api/orders', {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Please log in to view your purchase history');\n        }\n        throw new Error('Failed to fetch purchase history');\n      }\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Reorder mutation - add product back to cart\n  const reorderMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      // In a real app, this would add to cart or redirect to product\n      setLocation(`/product/${productId}`);\n    },\n  });\n\n  // Copy license key to clipboard\n  const copyLicenseKey = async (licenseKey: string) => {\n    try {\n      await navigator.clipboard.writeText(licenseKey);\n      // You might want to show a toast notification here\n    } catch (error) {\n      console.error('Failed to copy license key:', error);\n    }\n  };\n\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = !searchQuery || \n      order.productName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      order.id.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const totalOrders = orders.length;\n  const completedOrders = orders.filter(order => order.status === 'completed').length;\n  const totalSpent = orders\n    .filter(order => order.status !== 'cancelled')\n    .reduce((sum, order) => sum + parseFloat(order.productPrice), 0);\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <div className=\"falling-dots\"></div>\n        <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n        \n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"text-center max-w-md mx-auto\">\n            <ShoppingBag className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold text-foreground mb-4\">\n              Sign In Required\n            </h1>\n            <p className=\"text-muted-foreground mb-6\">\n              Please sign in to view your purchase history\n            </p>\n            <Button onClick={() => setLocation('/login')} size=\"lg\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"falling-dots\"></div>\n      <Header searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2\">\n              Purchase History\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Track your orders, download products, and manage your purchases\n            </p>\n          </div>\n          \n          {orders.length > 0 && (\n            <div className=\"flex flex-col sm:flex-row gap-4 mt-4 sm:mt-0\">\n              <Card className=\"px-4 py-2\">\n                <div className=\"flex items-center gap-2\">\n                  <ShoppingBag className=\"w-4 h-4 text-blue-500\" />\n                  <span className=\"text-sm font-medium\">{totalOrders} orders</span>\n                </div>\n              </Card>\n              <Card className=\"px-4 py-2\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm font-medium\">{completedOrders} completed</span>\n                </div>\n              </Card>\n              <Card className=\"px-4 py-2\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm font-medium\">${totalSpent.toFixed(2)} total</span>\n                </div>\n              </Card>\n            </div>\n          )}\n        </div>\n\n        {/* Search and Filters */}\n        {orders.length > 0 && (\n          <div className=\"mb-8\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search orders...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Orders</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        )}\n\n        {/* Orders List */}\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"animate-pulse\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"h-5 bg-muted rounded w-48\"></div>\n                        <div className=\"h-4 bg-muted rounded w-32\"></div>\n                      </div>\n                      <div className=\"h-6 bg-muted rounded w-20\"></div>\n                    </div>\n                    <div className=\"h-4 bg-muted rounded w-24\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : error ? (\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-4\">Error Loading Orders</h2>\n            <p className=\"text-muted-foreground mb-4\">{(error as Error).message}</p>\n            <Button onClick={() => window.location.reload()}>Try Again</Button>\n          </div>\n        ) : orders.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <ShoppingBag className=\"w-24 h-24 text-muted-foreground mx-auto mb-6\" />\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              No Purchase History\n            </h2>\n            <p className=\"text-lg text-muted-foreground mb-8 max-w-md mx-auto\">\n              You haven't made any purchases yet. Start browsing our products to make your first order!\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" onClick={() => setLocation('/products')}>\n                Browse Products\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" onClick={() => setLocation('/')}>\n                Back to Home\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <>\n            {filteredOrders.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-2\">No Orders Found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  No orders match your search criteria.\n                </p>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setSearchQuery(\"\");\n                    setStatusFilter(\"all\");\n                  }}\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {filteredOrders.map((order) => {\n                  const statusConfig = ORDER_STATUS_CONFIG[order.status as keyof typeof ORDER_STATUS_CONFIG];\n                  const StatusIcon = statusConfig?.icon || Clock;\n                  \n                  return (\n                    <Card key={order.id} className=\"hover:border-primary/50 transition-colors\">\n                      <CardHeader>\n                        <div className=\"flex flex-col sm:flex-row justify-between items-start gap-4\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <CardTitle className=\"text-xl font-semibold\">\n                                {order.productName}\n                              </CardTitle>\n                              <Badge className={statusConfig?.color}>\n                                <StatusIcon className=\"w-3 h-3 mr-1\" />\n                                {statusConfig?.label}\n                              </Badge>\n                            </div>\n                            <div className=\"space-y-1 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"w-4 h-4\" />\n                                <span>Ordered on {format(new Date(order.createdAt), 'MMM d, yyyy')}</span>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <span>Order ID: {order.id.slice(0, 8)}</span>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <span>Payment: {order.paymentMethod}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"text-right\">\n                            <div className=\"text-2xl font-bold text-primary mb-2\">\n                              ${parseFloat(order.productPrice).toFixed(2)}\n                            </div>\n                            {order.discountAmount && parseFloat(order.discountAmount) > 0 && (\n                              <div className=\"text-sm text-green-600\">\n                                Saved ${parseFloat(order.discountAmount).toFixed(2)}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </CardHeader>\n                      \n                      <CardContent className=\"pt-0\">\n                        {/* License Key & Download Section */}\n                        {order.status === 'completed' && order.licenseKey && (\n                          <div className=\"bg-muted/50 rounded-lg p-4 mb-4\">\n                            <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                              <Key className=\"w-4 h-4\" />\n                              Product Access\n                            </h4>\n                            <div className=\"space-y-3\">\n                              <div className=\"flex items-center gap-2 text-sm\">\n                                <span className=\"text-muted-foreground\">License Key:</span>\n                                <code className=\"bg-background px-2 py-1 rounded text-xs font-mono\">\n                                  {order.licenseKey}\n                                </code>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => copyLicenseKey(order.licenseKey!)}\n                                  className=\"h-6 px-2\"\n                                >\n                                  <Copy className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                              \n                              {order.downloadUrl && (\n                                <div className=\"flex gap-2\">\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => order.downloadUrl && window.open(order.downloadUrl, '_blank')}\n                                  >\n                                    <Download className=\"w-4 h-4 mr-2\" />\n                                    Download ({order.downloadCount || 0} downloads)\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Action Buttons */}\n                        <div className=\"flex flex-wrap gap-3\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setLocation(`/orders/${order.id}`)}\n                          >\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            View Details\n                          </Button>\n                          \n                          {order.productId && (\n                            <Button\n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => reorderMutation.mutate(order.productId!)}\n                              disabled={reorderMutation.isPending}\n                            >\n                              <RefreshCw className=\"w-4 h-4 mr-2\" />\n                              Buy Again\n                            </Button>\n                          )}\n                          \n                          {order.status === 'completed' && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setLocation(`/review/${order.productId}`)}\n                            >\n                              Write Review\n                            </Button>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n\n            <div className=\"text-center mt-8\">\n              <p className=\"text-muted-foreground\">\n                Showing {filteredOrders.length} of {orders.length} orders\n              </p>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":16861}},"version":1}